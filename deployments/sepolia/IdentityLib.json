{
  "address": "0x4E8e895927958e8E924C0d5145D08A6bdd0F0670",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityRemoved",
      "type": "event"
    }
  ],
  "transactionHash": "0x55da3ee8b2ea0050a583c6c20504ca07c286211fd398dd61fb78692c2ac0ca00",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0x4E8e895927958e8E924C0d5145D08A6bdd0F0670",
    "transactionIndex": 25,
    "gasUsed": "72227",
    "logsBloom": "0x
    "blockHash": "0xb06164fbb9d683f1ad9ffb1b0246460f33cc9935c9888fb98413457bbad2267f",
    "transactionHash": "0x55da3ee8b2ea0050a583c6c20504ca07c286211fd398dd61fb78692c2ac0ca00",
    "logs": [],
    "blockNumber": 3867022,
    "cumulativeGasUsed": "14358548",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "db7be833eb31146ace18bf1ce65f8bcb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/IdentityLib.sol\":\"IdentityLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"src/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"src/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\\n\\n/*\\nHow IdentityRegistry works:\\n\\n1. User creates an Identity contract\\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\\n\\n*/\",\"keccak256\":\"0x73ba3756b679ad9c5577e896f38e4bd987d3f5881c795c37b55d6e0e6e091fd9\",\"license\":\"MIT\"},\"src/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"src/interfaces/IIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport { IIdentity } from \\\"./IIdentity.sol\\\";\\n\\ninterface IIdentityRegistry {\\n    // events\\n    event IdentityAdded(address indexed _address, IIdentity identity);\\n    event IdentityRemoved(address indexed _address, IIdentity identity);\\n    event IdentityCountryUpdated(address indexed identity, uint16 indexed country);\\n    event ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim);\\n    event ClaimRemoved(address indexed identity, uint256 indexed claimTopic);\\n    event WalletLinked(address indexed walletAddress, bytes32 indexed onchainID);\\n    event WalletUnlinked(address indexed walletAddress, bytes32 indexed onchainID);\\n\\n    // functions\\n    function addIdentity(address _identity, IIdentity identityData) external;\\n    function batchAddIdentity(address[] calldata _identities, IIdentity[] calldata identityDatas) external;\\n    function removeIdentity(address _identity) external;\\n    function addClaim(address _identity, uint256 _claimTopic, bytes calldata _claim) external;\\n    function removeClaim(address _identity, uint256 _claimTopic) external;\\n\\n    // registry consultation\\n    function contains(address _userAddress) external view returns (bool);\\n    function isVerified(address _userAddress) external view returns (bool);\\n    function identity(address _userAddress) external view returns (IIdentity);\\n\\n    // getters\\n    function getRegistryUsers() external view returns (address[] memory);\\n    function isRegistryUser(address _registryUser) external view returns(bool);\\n    function getClaims(address _registryUser) external view returns(uint256[] memory);\\n    function getClaim(address _registryUser, uint256 _claimTopic) external view returns(bytes memory);\\n    function hasClaim(address _registryUser, uint256 _claimTopic) external view returns(bool);\\n\\n    function getOnchainIDFromWallet(address _userAddress) external view returns (bytes32);\\n    function walletLinked(bytes32 _onchainID) external view returns (bool);\\n    function unlinkWallet(bytes32 _onchainID) external;\\n    function unlinkWalletAddress(address _walletAddress) external;\\n    function walletAddressLinked(address _walletAddress) external view returns (bool);\\n}\",\"keccak256\":\"0x4dcbc820112d94923107db45c32bc6ec6b733954e838c20193f51db2c11a6493\",\"license\":\"MIT\"},\"src/libraries/IdentityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport {IIdentity} from \\\"../interfaces/IIdentity.sol\\\";\\nimport {IIdentityRegistry} from \\\"../interfaces/IIdentityRegistry.sol\\\";\\n\\nstruct Identity {\\n    IIdentity identityData;\\n    uint16 country;\\n    mapping(uint256 => bytes) claims;\\n    mapping(uint256 => bool) claimTopics;\\n}\\n\\nstruct IdentityContract {\\n    mapping(address => Identity) identities;\\n    address[] identityOwners;\\n    address[] identityAddresses;\\n    mapping(address => bytes32) addressToOnchainID;\\n}\\n\\nstruct IdentityStorage {\\n    IdentityContract identityContract;\\n}\\n\\nlibrary IdentityLib {\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nomyx.IdentityRegistryFacet.IdentityStorage\\\");\\n\\n    event IdentityAdded(address indexed _address, IIdentity identity);\\n    event IdentityRemoved(address indexed _address, IIdentity identity);\\n\\n    function identityStorage() internal pure returns (IdentityStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice get an Identity for an address\\n    function _getIdentity(\\n        IdentityContract storage,\\n        address _identityAddress\\n    ) internal view returns (Identity storage) {\\n        return identityStorage().identityContract.identities[_identityAddress];\\n    }\\n\\n    /// @notice set an Identity for a tokenid keyed by string\\n    function _setIdentity(\\n        IdentityContract storage self,\\n        address _identityAddress,\\n        Identity storage identity\\n    ) internal {\\n        self.identities[_identityAddress].identityData = identity.identityData;\\n        self.identities[_identityAddress].country = identity.country;\\n        self.identityAddresses.push(_identityAddress);\\n        emit IdentityAdded(_identityAddress, identity.identityData);\\n    }\\n\\n    /// @notice remove an Identity for an address\\n    function _removeIdentity(\\n        IdentityContract storage self,\\n        address _identityAddress\\n    ) internal {\\n        delete self.identities[_identityAddress];\\n        \\n        uint256 index;\\n        for (uint256 i = 0; i < self.identityAddresses.length; i++) {\\n            if (self.identityAddresses[i] == _identityAddress) {\\n                index = i;\\n                break;\\n            }\\n        }\\n        if (index != self.identityAddresses.length - 1) {\\n            self.identityAddresses[index] = self.identityAddresses[self.identityAddresses.length - 1];\\n        }\\n        self.identityAddresses.pop();\\n        emit IdentityRemoved(_identityAddress, self.identities[_identityAddress].identityData);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfc5f4d7111ddece4beda89f709760b179b17a12bc50b248aa0ac90848f991d2b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d5ba02fefeec7a2557733093adc79bcb9fe5d009220f622de7e7f8e10f87f6ea64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d5ba02fefeec7a2557733093adc79bcb9fe5d009220f622de7e7f8e10f87f6ea64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}