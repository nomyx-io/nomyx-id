{
  "address": "0xfe30ea7bcFa85debB8FC3c8AA925ebEb22011b6f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "sourceBytes",
          "type": "bytes[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "matchString",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "replaceString",
              "type": "string"
            }
          ],
          "internalType": "struct Replacement[]",
          "name": "replacements_",
          "type": "tuple[]"
        }
      ],
      "name": "replace",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x47bf27701cefd6e4bd0560482fd5a76b5664fced1218d6d92b6d9e6b94cfddb5",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0xfe30ea7bcFa85debB8FC3c8AA925ebEb22011b6f",
    "transactionIndex": 21,
    "gasUsed": "351013",
    "logsBloom": "0x
    "blockHash": "0x69f6dad44a04d82c8b105814cc38c0bf3f35c5288b9b569f4187d4ccd4c3b9d0",
    "transactionHash": "0x47bf27701cefd6e4bd0560482fd5a76b5664fced1218d6d92b6d9e6b94cfddb5",
    "logs": [],
    "blockNumber": 3879095,
    "cumulativeGasUsed": "10269290",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dbcfcf842e810514aedd8e426522bfbb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"sourceBytes\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"matchString\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"replaceString\",\"type\":\"string\"}],\"internalType\":\"struct Replacement[]\",\"name\":\"replacements_\",\"type\":\"tuple[]\"}],\"name\":\"replace\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/StringsLib.sol\":\"StringsLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/interfaces/IStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Replacement {\\n    string matchString;\\n    string replaceString;\\n}\\n\",\"keccak256\":\"0x0df4530f0e41983002d8732a50f802d069b85d0f2fedad4dc58bf4b73ea39146\",\"license\":\"MIT\"},\"src/libraries/StringsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nlibrary StringsLib {\\n\\n    function parseInt(string memory s) internal pure returns (uint256 res) {\\n\\n        for (uint256 i = 0; i < bytes(s).length; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        return res;\\n\\n    }\\n\\n    function startsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (haystackBytes[i] != needleBytes[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function endsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (\\n                haystackBytes[haystackLength - i - 1] !=\\n                needleBytes[needleLength - i - 1]\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 length = haystackBytes.length;\\n        uint256 endpos = length - startpos;\\n        bytes memory substringBytes = new bytes(endpos);\\n        for (uint256 i = 0; i < endpos; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos, uint256 endpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 substringLength = endpos - startpos;\\n        bytes memory substringBytes = new bytes(substringLength);\\n        for (uint256 i = 0; i < substringLength; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function concat(string[] memory _strings)\\n        internal\\n        pure\\n        returns (string memory _concat)\\n    {\\n        _concat = \\\"\\\";\\n        for (uint256 i = 0; i < _strings.length; i++) {\\n            _concat = string(abi.encodePacked(_concat, _strings[i]));\\n        }\\n        return _concat;\\n    }\\n\\n    function split(string memory _string, string memory _delimiter) internal pure returns (string[] memory _split) {\\n        _split = new string[](0);\\n        uint256 _delimiterLength = bytes(_delimiter).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _splitLength = 0;\\n        uint256 _splitIndex = 0;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_delimiter)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _split[_splitIndex] = substring(_string, _startpos);\\n                    _splitIndex++;\\n                    _splitLength++;\\n                }\\n                _startpos = i + _delimiterLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _split[_splitIndex] = substring(_string, _startpos);\\n            _splitIndex++;\\n            _splitLength++;\\n        }\\n        return _split;\\n    }\\n\\n    function join(string[] memory _strings, string memory _delimiter) internal pure returns (string memory _joined) {\\n        for (uint256 i = 0; i < _strings.length; i++) {\\n            _joined = string(abi.encodePacked(_joined, _strings[i]));\\n            if (i < _strings.length - 1) {\\n                _joined = string(abi.encodePacked(_joined, _delimiter));\\n            }\\n        }\\n        return _joined;\\n    }\\n\\n    function replace(string memory _string, string memory _search, string memory _replace) internal pure returns (string memory _replaced) {\\n        _replaced = _string;\\n        uint256 _searchLength = bytes(_search).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _replacedLength = _stringLength;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_search)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _replaced = substring(_replaced, _startpos);\\n                    _replacedLength -= _endpos - _startpos;\\n                }\\n                _replaced = string(abi.encodePacked(_replaced, _replace));\\n                _replacedLength += bytes(_replace).length;\\n                _startpos = i + _searchLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _replaced = substring(_replaced, _startpos);\\n            _replacedLength -= _stringLength - _startpos;\\n        }\\n        return _replaced;\\n    }\\n\\n    function trim(string memory _string) internal pure returns (string memory _trimmed) {\\n        _trimmed = _string;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _startpos = i;\\n                break;\\n            }\\n        }\\n        for (uint256 i = _stringLength - 1; i >= 0; i--) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _endpos = i;\\n                break;\\n            }\\n        }\\n        if (_startpos < _endpos) {\\n            _trimmed = substring(_trimmed, _startpos);\\n            _trimmed = substring(_trimmed, 0, _endpos - _startpos + 1);\\n        }\\n        return _trimmed;\\n    }\\n\\n    function toUint16(string memory s) internal pure returns (uint16 res_) {\\n        uint256 res = 0;\\n        for (uint256 i = 0; i < bytes(s).length; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        res_ = uint16(res);\\n    }\\n\\n\\n    function replace(string[] memory input, string memory matchTag, string[] memory repl) internal pure returns (string memory) {\\n        string memory svgBody;\\n        for(uint256 i = 0; i < input.length; i++) {\\n            string memory svgString = input[i];\\n            string memory outValue;\\n            if(StringsLib.startsWith(svgString, matchTag)) {\\n                string memory restOfLine = StringsLib.substring(svgString, bytes(matchTag).length);\\n                uint256 replIndex = StringsLib.parseInt(restOfLine);\\n                outValue = repl[replIndex];\\n            } else {\\n                outValue = svgString;\\n            }\\n            svgBody = string(abi.encodePacked(svgBody, outValue));\\n        }\\n        return svgBody;\\n    }\\n\\n    function replace(bytes[] memory sourceBytes, Replacement[] memory replacements_) public pure returns (string memory) {\\n        //bytes[] memory sourceBytes = _getSourceBytes();\\n        string memory outputFile = \\\"\\\";\\n        for (uint256 i = 0; i < sourceBytes.length; i++) {\\n            bytes memory sourceByte = sourceBytes[i];\\n            string memory outputLine  = string(sourceBytes[i]);\\n            for (uint256 j = 0; j < replacements_.length; j++) {\\n                Replacement memory replacement = replacements_[j];\\n                if (keccak256(sourceByte) == keccak256(bytes(replacement.matchString))) {\\n                    outputLine = replacement.replaceString;\\n                }\\n            }\\n            outputFile = string(abi.encodePacked(outputFile, outputLine));\\n        }\\n        return outputFile;\\n    }    \\n}\\n\",\"keccak256\":\"0x02a9a5ce9ebdced869474486e20ab30554be62b13e2f86f894f027524cc60965\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61056261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806320134c5c1461003a575b600080fd5b61004d610048366004610360565b610063565b60405161005a919061046e565b60405180910390f35b60408051602081019091526000808252606091905b8451811015610155576000858281518110610095576100956104a1565b6020026020010151905060008683815181106100b3576100b36104a1565b6020026020010151905060005b865181101561011b5760008782815181106100dd576100dd6104a1565b6020026020010151905080600001518051906020012084805190602001200361010857806020015192505b5080610113816104b7565b9150506100c0565b50838160405160200161012f9291906104fd565b60405160208183030381529060405293505050808061014d906104b7565b915050610078565b509392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156101965761019661015d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156101c5576101c561015d565b604052919050565b600067ffffffffffffffff8211156101e7576101e761015d565b5060051b60200190565b600067ffffffffffffffff83111561020b5761020b61015d565b61021e6020601f19601f8601160161019c565b905082815283838301111561023257600080fd5b828260208301376000602084830101529392505050565b600082601f83011261025a57600080fd5b610269838335602085016101f1565b9392505050565b600082601f83011261028157600080fd5b81356020610296610291836101cd565b61019c565b82815260059290921b840181019181810190868411156102b557600080fd5b8286015b8481101561035557803567ffffffffffffffff808211156102da5760008081fd5b8189019150604080601f19848d030112156102f55760008081fd5b6102fd610173565b878401358381111561030f5760008081fd5b61031d8d8a83880101610249565b8252509083013590828211156103335760008081fd5b6103418c8984870101610249565b8189015286525050509183019183016102b9565b509695505050505050565b600080604080848603121561037457600080fd5b833567ffffffffffffffff8082111561038c57600080fd5b818601915086601f8301126103a057600080fd5b813560206103b0610291836101cd565b82815260059290921b8401810191818101908a8411156103cf57600080fd5b8286015b8481101561041b578035868111156103eb5760008081fd5b8701603f81018d136103fd5760008081fd5b61040d8d868301358b84016101f1565b8452509183019183016103d3565b509750508701359350508083111561043257600080fd5b505061044085828601610270565b9150509250929050565b60005b8381101561046557818101518382015260200161044d565b50506000910152565b602081526000825180602084015261048d81604085016020870161044a565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036104f657634e487b7160e01b600052601160045260246000fd5b5060010190565b6000835161050f81846020880161044a565b83519083019061052381836020880161044a565b0194935050505056fea2646970667358221220b83f6ab3ca175ea2aa641c4a743161296e4773a40be4c039f7befa79576c8fb764736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806320134c5c1461003a575b600080fd5b61004d610048366004610360565b610063565b60405161005a919061046e565b60405180910390f35b60408051602081019091526000808252606091905b8451811015610155576000858281518110610095576100956104a1565b6020026020010151905060008683815181106100b3576100b36104a1565b6020026020010151905060005b865181101561011b5760008782815181106100dd576100dd6104a1565b6020026020010151905080600001518051906020012084805190602001200361010857806020015192505b5080610113816104b7565b9150506100c0565b50838160405160200161012f9291906104fd565b60405160208183030381529060405293505050808061014d906104b7565b915050610078565b509392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156101965761019661015d565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156101c5576101c561015d565b604052919050565b600067ffffffffffffffff8211156101e7576101e761015d565b5060051b60200190565b600067ffffffffffffffff83111561020b5761020b61015d565b61021e6020601f19601f8601160161019c565b905082815283838301111561023257600080fd5b828260208301376000602084830101529392505050565b600082601f83011261025a57600080fd5b610269838335602085016101f1565b9392505050565b600082601f83011261028157600080fd5b81356020610296610291836101cd565b61019c565b82815260059290921b840181019181810190868411156102b557600080fd5b8286015b8481101561035557803567ffffffffffffffff808211156102da5760008081fd5b8189019150604080601f19848d030112156102f55760008081fd5b6102fd610173565b878401358381111561030f5760008081fd5b61031d8d8a83880101610249565b8252509083013590828211156103335760008081fd5b6103418c8984870101610249565b8189015286525050509183019183016102b9565b509695505050505050565b600080604080848603121561037457600080fd5b833567ffffffffffffffff8082111561038c57600080fd5b818601915086601f8301126103a057600080fd5b813560206103b0610291836101cd565b82815260059290921b8401810191818101908a8411156103cf57600080fd5b8286015b8481101561041b578035868111156103eb5760008081fd5b8701603f81018d136103fd5760008081fd5b61040d8d868301358b84016101f1565b8452509183019183016103d3565b509750508701359350508083111561043257600080fd5b505061044085828601610270565b9150509250929050565b60005b8381101561046557818101518382015260200161044d565b50506000910152565b602081526000825180602084015261048d81604085016020870161044a565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036104f657634e487b7160e01b600052601160045260246000fd5b5060010190565b6000835161050f81846020880161044a565b83519083019061052381836020880161044a565b0194935050505056fea2646970667358221220b83f6ab3ca175ea2aa641c4a743161296e4773a40be4c039f7befa79576c8fb764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}