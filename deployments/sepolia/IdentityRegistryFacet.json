{
  "address": "0x1A76d356F40d3051a3F1ed6f1279974d3ae879d8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimTopic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "claim",
          "type": "bytes"
        }
      ],
      "name": "ClaimAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimTopic",
          "type": "uint256"
        }
      ],
      "name": "ClaimRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractAddressesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "country",
          "type": "uint16"
        }
      ],
      "name": "IdentityCountryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "onchainID",
          "type": "bytes32"
        }
      ],
      "name": "WalletLinked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "walletAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "onchainID",
          "type": "bytes32"
        }
      ],
      "name": "WalletUnlinked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_identity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_claim",
          "type": "bytes"
        }
      ],
      "name": "addClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_identity",
          "type": "address"
        },
        {
          "internalType": "contract IIdentity",
          "name": "identityData",
          "type": "address"
        }
      ],
      "name": "addIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_identities",
          "type": "address[]"
        },
        {
          "internalType": "contract IIdentity[]",
          "name": "identityDatas",
          "type": "address[]"
        }
      ],
      "name": "batchAddIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryUser",
          "type": "address"
        }
      ],
      "name": "getClaims",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getOnchainIDFromWallet",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistryUsers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "hasClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "identity",
      "outputs": [
        {
          "internalType": "contract IIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registryUser",
          "type": "address"
        }
      ],
      "name": "isRegistryUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_identity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "removeClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_identity",
          "type": "address"
        }
      ],
      "name": "removeIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_onchainID",
          "type": "bytes32"
        }
      ],
      "name": "unlinkWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "unlinkWalletAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_walletAddress",
          "type": "address"
        }
      ],
      "name": "walletAddressLinked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "walletLinked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x29933f5f8573e5cd49826bf65f988bdb1cd2fc828783a904fa8d4c698fe32ad1",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0x1A76d356F40d3051a3F1ed6f1279974d3ae879d8",
    "transactionIndex": 15,
    "gasUsed": "1544496",
    "logsBloom": "0x
    "blockHash": "0xfedd9e9e7c1503a00826c7bf176a5f61fa4bec156a272b72d74e3f0f70bbc703",
    "transactionHash": "0x29933f5f8573e5cd49826bf65f988bdb1cd2fc828783a904fa8d4c698fe32ad1",
    "logs": [],
    "blockNumber": 3861184,
    "cumulativeGasUsed": "3942656",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "469c9ec9a50f53e2fd48aa877fe7231f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claim\",\"type\":\"bytes\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractAddressesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"IdentityCountryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"onchainID\",\"type\":\"bytes32\"}],\"name\":\"WalletLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"onchainID\",\"type\":\"bytes32\"}],\"name\":\"WalletUnlinked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_claim\",\"type\":\"bytes\"}],\"name\":\"addClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"identityData\",\"type\":\"address\"}],\"name\":\"addIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_identities\",\"type\":\"address[]\"},{\"internalType\":\"contract IIdentity[]\",\"name\":\"identityDatas\",\"type\":\"address[]\"}],\"name\":\"batchAddIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryUser\",\"type\":\"address\"}],\"name\":\"getClaims\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getOnchainIDFromWallet\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryUsers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"hasClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryUser\",\"type\":\"address\"}],\"name\":\"isRegistryUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"removeIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_onchainID\",\"type\":\"bytes32\"}],\"name\":\"unlinkWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"unlinkWalletAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"walletAddressLinked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"walletLinked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is meant to be used via diamond proxy\",\"kind\":\"dev\",\"methods\":{\"addClaim(address,uint256,bytes)\":{\"details\":\"this function can only be called by a trusted issuer\",\"params\":{\"_claim\":\"claim data\",\"_claimTopic\":\"claim topic\",\"_identity\":\"address of the identity contract\"}},\"addIdentity(address,address)\":{\"details\":\"this function can only be called by a trusted issuer\",\"params\":{\"_identity\":\"address of the identity contract\",\"identityData\":\"address of the identity data contract\"}},\"batchAddIdentity(address[],address[])\":{\"details\":\"this function can only be called by a trusted issuer\",\"params\":{\"_identities\":\"array of addresses of the identities\",\"identityDatas\":\"array of addresses of the identity data contracts\"}},\"contains(address)\":{\"params\":{\"_userAddress\":\"address of the identity user\"},\"returns\":{\"_0\":\"bool\"}},\"getClaim(address,uint256)\":{\"params\":{\"_claimTopic\":\"claim topic\",\"_registryUser\":\"address of the registry user\"},\"returns\":{\"_0\":\"claim data\"}},\"getClaims(address)\":{\"params\":{\"_registryUser\":\"address of the registry user\"},\"returns\":{\"_0\":\"array of claim topics\"}},\"getOnchainIDFromWallet(address)\":{\"params\":{\"_userAddress\":\"address of the registry user\"},\"returns\":{\"_0\":\"onchainID onchain ID\"}},\"getRegistryUsers()\":{\"returns\":{\"_0\":\"array of addresses of the users\"}},\"hasClaim(address,uint256)\":{\"params\":{\"_claimTopic\":\"claim topic\",\"_registryUser\":\"address of the registry user\"},\"returns\":{\"_0\":\"bool\"}},\"identity(address)\":{\"params\":{\"_userAddress\":\"address of the identity user\"},\"returns\":{\"_0\":\"identityData address of the identity data contract\"}},\"isRegistryUser(address)\":{\"params\":{\"_registryUser\":\"address of the registry user\"},\"returns\":{\"_0\":\"bool\"}},\"isVerified(address)\":{\"params\":{\"_userAddress\":\"address of the identity user\"},\"returns\":{\"_0\":\"bool\"}},\"removeClaim(address,uint256)\":{\"details\":\"this function can only be called by a trusted issuer\",\"params\":{\"_claimTopic\":\"claim topic\",\"_identity\":\"address of the identity contract\"}},\"removeIdentity(address)\":{\"details\":\"this function can only be called by a trusted issuer\",\"params\":{\"_identity\":\"address of the identity contract\"}},\"unlinkWallet(bytes32)\":{\"details\":\"this function can only be called by a trusted issuer\",\"params\":{\"_onchainID\":\"onchain ID\"}},\"unlinkWalletAddress(address)\":{\"details\":\"this function can only be called by a trusted issuer\",\"params\":{\"_walletAddress\":\"address of the wallet\"}},\"walletAddressLinked(address)\":{\"params\":{\"_walletAddress\":\"address of the wallet\"}},\"walletLinked(bytes32)\":{\"returns\":{\"_0\":\"bool\"}}},\"title\":\"IdentityRegistryFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addClaim(address,uint256,bytes)\":{\"notice\":\"add claim to an identity\"},\"addIdentity(address,address)\":{\"notice\":\"add an identity to the registry\"},\"batchAddIdentity(address[],address[])\":{\"notice\":\"batch add identities to the registry\"},\"contains(address)\":{\"notice\":\"does an identity exist\"},\"getClaim(address,uint256)\":{\"notice\":\"get the claim of an identity\"},\"getClaims(address)\":{\"notice\":\"get the claims of an identity\"},\"getOnchainIDFromWallet(address)\":{\"notice\":\"get the onchain ID of an identity\"},\"getRegistryUsers()\":{\"notice\":\"get the users of the registry\"},\"hasClaim(address,uint256)\":{\"notice\":\"does an identity have a claim\"},\"identity(address)\":{\"notice\":\"get the identity data contract address of an identity\"},\"isRegistryUser(address)\":{\"notice\":\"is the user a registry user\"},\"isVerified(address)\":{\"notice\":\"is an identity verified\"},\"removeClaim(address,uint256)\":{\"notice\":\"remove claim from an identity\"},\"removeIdentity(address)\":{\"notice\":\"remove an identity from the registry\"},\"unlinkWallet(bytes32)\":{\"notice\":\"get the wallet addresses of an onchain ID\"},\"unlinkWalletAddress(address)\":{\"notice\":\"unlink a wallet address from an onchain ID\"},\"walletAddressLinked(address)\":{\"notice\":\"link a wallet address to an onchain ID\"},\"walletLinked(bytes32)\":{\"notice\":\"is the wallet linked to an onchain ID\"}},\"notice\":\"This contract manages the identity registry\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/IdentityRegistryFacet.sol\":\"IdentityRegistryFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/facets/IdentityRegistryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IIdentityRegistry.sol\\\";\\nimport \\\"../libraries/IdentityLib.sol\\\";\\nimport \\\"../libraries/TrustedIssuerLib.sol\\\";\\nimport \\\"../utilities/Modifiers.sol\\\";\\n\\nimport \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\nimport \\\"../interfaces/IClaimTopicsRegistry.sol\\\";\\n\\nimport { IIdentityRegistry, IIdentity } from \\\"../interfaces/IIdentityRegistry.sol\\\";\\n\\n/// @title IdentityRegistryFacet\\n/// @notice This contract manages the identity registry\\n/// @dev This contract is meant to be used via diamond proxy\\ncontract IdentityRegistryFacet is IIdentityRegistry, Modifiers {\\n\\tusing IdentityLib for IdentityContract;\\n    using TrustedIssuerLib for TrustedIssuerContract;\\n\\n\\tevent ContractAddressesSet();\\n\\n\\tmodifier isTrustedIssuer() {\\n\\t\\trequire(ITrustedIssuersRegistry(address(this)).isTrustedIssuer(msg.sender), \\\"Not trusted issuer\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() {}\\n\\n\\t/// @notice add an identity to the registry\\n\\t/// @param _identity address of the identity\\n\\t/// @param identityData address of the identity data contract\\n    function _addIdentity(address _identity, IIdentity identityData) internal {\\n        IdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n        Identity storage idObj = _contract._getIdentity(_identity);\\n        require(idObj.identityData == IIdentity(address(0)), \\\"Identity already exists\\\");\\n        idObj.identityData = identityData;\\n        _contract.identityOwners.push(_identity);\\n        emit IdentityAdded(_identity, identityData);\\n    }\\n\\n\\t/// @notice add an identity to the registry\\n\\t/// @param _identity address of the identity contract\\n\\t/// @param identityData address of the identity data contract\\n\\t/// @dev this function can only be called by a trusted issuer\\n\\tfunction addIdentity(address _identity, IIdentity identityData) external override isTrustedIssuer {\\n       _addIdentity(_identity, identityData);\\n    }\\n\\n\\t/// @notice remove an identity from the registry\\n\\t/// @param _identity address of the identity contract\\n\\t/// @dev this function can only be called by a trusted issuer\\n\\tfunction removeIdentity(address _identity) external override isTrustedIssuer {\\n        IdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n        Identity storage idObj = _contract._getIdentity(_identity);\\n        require(idObj.identityData != IIdentity(address(0)), \\\"Identity does not exist\\\");\\n        delete _contract.identities[_identity];\\n        emit IdentityRemoved(_identity, idObj.identityData);\\n    }\\n\\n\\t/// @notice get the identity data contract address of an identity\\n\\t/// @param _userAddress address of the identity user\\n\\t/// @return identityData address of the identity data contract\\n\\tfunction identity(address _userAddress) external view override returns (IIdentity) {\\n        IdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n        return _contract._getIdentity(_userAddress).identityData;\\n    }\\n\\n\\t/// @notice batch add identities to the registry\\n\\t/// @param _identities array of addresses of the identities\\n\\t/// @param identityDatas array of addresses of the identity data contracts\\n\\t/// @dev this function can only be called by a trusted issuer\\n\\tfunction batchAddIdentity(address[] calldata _identities, IIdentity[] calldata identityDatas) external override isTrustedIssuer {\\n        require(_identities.length == identityDatas.length, \\\"Arrays length mismatch\\\");\\n        for (uint256 i = 0; i < _identities.length; i++) {\\n            _addIdentity(_identities[i], identityDatas[i]);\\n        }\\n\\t}\\n\\n\\t/// @notice add claim to an identity\\n\\t/// @param _identity address of the identity contract\\n\\t/// @param _claimTopic claim topic\\n\\t/// @param _claim claim data\\n\\t/// @dev this function can only be called by a trusted issuer\\n\\tfunction addClaim(address _identity, uint256 _claimTopic, bytes calldata _claim) external override isTrustedIssuer {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\tIdentity storage idObj = _contract._getIdentity(_identity);\\n\\t\\trequire(!idObj.claimTopics[_claimTopic], \\\"Claim already exists\\\");\\n\\t\\tidObj.claims[_claimTopic] = _claim;\\n\\t\\tidObj.claimTopics[_claimTopic] = true;\\n\\t\\temit ClaimAdded(_identity, _claimTopic, _claim);\\n\\t}\\n\\n\\t/// @notice remove claim from an identity\\n\\t/// @param _identity address of the identity contract\\n\\t/// @param _claimTopic claim topic\\n\\t/// @dev this function can only be called by a trusted issuer\\n\\tfunction removeClaim(address _identity, uint256 _claimTopic) external override isTrustedIssuer {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\tIdentity storage idObj = _contract._getIdentity(_identity);\\n\\t\\trequire(idObj.claimTopics[_claimTopic], \\\"Claim does not exist\\\");\\n\\t\\tdelete idObj.claims[_claimTopic];\\n\\t\\tdelete idObj.claimTopics[_claimTopic];\\n\\t\\temit ClaimRemoved(_identity, _claimTopic);\\n\\t}\\n\\n\\t/// @notice does an identity exist\\n\\t/// @param _userAddress address of the identity user\\n\\t/// @return bool\\n\\tfunction contains(address _userAddress) external view override returns (bool) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\treturn _contract._getIdentity(_userAddress).identityData != IIdentity(address(0));\\n\\t}\\n\\n\\t/// @notice is an identity verified\\n\\t/// @param _userAddress address of the identity user\\n\\t/// @return bool\\n\\tfunction isVerified(address _userAddress) external view override returns (bool) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\treturn _contract._getIdentity(_userAddress).identityData.isVerified();\\n\\t}\\n\\n\\t/// @notice get the users of the registry\\n\\t/// @return array of addresses of the users\\n\\tfunction getRegistryUsers() external view override returns (address[] memory) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\treturn _contract.identityOwners;\\n\\t}\\n\\n\\t/// @notice is the user a registry user\\n\\t/// @param _registryUser address of the registry user\\n\\t/// @return bool\\n\\tfunction isRegistryUser(address _registryUser) external view override returns (bool) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\treturn _contract._getIdentity(_registryUser).identityData != IIdentity(address(0));\\n\\t}\\n\\n\\t/// @notice get the claims of an identity\\n\\t/// @param _registryUser address of the registry user\\n\\t/// @return array of claim topics\\n\\tfunction getClaims(address _registryUser) external view override returns (uint256[] memory) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\tIdentity storage idObj = _contract._getIdentity(_registryUser);\\n\\t\\tuint256[] memory claims = new uint256[](idObj.identityData.getClaimTopics().length);\\n\\t\\tfor (uint256 i = 0; i < idObj.identityData.getClaimTopics().length; i++) {\\n\\t\\t\\tclaims[i] = idObj.identityData.getClaimTopics()[i];\\n\\t\\t}\\n\\t\\treturn claims;\\n\\t}\\n\\n\\t/// @notice get the claim of an identity\\n\\t/// @param _registryUser address of the registry user\\n\\t/// @param _claimTopic claim topic\\n\\t/// @return claim data\\n\\tfunction getClaim(address _registryUser, uint256 _claimTopic) external view override returns (bytes memory) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\tIdentity storage idObj = _contract._getIdentity(_registryUser);\\n\\t\\treturn idObj.claims[_claimTopic];\\n\\t}\\n\\n\\t/// @notice does an identity have a claim\\n\\t/// @param _registryUser address of the registry user\\n\\t/// @param _claimTopic claim topic\\n\\t/// @return bool\\n\\tfunction hasClaim(address _registryUser, uint256 _claimTopic) external view override returns (bool) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\tIdentity storage idObj = _contract._getIdentity(_registryUser);\\n\\t\\treturn idObj.claimTopics[_claimTopic];\\n\\t}\\n\\n\\t/// @notice get the onchain ID of an identity\\n\\t/// @param _userAddress address of the registry user\\n\\t/// @return onchainID onchain ID\\n\\tfunction getOnchainIDFromWallet(address _userAddress) external view override returns (bytes32) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\treturn _contract.addressToOnchainID[_userAddress];\\n\\t}\\n\\n\\t/// @notice is the wallet linked to an onchain ID\\n\\t/// @return bool\\n\\tfunction walletLinked(bytes32) external view override returns (bool) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\treturn _contract.identityAddresses.length > 0;\\n\\t}\\n\\n\\t/// @notice get the wallet addresses of an onchain ID\\n\\t/// @param _onchainID onchain ID\\n\\t/// @dev this function can only be called by a trusted issuer\\n\\tfunction unlinkWallet(bytes32 _onchainID) external override isTrustedIssuer {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\trequire(_contract.identityAddresses.length > 0, \\\"No linked wallet\\\");\\n\\t\\taddress _walletAddress = _contract.identityAddresses[_contract.identityAddresses.length - 1];\\n\\t\\t_contract.addressToOnchainID[_walletAddress] = bytes32(0);\\n\\t\\t_contract.identityAddresses.pop();\\n\\t\\temit WalletUnlinked(_walletAddress, _onchainID);\\n\\t}\\n\\n\\t/// @notice unlink a wallet address from an onchain ID\\n\\t/// @param _walletAddress address of the wallet\\n\\t/// @dev this function can only be called by a trusted issuer\\n\\tfunction unlinkWalletAddress(address _walletAddress) external override isTrustedIssuer {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\trequire(_contract.identityAddresses.length > 0, \\\"No linked wallet\\\");\\n\\t\\tbytes32 _onchainID = _contract.addressToOnchainID[_walletAddress];\\n\\t\\t_contract.addressToOnchainID[_walletAddress] = bytes32(0);\\n\\t\\t_contract.identityAddresses.pop();\\n\\t\\temit WalletUnlinked(_walletAddress, _onchainID);\\n\\t}\\n\\n\\t/// @notice link a wallet address to an onchain ID\\n\\t/// @param _walletAddress address of the wallet\\n\\tfunction walletAddressLinked(address _walletAddress) external view override returns (bool) {\\n\\t\\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\\n\\t\\treturn _contract.addressToOnchainID[_walletAddress] != bytes32(0);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xe33ee734424029efa5c1b963b9d5edcf605511e9c384f866378e0b8a457ccce3\",\"license\":\"MIT\"},\"src/interfaces/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n    bool isRemoved;\\n}\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n    \\n}\",\"keccak256\":\"0xf94927c44289cafe7442ff3e69f6949f3f97ab784a27b0b5d79f3757da7f1dd8\",\"license\":\"MIT\"},\"src/interfaces/IClaimTopicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IClaimTopicsRegistry {\\n\\n    // events\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\n\\n    // functions\\n    // setters\\n    function addClaimTopic(uint256 _claimTopic) external;\\n    function removeClaimTopic(uint256 _claimTopic) external;\\n\\n    // getter\\n    function getClaimTopics() external view returns (uint256[] memory);\\n\\n}\",\"keccak256\":\"0xf1de8ce4a353e0fe1bf698d8063629b0a34202196a148845ccb57b446751e2b9\",\"license\":\"MIT\"},\"src/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x07ab94171f8bf7530b1925a870887671702c22cdebe78952c9dda46eaad01c54\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"src/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"src/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\",\"keccak256\":\"0xbc617d0eca78d9d332703860c8b1a0a86c84b3224eafd4a92da9eaffde7da8ef\",\"license\":\"MIT\"},\"src/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"src/interfaces/IIdentityRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport { IIdentity } from \\\"./IIdentity.sol\\\";\\n\\ninterface IIdentityRegistry {\\n    // events\\n    event IdentityAdded(address indexed _address, IIdentity identity);\\n    event IdentityRemoved(address indexed _address, IIdentity identity);\\n    event IdentityCountryUpdated(address indexed identity, uint16 indexed country);\\n    event ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim);\\n    event ClaimRemoved(address indexed identity, uint256 indexed claimTopic);\\n    event WalletLinked(address indexed walletAddress, bytes32 indexed onchainID);\\n    event WalletUnlinked(address indexed walletAddress, bytes32 indexed onchainID);\\n\\n    // functions\\n    function addIdentity(address _identity, IIdentity identityData) external;\\n    function batchAddIdentity(address[] calldata _identities, IIdentity[] calldata identityDatas) external;\\n    function removeIdentity(address _identity) external;\\n    function addClaim(address _identity, uint256 _claimTopic, bytes calldata _claim) external;\\n    function removeClaim(address _identity, uint256 _claimTopic) external;\\n\\n    // registry consultation\\n    function contains(address _userAddress) external view returns (bool);\\n    function isVerified(address _userAddress) external view returns (bool);\\n    function identity(address _userAddress) external view returns (IIdentity);\\n\\n    // getters\\n    function getRegistryUsers() external view returns (address[] memory);\\n    function isRegistryUser(address _registryUser) external view returns(bool);\\n    function getClaims(address _registryUser) external view returns(uint256[] memory);\\n    function getClaim(address _registryUser, uint256 _claimTopic) external view returns(bytes memory);\\n    function hasClaim(address _registryUser, uint256 _claimTopic) external view returns(bool);\\n\\n    function getOnchainIDFromWallet(address _userAddress) external view returns (bytes32);\\n    function walletLinked(bytes32 _onchainID) external view returns (bool);\\n    function unlinkWallet(bytes32 _onchainID) external;\\n    function unlinkWalletAddress(address _walletAddress) external;\\n    function walletAddressLinked(address _walletAddress) external view returns (bool);\\n}\",\"keccak256\":\"0x4dcbc820112d94923107db45c32bc6ec6b733954e838c20193f51db2c11a6493\",\"license\":\"MIT\"},\"src/interfaces/ITrustedIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"./IClaimIssuer.sol\\\";\\n\\nstruct TrustedIssuer {\\n    address claimIssuer;\\n    uint[] claimTopics;\\n}\\n\\ninterface ITrustedIssuersRegistry {\\n\\n    // events\\n    event TrustedIssuerAdded(address indexed trustedIssuer, uint[] claimTopics);\\n    event TrustedIssuerRemoved(address indexed trustedIssuer);\\n    event ClaimTopicsUpdated(address indexed trustedIssuer, uint[] claimTopics);\\n\\n    // functions\\n    // setters\\n    function addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n    function removeTrustedIssuer(address _trustedIssuer) external;\\n    function updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n\\n    // getters\\n    function getTrustedIssuers() external view returns (TrustedIssuer[] memory);\\n    function isTrustedIssuer(address _issuer) external view returns(bool);\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory);\\n    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\\n\\n}\",\"keccak256\":\"0xec92af21e4a22ca0a3f643399fb2da26b898aa7c0b70bc59819e49935dcc21ad\",\"license\":\"MIT\"},\"src/libraries/IdentityLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport {IIdentity} from \\\"../interfaces/IIdentity.sol\\\";\\nimport {IIdentityRegistry} from \\\"../interfaces/IIdentityRegistry.sol\\\";\\n\\nstruct Identity {\\n    IIdentity identityData;\\n    uint16 country;\\n    mapping(uint256 => bytes) claims;\\n    mapping(uint256 => bool) claimTopics;\\n}\\n\\nstruct IdentityContract {\\n    mapping(address => Identity) identities;\\n    address[] identityOwners;\\n    address[] identityAddresses;\\n    mapping(address => bytes32) addressToOnchainID;\\n}\\n\\nstruct IdentityStorage {\\n    IdentityContract identityContract;\\n}\\n\\nlibrary IdentityLib {\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nomyx.IdentityRegistryFacet.IdentityStorage\\\");\\n\\n    event IdentityAdded(address indexed _address, IIdentity identity);\\n    event IdentityRemoved(address indexed _address, IIdentity identity);\\n\\n    function identityStorage() internal pure returns (IdentityStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice get an Identity for an address\\n    function _getIdentity(\\n        IdentityContract storage,\\n        address _identityAddress\\n    ) internal view returns (Identity storage) {\\n        return identityStorage().identityContract.identities[_identityAddress];\\n    }\\n\\n    /// @notice set an Identity for a tokenid keyed by string\\n    function _setIdentity(\\n        IdentityContract storage self,\\n        address _identityAddress,\\n        Identity storage identity\\n    ) internal {\\n        self.identities[_identityAddress].identityData = identity.identityData;\\n        self.identities[_identityAddress].country = identity.country;\\n        self.identityAddresses.push(_identityAddress);\\n        emit IdentityAdded(_identityAddress, identity.identityData);\\n    }\\n\\n    /// @notice remove an Identity for an address\\n    function _removeIdentity(\\n        IdentityContract storage self,\\n        address _identityAddress\\n    ) internal {\\n        delete self.identities[_identityAddress];\\n        \\n        uint256 index;\\n        for (uint256 i = 0; i < self.identityAddresses.length; i++) {\\n            if (self.identityAddresses[i] == _identityAddress) {\\n                index = i;\\n                break;\\n            }\\n        }\\n        if (index != self.identityAddresses.length - 1) {\\n            self.identityAddresses[index] = self.identityAddresses[self.identityAddresses.length - 1];\\n        }\\n        self.identityAddresses.pop();\\n        emit IdentityRemoved(_identityAddress, self.identities[_identityAddress].identityData);\\n    }\\n\\n}\\n\",\"keccak256\":\"0xfc5f4d7111ddece4beda89f709760b179b17a12bc50b248aa0ac90848f991d2b\",\"license\":\"MIT\"},\"src/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        //require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x7d27d5d7b127f3e393382dcd010fa37b5182d32c8fe91ad950188963a8c3cea6\",\"license\":\"MIT\"},\"src/libraries/TrustedIssuerLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"../interfaces/IClaimIssuer.sol\\\";\\nimport { ITrustedIssuersRegistry, TrustedIssuer } from \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\n\\nstruct TrustedIssuerContract {\\n    mapping(address => TrustedIssuer) trustedIssuers;\\n    address[] trustedIssuerAddresses;\\n    address owner;\\n}\\n\\nstruct TrustedIssuerStorage {\\n    TrustedIssuerContract trustedIssuerContract;\\n}\\n\\n/// \\nlibrary TrustedIssuerLib {\\n\\n    event TrustedIssuerUpdated(address indexed issuerAddress, TrustedIssuer trustedIssuer);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nomyx.lenderlabs.TrustedIssuerStorage.storage\\\");\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == trustedIssuerStorage().trustedIssuerContract.owner, \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Get the storage struct for the TrustedIssuerRegistry\\n    /// @return ds TrustedIssuerStorage struct for the TrustedIssuerRegistry\\n    function trustedIssuerStorage() internal pure returns (TrustedIssuerStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice Get the trusted issuer struct given the trusted issuer address \\n    /// @param issuerAddress The address of the trusted issuer\\n    /// @return trustedIssuer The trusted issuer struct\\n    function _getTrustedIssuer(\\n        TrustedIssuerContract storage,\\n        address issuerAddress\\n    ) internal view returns (TrustedIssuer memory trustedIssuer) {\\n        return trustedIssuerStorage().trustedIssuerContract.trustedIssuers[issuerAddress];\\n    }\\n\\n    /// @notice Set the trusted issuer struct given the trusted issuer address\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @param issuerAddress The address of the trusted issuer\\n    /// @param trustedIssuer The trusted issuer struct\\n    function _setTrustedIssuer(\\n        TrustedIssuerContract storage self,\\n        address issuerAddress,\\n        TrustedIssuer memory trustedIssuer\\n    ) internal {\\n        if(self.trustedIssuers[issuerAddress].claimIssuer == address(0)) {\\n            self.trustedIssuerAddresses.push(issuerAddress);\\n        }\\n        self.trustedIssuers[issuerAddress] = trustedIssuer; \\n        emit TrustedIssuerUpdated(issuerAddress, trustedIssuer);\\n    }\\n\\n    /// @notice Add a trusted issuer\\n    /// @param _trustedIssuer The address of the trusted issuer\\n    /// @param _claimTopics The claim topics that the trusted issuer is allowed to issue\\n    function _addTrustedIssuer(\\n        TrustedIssuerContract storage,\\n        address _trustedIssuer, \\n        uint[] calldata _claimTopics) internal {\\n\\n        TrustedIssuer memory trustedIssuer = TrustedIssuer({\\n            claimIssuer: _trustedIssuer,\\n            claimTopics: _claimTopics\\n        });\\n\\n        _setTrustedIssuer(\\n            trustedIssuerStorage().trustedIssuerContract,\\n            address(_trustedIssuer),\\n            trustedIssuer\\n        );\\n    }\\n\\n    /// @notice Remove a trusted issuer\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @param _trustedIssuer The address of the trusted issuer\\n    function removeTrustedIssuer(TrustedIssuerContract storage self, address _trustedIssuer) internal {\\n        delete self.trustedIssuers[address(_trustedIssuer)];\\n    }\\n\\n    /// @notice Update the claim topics that a trusted issuer is allowed to issue\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @param _trustedIssuer The address of the trusted issuer\\n    /// @param _claimTopics The claim topics that the trusted issuer is allowed to issue\\n    function updateIssuerClaimTopics(TrustedIssuerContract storage self, address _trustedIssuer, uint[] calldata _claimTopics) internal {\\n        TrustedIssuer memory trustedIssuer = _getTrustedIssuer(\\n            self,\\n            address(_trustedIssuer)\\n        );\\n        trustedIssuer.claimTopics = _claimTopics;\\n        _setTrustedIssuer(\\n            self,\\n            address(_trustedIssuer),\\n            trustedIssuer\\n        );\\n    }\\n\\n    /// @notice Get the trusted issuers\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @return trustedIssuers The trusted issuers\\n    function getTrustedIssuers(TrustedIssuerContract storage self) internal view  returns (TrustedIssuer[] memory trustedIssuers) {\\n        trustedIssuers = new TrustedIssuer[](self.trustedIssuerAddresses.length);\\n        for (uint i = 0; i < self.trustedIssuerAddresses.length; i++) {\\n            trustedIssuers[i] = self.trustedIssuers[self.trustedIssuerAddresses[i]];\\n        }\\n    }\\n\\n    /// @notice is the issuer trusted\\n    /// @param _issuer The address of the issuer\\n    /// @return isTrusted True if the issuer is trusted\\n    function isTrustedIssuer(address _issuer) internal view returns(bool isTrusted) {\\n        isTrusted = trustedIssuerStorage().trustedIssuerContract.trustedIssuers[_issuer].claimIssuer != address(0);\\n    }\\n\\n    /// @notice Get the trusted issuer\\n    /// @param _trustedIssuer The trusted issuer\\n    /// @return trustedIssuer The trusted issuer\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory) {\\n        return trustedIssuerStorage().trustedIssuerContract.trustedIssuers[address(_trustedIssuer)].claimTopics;\\n    }\\n\\n    /// @notice Does this issuer have this claim topic\\n    /// @param _issuer The address of the issuer\\n    /// @param _claimTopic The claim topic\\n    /// @return hasTopic True if the issuer has this claim topic\\n    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool hasTopic) {\\n        uint[] memory claimTopics = trustedIssuerStorage().trustedIssuerContract.trustedIssuers[_issuer].claimTopics;\\n        for (uint i = 0; i < claimTopics.length; i++) {\\n            if (claimTopics[i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xe912ab1b5645032633b17aec168c3ff85604922977dc347c241b2468192382ef\",\"license\":\"MIT\"},\"src/utilities/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract Modifiers {\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender,\\n            \\\"not authorized to call function\\\");\\n        _;\\n    }\\n\\n    // function owner() public view returns (address) {\\n    //     return LibDiamond.contractOwner();\\n    // }\\n\\n}\",\"keccak256\":\"0x1ff9732a4c71208863e0e89890c768f96e670e132b5ca444e979b5a41a13fc41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611b01806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638e0c3f6b116100b2578063d0d46a0b11610081578063dea9cd1411610066578063dea9cd1414610377578063e99a95651461038c578063f0eb5e54146103c257600080fd5b8063d0d46a0b14610344578063dd9688c41461036457600080fd5b80638e0c3f6b146102af578063b54f5b30146102c2578063b9209e331461031e578063c1f2f1aa1461033157600080fd5b806327afccc9116101095780635dbe47e8116100ee5780635dbe47e81461024f57806380bfd8031461029c5780638df2bf191461024f57600080fd5b806327afccc91461019f578063585730eb146101f557600080fd5b80630f12b5681461013b5780630f79ab391461015057806316aedfdb1461017957806325ef73b11461018c575b600080fd5b61014e61014936600461152a565b610425565b005b61016361015e366004611558565b61062b565b6040516101709190611584565b60405180910390f35b61014e610187366004611558565b61070b565b61014e61019a3660046115d2565b6108af565b6101e76101ad36600461160b565b6001600160a01b031660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9e602052604090205490565b604051908152602001610170565b61023f61020336600461160b565b6001600160a01b031660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9e6020526040902054151590565b6040519015158152602001610170565b61023f61025d36600461160b565b6001600160a01b0390811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b602052604090205416151590565b61014e6102aa36600461160b565b61095d565b61014e6102bd366004611674565b610b2a565b61023f6102d0366004611558565b6001600160a01b039190911660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b6020908152604080832093835260029093019052205460ff1690565b61023f61032c36600461160b565b610c93565b61014e61033f36600461160b565b610d58565b61035761035236600461160b565b610f03565b60405161017091906116e0565b61014e610372366004611724565b611174565b61037f611335565b60405161017091906117ad565b61023f61039a36600461152a565b507f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9d54151590565b61040d6103d036600461160b565b6001600160a01b0390811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60205260409020541690565b6040516001600160a01b039091168152602001610170565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048491906117ee565b6104ca5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064015b60405180910390fd5b7f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9d547f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b9061055a5760405162461bcd60e51b815260206004820152601060248201527f4e6f206c696e6b65642077616c6c65740000000000000000000000000000000060448201526064016104c1565b6002810180546000919061057090600190611826565b8154811061058057610580611839565b60009182526020808320909101546001600160a01b031680835260038501909152604082209190915560028301805491925090806105c0576105c061184f565b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905590910190915560405184916001600160a01b038416917f7fec2fe82d90bf539ed003543e553a47cf2165de8f1a40a42e5564d81236143d9190a3505050565b6001600160a01b03821660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60208181526040808420858552600181019092529092208054606093919061068290611865565b80601f01602080910402602001604051908101604052809291908181526020018280546106ae90611865565b80156106fb5780601f106106d0576101008083540402835291602001916106fb565b820191906000526020600020905b8154815290600101906020018083116106de57829003601f168201915b5050505050925050505b92915050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a91906117ee565b6107ab5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b6001600160a01b03821660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60208181526040808420858552600281019092529092205490919060ff166108455760405162461bcd60e51b815260206004820152601460248201527f436c61696d20646f6573206e6f7420657869737400000000000000000000000060448201526064016104c1565b6000838152600182016020526040812061085e916114d4565b6000838152600282016020526040808220805460ff191690555184916001600160a01b038716917f45749df36c97b738c268f656e499e02000e4ac4ab4dedfdf1c4ef42df8921d269190a350505050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa1580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e91906117ee565b61094f5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b61095982826113ba565b5050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc91906117ee565b6109fd5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b7f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9d547f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b90610a8d5760405162461bcd60e51b815260206004820152601060248201527f4e6f206c696e6b65642077616c6c65740000000000000000000000000000000060448201526064016104c1565b6001600160a01b03821660009081526003820160205260408120805491905560028201805480610abf57610abf61184f565b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905590910190915560405182916001600160a01b038616917f7fec2fe82d90bf539ed003543e553a47cf2165de8f1a40a42e5564d81236143d9190a3505050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8991906117ee565b610bca5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b828114610c195760405162461bcd60e51b815260206004820152601660248201527f417272617973206c656e677468206d69736d617463680000000000000000000060448201526064016104c1565b60005b83811015610c8c57610c7a858583818110610c3957610c39611839565b9050602002016020810190610c4e919061160b565b848484818110610c6057610c60611839565b9050602002016020810190610c75919061160b565b6113ba565b80610c848161189f565b915050610c1c565b5050505050565b6001600160a01b03811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60208190526040822054604080517f80007e8300000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916380007e83916004808201926020929091908290030181865afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5191906117ee565b9392505050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db791906117ee565b610df85760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b6001600160a01b0381811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b6020819052604090912080549192909116610e865760405162461bcd60e51b815260206004820152601760248201527f4964656e7469747920646f6573206e6f7420657869737400000000000000000060448201526064016104c1565b6001600160a01b038381166000818152602085815260409182902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558454915191909316815290917f59d6590e225b81befe259af056324092801080acbb7feab310eb34678871f327910160405180910390a2505050565b6001600160a01b03811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b6020819052604082206060925060008160000160009054906101000a90046001600160a01b03166001600160a01b031663df09d6046040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fbf91908101906118cf565b5167ffffffffffffffff811115610fd857610fd86118b9565b604051908082528060200260200182016040528015611001578160200160208202803683370190505b50905060005b8254604080517fdf09d60400000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163df09d604916004808201926000929091908290030181865afa158015611069573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261109191908101906118cf565b5181101561116b578254604080517fdf09d60400000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163df09d604916004808201926000929091908290030181865afa1580156110fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261112391908101906118cf565b818151811061113457611134611839565b602002602001015182828151811061114e5761114e611839565b6020908102919091010152806111638161189f565b915050611007565b50949350505050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d391906117ee565b6112145760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b6001600160a01b03841660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60208181526040808420878552600281019092529092205490919060ff16156112af5760405162461bcd60e51b815260206004820152601460248201527f436c61696d20616c72656164792065786973747300000000000000000000000060448201526064016104c1565b600085815260018201602052604090206112ca8486836119dc565b50600085815260028201602052604090819020805460ff191660011790555185906001600160a01b038816907fa1a7a6cf1ccecabe772767402dc0c23b4b3b3759c0314016dd7a6119bd4b996c906113259088908890611a9c565b60405180910390a3505050505050565b606060007f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b600181018054604080516020808402820181019092528281529394508301828280156113af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611391575b505050505091505090565b6001600160a01b0382811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b6020819052604090912080549192909116156114495760405162461bcd60e51b815260206004820152601760248201527f4964656e7469747920616c72656164792065786973747300000000000000000060448201526064016104c1565b805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03858116918217845560018581018054918201815560009081526020908190209091018054909416918816918217909355604051918252917f5e6980326838d8460df43db1f77f5b990d9ce470a5306b9bf05c3131ea192dc1910160405180910390a250505050565b5080546114e090611865565b6000825580601f106114f0575050565b601f01602090049060005260206000209081019061150e9190611511565b50565b5b808211156115265760008155600101611512565b5090565b60006020828403121561153c57600080fd5b5035919050565b6001600160a01b038116811461150e57600080fd5b6000806040838503121561156b57600080fd5b823561157681611543565b946020939093013593505050565b600060208083528351808285015260005b818110156115b157858101830151858201604001528201611595565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156115e557600080fd5b82356115f081611543565b9150602083013561160081611543565b809150509250929050565b60006020828403121561161d57600080fd5b8135610d5181611543565b60008083601f84011261163a57600080fd5b50813567ffffffffffffffff81111561165257600080fd5b6020830191508360208260051b850101111561166d57600080fd5b9250929050565b6000806000806040858703121561168a57600080fd5b843567ffffffffffffffff808211156116a257600080fd5b6116ae88838901611628565b909650945060208701359150808211156116c757600080fd5b506116d487828801611628565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015611718578351835292840192918401916001016116fc565b50909695505050505050565b6000806000806060858703121561173a57600080fd5b843561174581611543565b935060208501359250604085013567ffffffffffffffff8082111561176957600080fd5b818701915087601f83011261177d57600080fd5b81358181111561178c57600080fd5b88602082850101111561179e57600080fd5b95989497505060200194505050565b6020808252825182820181905260009190848201906040850190845b818110156117185783516001600160a01b0316835292840192918401916001016117c9565b60006020828403121561180057600080fd5b81518015158114610d5157600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561070557610705611810565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600181811c9082168061187957607f821691505b60208210810361189957634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982036118b2576118b2611810565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156118e257600080fd5b825167ffffffffffffffff808211156118fa57600080fd5b818501915085601f83011261190e57600080fd5b815181811115611920576119206118b9565b8060051b604051601f19603f83011681018181108582111715611945576119456118b9565b60405291825284820192508381018501918883111561196357600080fd5b938501935b8285101561198157845184529385019392850192611968565b98975050505050505050565b601f8211156119d757600081815260208120601f850160051c810160208610156119b45750805b601f850160051c820191505b818110156119d3578281556001016119c0565b5050505b505050565b67ffffffffffffffff8311156119f4576119f46118b9565b611a0883611a028354611865565b8361198d565b6000601f841160018114611a3c5760008515611a245750838201355b600019600387901b1c1916600186901b178355610c8c565b600083815260209020601f19861690835b82811015611a6d5786850135825560209485019460019092019101611a4d565b5086821015611a8a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220f11360443887a133da0fad02ffbbe0476b92f1f8c9aedb201ef88514760ac6bf64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638e0c3f6b116100b2578063d0d46a0b11610081578063dea9cd1411610066578063dea9cd1414610377578063e99a95651461038c578063f0eb5e54146103c257600080fd5b8063d0d46a0b14610344578063dd9688c41461036457600080fd5b80638e0c3f6b146102af578063b54f5b30146102c2578063b9209e331461031e578063c1f2f1aa1461033157600080fd5b806327afccc9116101095780635dbe47e8116100ee5780635dbe47e81461024f57806380bfd8031461029c5780638df2bf191461024f57600080fd5b806327afccc91461019f578063585730eb146101f557600080fd5b80630f12b5681461013b5780630f79ab391461015057806316aedfdb1461017957806325ef73b11461018c575b600080fd5b61014e61014936600461152a565b610425565b005b61016361015e366004611558565b61062b565b6040516101709190611584565b60405180910390f35b61014e610187366004611558565b61070b565b61014e61019a3660046115d2565b6108af565b6101e76101ad36600461160b565b6001600160a01b031660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9e602052604090205490565b604051908152602001610170565b61023f61020336600461160b565b6001600160a01b031660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9e6020526040902054151590565b6040519015158152602001610170565b61023f61025d36600461160b565b6001600160a01b0390811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b602052604090205416151590565b61014e6102aa36600461160b565b61095d565b61014e6102bd366004611674565b610b2a565b61023f6102d0366004611558565b6001600160a01b039190911660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b6020908152604080832093835260029093019052205460ff1690565b61023f61032c36600461160b565b610c93565b61014e61033f36600461160b565b610d58565b61035761035236600461160b565b610f03565b60405161017091906116e0565b61014e610372366004611724565b611174565b61037f611335565b60405161017091906117ad565b61023f61039a36600461152a565b507f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9d54151590565b61040d6103d036600461160b565b6001600160a01b0390811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60205260409020541690565b6040516001600160a01b039091168152602001610170565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048491906117ee565b6104ca5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064015b60405180910390fd5b7f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9d547f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b9061055a5760405162461bcd60e51b815260206004820152601060248201527f4e6f206c696e6b65642077616c6c65740000000000000000000000000000000060448201526064016104c1565b6002810180546000919061057090600190611826565b8154811061058057610580611839565b60009182526020808320909101546001600160a01b031680835260038501909152604082209190915560028301805491925090806105c0576105c061184f565b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905590910190915560405184916001600160a01b038416917f7fec2fe82d90bf539ed003543e553a47cf2165de8f1a40a42e5564d81236143d9190a3505050565b6001600160a01b03821660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60208181526040808420858552600181019092529092208054606093919061068290611865565b80601f01602080910402602001604051908101604052809291908181526020018280546106ae90611865565b80156106fb5780601f106106d0576101008083540402835291602001916106fb565b820191906000526020600020905b8154815290600101906020018083116106de57829003601f168201915b5050505050925050505b92915050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a91906117ee565b6107ab5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b6001600160a01b03821660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60208181526040808420858552600281019092529092205490919060ff166108455760405162461bcd60e51b815260206004820152601460248201527f436c61696d20646f6573206e6f7420657869737400000000000000000000000060448201526064016104c1565b6000838152600182016020526040812061085e916114d4565b6000838152600282016020526040808220805460ff191690555184916001600160a01b038716917f45749df36c97b738c268f656e499e02000e4ac4ab4dedfdf1c4ef42df8921d269190a350505050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa1580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e91906117ee565b61094f5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b61095982826113ba565b5050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bc91906117ee565b6109fd5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b7f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9d547f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b90610a8d5760405162461bcd60e51b815260206004820152601060248201527f4e6f206c696e6b65642077616c6c65740000000000000000000000000000000060448201526064016104c1565b6001600160a01b03821660009081526003820160205260408120805491905560028201805480610abf57610abf61184f565b6000828152602081208201600019908101805473ffffffffffffffffffffffffffffffffffffffff1916905590910190915560405182916001600160a01b038616917f7fec2fe82d90bf539ed003543e553a47cf2165de8f1a40a42e5564d81236143d9190a3505050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8991906117ee565b610bca5760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b828114610c195760405162461bcd60e51b815260206004820152601660248201527f417272617973206c656e677468206d69736d617463680000000000000000000060448201526064016104c1565b60005b83811015610c8c57610c7a858583818110610c3957610c39611839565b9050602002016020810190610c4e919061160b565b848484818110610c6057610c60611839565b9050602002016020810190610c75919061160b565b6113ba565b80610c848161189f565b915050610c1c565b5050505050565b6001600160a01b03811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60208190526040822054604080517f80007e8300000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916380007e83916004808201926020929091908290030181865afa158015610d2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5191906117ee565b9392505050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db791906117ee565b610df85760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b6001600160a01b0381811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b6020819052604090912080549192909116610e865760405162461bcd60e51b815260206004820152601760248201527f4964656e7469747920646f6573206e6f7420657869737400000000000000000060448201526064016104c1565b6001600160a01b038381166000818152602085815260409182902080547fffffffffffffffffffff000000000000000000000000000000000000000000001690558454915191909316815290917f59d6590e225b81befe259af056324092801080acbb7feab310eb34678871f327910160405180910390a2505050565b6001600160a01b03811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b6020819052604082206060925060008160000160009054906101000a90046001600160a01b03166001600160a01b031663df09d6046040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f97573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fbf91908101906118cf565b5167ffffffffffffffff811115610fd857610fd86118b9565b604051908082528060200260200182016040528015611001578160200160208202803683370190505b50905060005b8254604080517fdf09d60400000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163df09d604916004808201926000929091908290030181865afa158015611069573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261109191908101906118cf565b5181101561116b578254604080517fdf09d60400000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163df09d604916004808201926000929091908290030181865afa1580156110fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261112391908101906118cf565b818151811061113457611134611839565b602002602001015182828151811061114e5761114e611839565b6020908102919091010152806111638161189f565b915050611007565b50949350505050565b604051633bcbb46960e21b8152336004820152309063ef2ed1a490602401602060405180830381865afa1580156111af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d391906117ee565b6112145760405162461bcd60e51b81526020600482015260126024820152712737ba103a393ab9ba32b21034b9b9bab2b960711b60448201526064016104c1565b6001600160a01b03841660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b60208181526040808420878552600281019092529092205490919060ff16156112af5760405162461bcd60e51b815260206004820152601460248201527f436c61696d20616c72656164792065786973747300000000000000000000000060448201526064016104c1565b600085815260018201602052604090206112ca8486836119dc565b50600085815260028201602052604090819020805460ff191660011790555185906001600160a01b038816907fa1a7a6cf1ccecabe772767402dc0c23b4b3b3759c0314016dd7a6119bd4b996c906113259088908890611a9c565b60405180910390a3505050505050565b606060007f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b600181018054604080516020808402820181019092528281529394508301828280156113af57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611391575b505050505091505090565b6001600160a01b0382811660009081527f1702513c229a0468767071aca9498549d8e4a6daa27de21337c15aad13357f9b6020819052604090912080549192909116156114495760405162461bcd60e51b815260206004820152601760248201527f4964656e7469747920616c72656164792065786973747300000000000000000060448201526064016104c1565b805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b03858116918217845560018581018054918201815560009081526020908190209091018054909416918816918217909355604051918252917f5e6980326838d8460df43db1f77f5b990d9ce470a5306b9bf05c3131ea192dc1910160405180910390a250505050565b5080546114e090611865565b6000825580601f106114f0575050565b601f01602090049060005260206000209081019061150e9190611511565b50565b5b808211156115265760008155600101611512565b5090565b60006020828403121561153c57600080fd5b5035919050565b6001600160a01b038116811461150e57600080fd5b6000806040838503121561156b57600080fd5b823561157681611543565b946020939093013593505050565b600060208083528351808285015260005b818110156115b157858101830151858201604001528201611595565b506000604082860101526040601f19601f8301168501019250505092915050565b600080604083850312156115e557600080fd5b82356115f081611543565b9150602083013561160081611543565b809150509250929050565b60006020828403121561161d57600080fd5b8135610d5181611543565b60008083601f84011261163a57600080fd5b50813567ffffffffffffffff81111561165257600080fd5b6020830191508360208260051b850101111561166d57600080fd5b9250929050565b6000806000806040858703121561168a57600080fd5b843567ffffffffffffffff808211156116a257600080fd5b6116ae88838901611628565b909650945060208701359150808211156116c757600080fd5b506116d487828801611628565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b81811015611718578351835292840192918401916001016116fc565b50909695505050505050565b6000806000806060858703121561173a57600080fd5b843561174581611543565b935060208501359250604085013567ffffffffffffffff8082111561176957600080fd5b818701915087601f83011261177d57600080fd5b81358181111561178c57600080fd5b88602082850101111561179e57600080fd5b95989497505060200194505050565b6020808252825182820181905260009190848201906040850190845b818110156117185783516001600160a01b0316835292840192918401916001016117c9565b60006020828403121561180057600080fd5b81518015158114610d5157600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561070557610705611810565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600181811c9082168061187957607f821691505b60208210810361189957634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982036118b2576118b2611810565b5060010190565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156118e257600080fd5b825167ffffffffffffffff808211156118fa57600080fd5b818501915085601f83011261190e57600080fd5b815181811115611920576119206118b9565b8060051b604051601f19603f83011681018181108582111715611945576119456118b9565b60405291825284820192508381018501918883111561196357600080fd5b938501935b8285101561198157845184529385019392850192611968565b98975050505050505050565b601f8211156119d757600081815260208120601f850160051c810160208610156119b45750805b601f850160051c820191505b818110156119d3578281556001016119c0565b5050505b505050565b67ffffffffffffffff8311156119f4576119f46118b9565b611a0883611a028354611865565b8361198d565b6000601f841160018114611a3c5760008515611a245750838201355b600019600387901b1c1916600186901b178355610c8c565b600083815260209020601f19861690835b82811015611a6d5786850135825560209485019460019092019101611a4d565b5086821015611a8a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220f11360443887a133da0fad02ffbbe0476b92f1f8c9aedb201ef88514760ac6bf64736f6c63430008110033",
  "libraries": {
    "AddressSet": "0x99D84A2aA566300d09323EE12ad120177B7654bA",
    "AttributeLib": "0x929098055005A237C806Df3e2dC0E9B07390D83D",
    "Base64": "0x672911b00d6E0d0f6959A1726B4960090a357a4f",
    "Bytes32Set": "0xdDe75BdD8C22C231325997274D523aa0588648cf",
    "ClaimStorageLib": "0xd7b49da1a4b6f5f847367934d205267069E79772",
    "ClaimTopicLib": "0x74F75CF7495D01F851E49c9e0b6cfA1E4e874940",
    "DiamondFactoryLib": "0xf718448Cc7F47f8A41Df4369B3DB85654c895dA8",
    "DiamondLib": "0xe6b068a7e6129Ca173Ea322B7Eaa97F1A4d6ebBC",
    "ERC721AEnumerationLib": "0x2F25585979FD3EAda22229F7Cf1c41D59D2AA6e8",
    "ERC721ALib": "0x2C0A3c204108b7432d6378Fa52070Afa63a40785",
    "IdentityLib": "0x53709DA9782E836FB703Dd3E5d34B83a17da2773",
    "LibDiamond": "0x71c73a51f4Ab21532035DDCfc11656AbBF0c3a42",
    "MetadataLib": "0x17276309aca9bb8272367aB843d0E869405Dd5B6",
    "StringsLib": "0x09a89Cfbdbe53e34fF1E919006a47d12a6aABd40",
    "Strings": "0xE0e88D1dFaf4Bf95dAFB567fE65862827849AAbE",
    "SVGTemplatesLib": "0x318B833110D5d0DEB641bF3bd723DDc830BbBBd8",
    "TrustedIssuerLib": "0x0f367e5aa7a7f9a004ae37BC3c2e66A09FF95DA8",
    "UInt256Set": "0x8d8632635555c6c20F54a1b0b4A79b7A69f04026"
  },
  "devdoc": {
    "details": "This contract is meant to be used via diamond proxy",
    "kind": "dev",
    "methods": {
      "addClaim(address,uint256,bytes)": {
        "details": "this function can only be called by a trusted issuer",
        "params": {
          "_claim": "claim data",
          "_claimTopic": "claim topic",
          "_identity": "address of the identity contract"
        }
      },
      "addIdentity(address,address)": {
        "details": "this function can only be called by a trusted issuer",
        "params": {
          "_identity": "address of the identity contract",
          "identityData": "address of the identity data contract"
        }
      },
      "batchAddIdentity(address[],address[])": {
        "details": "this function can only be called by a trusted issuer",
        "params": {
          "_identities": "array of addresses of the identities",
          "identityDatas": "array of addresses of the identity data contracts"
        }
      },
      "contains(address)": {
        "params": {
          "_userAddress": "address of the identity user"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "getClaim(address,uint256)": {
        "params": {
          "_claimTopic": "claim topic",
          "_registryUser": "address of the registry user"
        },
        "returns": {
          "_0": "claim data"
        }
      },
      "getClaims(address)": {
        "params": {
          "_registryUser": "address of the registry user"
        },
        "returns": {
          "_0": "array of claim topics"
        }
      },
      "getOnchainIDFromWallet(address)": {
        "params": {
          "_userAddress": "address of the registry user"
        },
        "returns": {
          "_0": "onchainID onchain ID"
        }
      },
      "getRegistryUsers()": {
        "returns": {
          "_0": "array of addresses of the users"
        }
      },
      "hasClaim(address,uint256)": {
        "params": {
          "_claimTopic": "claim topic",
          "_registryUser": "address of the registry user"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "identity(address)": {
        "params": {
          "_userAddress": "address of the identity user"
        },
        "returns": {
          "_0": "identityData address of the identity data contract"
        }
      },
      "isRegistryUser(address)": {
        "params": {
          "_registryUser": "address of the registry user"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "isVerified(address)": {
        "params": {
          "_userAddress": "address of the identity user"
        },
        "returns": {
          "_0": "bool"
        }
      },
      "removeClaim(address,uint256)": {
        "details": "this function can only be called by a trusted issuer",
        "params": {
          "_claimTopic": "claim topic",
          "_identity": "address of the identity contract"
        }
      },
      "removeIdentity(address)": {
        "details": "this function can only be called by a trusted issuer",
        "params": {
          "_identity": "address of the identity contract"
        }
      },
      "unlinkWallet(bytes32)": {
        "details": "this function can only be called by a trusted issuer",
        "params": {
          "_onchainID": "onchain ID"
        }
      },
      "unlinkWalletAddress(address)": {
        "details": "this function can only be called by a trusted issuer",
        "params": {
          "_walletAddress": "address of the wallet"
        }
      },
      "walletAddressLinked(address)": {
        "params": {
          "_walletAddress": "address of the wallet"
        }
      },
      "walletLinked(bytes32)": {
        "returns": {
          "_0": "bool"
        }
      }
    },
    "title": "IdentityRegistryFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addClaim(address,uint256,bytes)": {
        "notice": "add claim to an identity"
      },
      "addIdentity(address,address)": {
        "notice": "add an identity to the registry"
      },
      "batchAddIdentity(address[],address[])": {
        "notice": "batch add identities to the registry"
      },
      "contains(address)": {
        "notice": "does an identity exist"
      },
      "getClaim(address,uint256)": {
        "notice": "get the claim of an identity"
      },
      "getClaims(address)": {
        "notice": "get the claims of an identity"
      },
      "getOnchainIDFromWallet(address)": {
        "notice": "get the onchain ID of an identity"
      },
      "getRegistryUsers()": {
        "notice": "get the users of the registry"
      },
      "hasClaim(address,uint256)": {
        "notice": "does an identity have a claim"
      },
      "identity(address)": {
        "notice": "get the identity data contract address of an identity"
      },
      "isRegistryUser(address)": {
        "notice": "is the user a registry user"
      },
      "isVerified(address)": {
        "notice": "is an identity verified"
      },
      "removeClaim(address,uint256)": {
        "notice": "remove claim from an identity"
      },
      "removeIdentity(address)": {
        "notice": "remove an identity from the registry"
      },
      "unlinkWallet(bytes32)": {
        "notice": "get the wallet addresses of an onchain ID"
      },
      "unlinkWalletAddress(address)": {
        "notice": "unlink a wallet address from an onchain ID"
      },
      "walletAddressLinked(address)": {
        "notice": "link a wallet address to an onchain ID"
      },
      "walletLinked(bytes32)": {
        "notice": "is the wallet linked to an onchain ID"
      }
    },
    "notice": "This contract manages the identity registry",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}