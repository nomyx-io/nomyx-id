{
  "address": "0x72A85A19daeeCC35bDc5208b3bc338CD680dA729",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "IdentityCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "createIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2badb922acda06e33e646e177b6053a594794a16a60885764794df25c52dc437",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0x72A85A19daeeCC35bDc5208b3bc338CD680dA729",
    "transactionIndex": 19,
    "gasUsed": "1988725",
    "logsBloom": "0x
    "blockHash": "0x18b7190537b3550da50186041a2d101518ae9fad0cdd608f3fc711bec0e3932b",
    "transactionHash": "0x2badb922acda06e33e646e177b6053a594794a16a60885764794df25c52dc437",
    "logs": [],
    "blockNumber": 3867025,
    "cumulativeGasUsed": "5118543",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ad3a3caa9e39a1591746ff34bf95e462",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"IdentityCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"createIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IdentityFactory.sol\":\"IdentityFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"src/IdentityFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./identity/Identity.sol\\\";\\n\\ncontract IdentityFactory {\\n    address private _template;\\n\\n    event IdentityCreated(address indexed identity, address indexed owner);\\n\\n    constructor() {\\n        _template = address(new Identity());\\n    }\\n\\n    function createIdentity() public  {\\n        address addr = Clones.clone(_template);\\n        emit IdentityCreated(addr, msg.sender);\\n    }\\n}\",\"keccak256\":\"0x5678c540b6037b25c8e78d873aca17c82269fb0955313a4a0e901cae1621c81e\",\"license\":\"MIT\"},\"src/identity/Identity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IIdentity } from \\\"../interfaces/IIdentity.sol\\\";\\nimport { Controllable } from \\\"../utilities/Controllable.sol\\\";\\n\\n/// @title Identity\\n/// @notice This contract represents an identity of a user\\n/// @dev This contract is used to store the claims of a user\\ncontract Identity is IIdentity, Controllable {\\n\\t\\n\\tmapping(bytes32 => Key) keys;\\n\\tmapping(uint256 => bytes32[]) keysByPurpose;\\n\\n\\tconstructor() Controllable() {\\n\\t\\t_addController(msg.sender);\\n\\t}\\n\\n\\tstruct Key {\\n\\t\\tuint256[] purposes;\\n\\t\\tuint256 keyType;\\n\\t\\tbytes32 key;\\n\\t}\\n\\n\\tfunction addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external override onlyController {\\n\\t\\trequire(keys[_key].key != _key, \\\"Key already exists\\\");\\n\\n\\t\\tkeys[_key].key = _key;\\n\\t\\tkeys[_key].purposes.push(_purpose);\\n\\t\\tkeys[_key].keyType = _keyType;\\n\\n\\t\\tkeysByPurpose[_purpose].push(_key);\\n\\n\\t\\temit KeyAdded(_key, _purpose, _keyType);\\n\\t}\\n\\n\\tfunction removeKey(bytes32 _key, uint256 _purpose) external override onlyController {\\n\\t\\trequire(keys[_key].key == _key, \\\"No such key\\\");\\n\\t\\tfor (uint i = 0; i < keys[_key].purposes.length; i++) {\\n\\t\\t\\tif (keys[_key].purposes[i] == _purpose) {\\n\\t\\t\\t\\tdelete keys[_key].purposes[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\temit KeyRemoved(_key, _purpose, keys[_key].keyType);\\n\\n\\t\\tdelete keys[_key];\\n\\t}\\n\\n\\tfunction getKey(\\n\\t\\tbytes32 _key\\n\\t) external view override returns (uint256[] memory purposes, uint256 keyType, bytes32 key) {\\n\\t\\treturn (keys[_key].purposes, keys[_key].keyType, keys[_key].key);\\n\\t}\\n\\n\\tfunction getKeyPurposes(bytes32 _key) external view override returns (uint256[] memory _purposes) {\\n\\t\\treturn (keys[_key].purposes);\\n\\t}\\n\\n\\tfunction getKeysByPurpose(uint256 _purpose) external view override returns (bytes32[] memory _keys) {\\n\\t\\treturn (keysByPurpose[_purpose]);\\n\\t}\\n\\n\\tfunction _keyHasPurpose(bytes32 _key, uint256 _purpose) internal view returns (bool exists) {\\n\\t\\tif (keys[_key].key == 0) return false;\\n\\t\\tfor (uint i = 0; i < keys[_key].purposes.length; i++) {\\n\\t\\t\\tif (keys[_key].purposes[i] == _purpose) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists) {\\n\\t\\treturn _keyHasPurpose(_key, _purpose);\\n\\t}\\n\\n\\tfunction execute(address _to, uint256 _value, bytes calldata _data) external payable onlyController returns (uint256 executionId) {\\n\\t\\trequire(_keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), 1), \\\"Sender does not have rights\\\");\\n\\t\\t(bool success, ) = _to.call{value: _value}(_data);\\n\\t\\tif (success) {\\n\\t\\t\\temit Executed(executionId, _to, _value, _data);\\n\\t\\t} else {\\n\\t\\t\\temit ExecutionFailed(executionId, _to, _value, _data);\\n\\t\\t}\\n\\t\\treturn executionId;\\n\\t}\\n\\n\\tfunction approve(uint256 _id, bool _approve) external override onlyController {\\n\\t\\trequire(_keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), 2), \\\"Sender does not have rights\\\");\\n\\t\\tif (_approve) {\\n\\t\\t\\temit Approved(_id, true);\\n\\t\\t} else {\\n\\t\\t\\temit Approved(_id, false);\\n\\t\\t}\\n\\t}\\n\\n\\tstruct Claim {\\n\\t\\tuint256 topic;\\n\\t\\tuint256 scheme;\\n\\t\\taddress issuer;\\n\\t\\tbytes signature;\\n\\t\\tbytes data;\\n\\t\\tstring uri;\\n\\t}\\n\\n\\tmapping(bytes32 => Claim) internal claims;\\n\\tbytes32[] internal claimIds;\\n\\n\\tmapping(uint256 => bytes32[]) internal claimsByTopic;\\n\\tbytes32[] internal claimTopics;\\n\\n\\tfunction getClaim(bytes32 _claimId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256 topic,\\n\\t\\t\\tuint256 scheme,\\n\\t\\t\\taddress issuer,\\n\\t\\t\\tbytes memory signature,\\n\\t\\t\\tbytes memory data,\\n\\t\\t\\tstring memory uri\\n\\t\\t) {\\n\\t\\tClaim storage claim = claims[_claimId];\\n\\t\\treturn (claim.topic, claim.scheme, claim.issuer, claim.signature, claim.data, claim.uri);\\n\\t}\\n\\n\\tfunction getClaimIdsByTopic(uint256 _topic) external view override returns (bytes32[] memory claimIds_) {\\n\\t\\tclaimIds_ = claimsByTopic[_topic];\\n\\t}\\n\\n\\tfunction addClaim(\\n\\t\\tuint256 _topic,\\n\\t\\tuint256 _scheme,\\n\\t\\taddress _issuer,\\n\\t\\tbytes memory _signature,\\n\\t\\tbytes memory _data,\\n\\t\\tstring memory _uri\\n\\t) external override onlyController returns (uint256 claimRequestId) {\\n\\t\\tbytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\\n\\n\\t\\tClaim storage claim = claims[claimId];\\n\\t\\tclaim.topic = _topic;\\n\\t\\tclaim.scheme = _scheme;\\n\\t\\tclaim.issuer = _issuer;\\n\\t\\tclaim.signature = _signature;\\n\\t\\tclaim.data = _data;\\n\\t\\tclaim.uri = _uri;\\n\\n\\t\\tclaimsByTopic[_topic].push(claimId);\\n\\t\\tclaimTopics.push(claimId);\\n\\n\\t\\tclaims[claimId] = claim;\\n\\t\\tclaimIds.push(claimId);\\n\\n\\t\\temit ClaimAdded(claimId, _topic, _scheme, _issuer, _signature, _data, _uri);\\n\\n\\t\\treturn _topic;\\n\\t}\\n\\n\\tfunction changeClaim(\\n\\t\\tbytes32,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\tbytes memory,\\n\\t\\tbytes memory,\\n\\t\\tstring memory\\n\\t) external pure override returns (bool) {\\n\\t\\trequire(false, \\\"Not implemented\\\");\\n\\t}\\n\\n\\tfunction removeClaim(bytes32 _claimId) external override onlyController returns (bool success) {\\n\\t\\tClaim storage claim = claims[_claimId];\\n\\t\\trequire(claim.issuer != address(0), \\\"Claim does not exist\\\");\\n\\t\\tdelete claims[_claimId];\\n\\t\\temit ClaimRemoved(_claimId, claim.topic, claim.scheme, claim.issuer, claim.signature, claim.data, claim.uri);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n\\t\\treturn interfaceId == type(IIdentity).interfaceId;\\n\\t}\\n\\n\\tfunction getExecution(\\n\\t\\tuint256\\n\\t)\\n\\t\\texternal\\n\\t\\tpure\\n\\t\\toverride\\n\\t\\treturns (address, uint256, bytes memory, bool, uint256)\\n\\t{\\n\\t\\trequire(false, \\\"Not implemented\\\");\\n\\t}\\n\\n\\t function getClaimTopics() external view override returns (uint256[] memory) {\\n\\t\\t uint256[] memory _claimTopics = new uint256[](claimTopics.length);\\n\\t\\t for (uint256 i = 0; i < claimTopics.length; i++) {\\n\\t\\t\\t _claimTopics[i] = claims[claimTopics[i]].topic;\\n\\t\\t }\\n\\t\\t return _claimTopics;\\n\\t }\\n\\n\\t function isVerified() external view returns (bool) {}\\n}\",\"keccak256\":\"0x075ef4fcc0eba9328feb93055776ebdd06fa1f1c2cf9cb1187ff7ab37f7969d4\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\\r\\ninterface IControllable {\\r\\n\\r\\n    /// @notice emitted when a controller is added.\\r\\n    event ControllerAdded(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice emitted when a controller is removed.\\r\\n    event ControllerRemoved(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice adds a controller.\\r\\n    /// @param controller the controller to add.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    /// @notice removes a controller.\\r\\n    /// @param controller the address to check\\r\\n    /// @return true if the address is a controller\\r\\n    function isController(address controller) external view returns (bool);\\r\\n\\r\\n    /// @notice remove ourselves from the list of controllers.\\r\\n    function relinquishControl() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x15f5c4f8732a9caffb811a8ebf9aeba41a108e58634607c0700a46a891edf2ec\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"src/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"src/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\\n\\n/*\\nHow IdentityRegistry works:\\n\\n1. User creates an Identity contract\\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\\n\\n*/\",\"keccak256\":\"0x73ba3756b679ad9c5577e896f38e4bd987d3f5881c795c37b55d6e0e6e091fd9\",\"license\":\"MIT\"},\"src/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"src/utilities/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IControllable.sol\\\";\\r\\n\\r\\nabstract contract Controllable is IControllable {\\r\\n    mapping(address => bool) internal _controllers;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account not in authorized list\\r\\n     */\\r\\n    modifier onlyController() virtual {\\r\\n        require(\\r\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\r\\n            \\\"caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add an address allowed to control this contract\\r\\n     */\\r\\n    function addController(address _controller)\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n    {\\r\\n        _addController(_controller);\\r\\n    }\\r\\n    function _addController(address _controller) internal {\\r\\n        _controllers[_controller] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if this address is a controller\\r\\n     */\\r\\n    function isController(address _address)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _isController(_address);\\r\\n    }\\r\\n    function _isController(address _address)\\r\\n        internal view\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _controllers[_address];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove the sender address from the list of controllers\\r\\n     */\\r\\n    function relinquishControl() external override onlyController {\\r\\n        _relinquishControl();\\r\\n    }\\r\\n    function _relinquishControl() internal onlyController{\\r\\n        delete _controllers[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8ecd3dbef92020332fa9e63f82871d6832e55ed630818f223784c73d6fe23fd2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161001d9061005f565b604051809103906000f080158015610039573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905561006c565b6120398061022383390190565b6101a88061007b6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806359d21ad914610030575b600080fd5b61003861003a565b005b6000805461005d9073ffffffffffffffffffffffffffffffffffffffff166100a6565b604051909150339073ffffffffffffffffffffffffffffffffffffffff8316907f45afe31e3a48a54e27da1d1f2ec6c6e272ce5838616e0d61071b223bceb5c69090600090a350565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff811661016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b91905056fea2646970667358221220d61b0582de7692289f457f8abcb4e7193fcc3dedaa496cec98cef920176022be64736f6c63430008110033608060405234801561001057600080fd5b50610039336001600160a01b03166000908152602081905260409020805460ff19166001179055565b611ff1806100486000396000f3fe60806040526004361061015f5760003560e01c8063b1a34e0d116100c0578063db6a20a511610074578063e1c28bef11610059578063e1c28bef14610402578063e326fbd414610417578063fb307b341461044857600080fd5b8063db6a20a5146103c0578063df09d604146103e057600080fd5b8063b61d27f6116100a5578063b61d27f61461035b578063c9100bcb1461036e578063d202158d146103a057600080fd5b8063b1a34e0d1461030d578063b429afeb1461033b57600080fd5b8063747442d31161011757806380e9e9e1116100fc57806380e9e9e1146102a05780639010f726146102cd578063a7fc7a07146102ed57600080fd5b8063747442d31461026c57806380007e831461028c57600080fd5b80631d381240116101485780631d3812401461020a5780634eee424a1461022c57806353d413c51461024c57600080fd5b806301ffc9a71461016457806312aaac70146101db575b600080fd5b34801561017057600080fd5b506101c661017f3660046116e5565b7fffffffff00000000000000000000000000000000000000000000000000000000167f5f09a887000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b3480156101e757600080fd5b506101fb6101f6366004611727565b610468565b6040516101d29392919061177b565b34801561021657600080fd5b5061022a6102253660046117a0565b6104e1565b005b34801561023857600080fd5b506101c6610247366004611727565b61062e565b34801561025857600080fd5b5061022a6102673660046117cc565b6107d4565b34801561027857600080fd5b5061022a6102873660046117ee565b61099a565b34801561029857600080fd5b5060006101c6565b3480156102ac57600080fd5b506102c06102bb366004611727565b610b07565b6040516101d29190611823565b3480156102d957600080fd5b506102c06102e8366004611727565b610b69565b3480156102f957600080fd5b5061022a61030836600461187e565b610bc9565b34801561031957600080fd5b5061032d61032836600461193c565b610c62565b6040519081526020016101d2565b34801561034757600080fd5b506101c661035636600461187e565b610eee565b61032d6103693660046119e7565b610f11565b34801561037a57600080fd5b5061038e610389366004611727565b61110c565b6040516101d296959493929190611ab4565b3480156103ac57600080fd5b506101c66103bb3660046117cc565b611315565b3480156103cc57600080fd5b506101c66103db366004611b15565b611328565b3480156103ec57600080fd5b506103f5611373565b6040516101d29190611bcb565b34801561040e57600080fd5b5061022a611436565b34801561042357600080fd5b50610437610432366004611727565b6114ae565b6040516101d2959493929190611bde565b34801561045457600080fd5b506103f5610463366004611727565b6114ff565b6000818152600160208181526040808420928301546002840154845483518186028101860190945280845260609695869590949185918301828280156104cd57602002820191906000526020600020905b8154815260200190600101908083116104b9575b505050505092509250925092509193909250565b3360009081526020819052604090205460ff1615156001148061050357503033145b6105545760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064015b60405180910390fd5b6000838152600160205260409020600201548390036105b55760405162461bcd60e51b815260206004820152601260248201527f4b657920616c7265616479206578697374730000000000000000000000000000604482015260640161054b565b6000838152600160208181526040808420600280820189905581548086018355828752848720018890559084018690558685528252808420805493840181558452908320909101859055518291849186917f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e991a4505050565b3360009081526020819052604081205460ff1615156001148061065057503033145b61069c5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015260640161054b565b600082815260036020526040902060028101546001600160a01b03166107045760405162461bcd60e51b815260206004820152601460248201527f436c61696d20646f6573206e6f74206578697374000000000000000000000000604482015260640161054b565b600083815260036020819052604082208281556001810183905560028101805473ffffffffffffffffffffffffffffffffffffffff19169055919061074b90830182611678565b610759600483016000611678565b610767600583016000611678565b50506002810154815460018301546040516001600160a01b039093169286917f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a916107c191906003880190600489019060058a0190611ccb565b60405180910390a460019150505b919050565b3360009081526020819052604090205460ff161515600114806107f657503033145b6108425760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015260640161054b565b60008281526001602052604090206002015482146108a25760405162461bcd60e51b815260206004820152600b60248201527f4e6f2073756368206b6579000000000000000000000000000000000000000000604482015260640161054b565b60005b60008381526001602052604090205481101561092c5760008381526001602052604090208054839190839081106108de576108de611d15565b90600052602060002001540361091a57600083815260016020526040902080548290811061090e5761090e611d15565b60009182526020822001555b8061092481611d2b565b9150506108a5565b5060008281526001602081905260408083209091015490519091839185917f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339791a460008281526001602052604081209061098682826116b2565b506000600182018190556002909101555050565b3360009081526020819052604090205460ff161515600114806109bc57503033145b610a085760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015260640161054b565b6040516bffffffffffffffffffffffff193360601b166020820152610a479060340160405160208183030381529060405280519060200120600261155f565b610a935760405162461bcd60e51b815260206004820152601b60248201527f53656e64657220646f6573206e6f742068617665207269676874730000000000604482015260640161054b565b8015610ad4576040516001815282907fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d8906020015b60405180910390a25050565b6040516000815282907fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d890602001610ac8565b600081815260056020908152604091829020805483518184028101840190945280845260609392830182828015610b5d57602002820191906000526020600020905b815481526020019060010190808311610b49575b50505050509050919050565b600081815260026020908152604091829020805483518184028101840190945280845260609392830182828015610b5d5760200282019190600052602060002090815481526020019060010190808311610b495750505050509050919050565b3360009081526020819052604090205460ff16151560011480610beb57503033145b610c375760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015260640161054b565b610c5f816001600160a01b03166000908152602081905260409020805460ff19166001179055565b50565b3360009081526020819052604081205460ff16151560011480610c8457503033145b610cd05760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015260640161054b565b6040516bffffffffffffffffffffffff19606087901b1660208201526034810188905260009060540160408051808303601f1901815291815281516020928301206000818152600393849052919091208a8155600181018a905560028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b16179055909250908101610d648782611da2565b5060048101610d738682611da2565b5060058101610d828582611da2565b50600089815260056020908152604080832080546001818101835591855283852001869055600680548083019091557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f018690558584526003928390529220835481558383015492810192909255600280840154908301805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117905582919081810190610e3690840182611e62565b50600481810190610e4990840182611e62565b50600581810190610e5c90840182611e62565b5050600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01839055506040516001600160a01b038816908a9084907f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c590610ed9908d908c908c908c90611f3d565b60405180910390a45096979650505050505050565b6001600160a01b03811660009081526020819052604081205460ff165b92915050565b3360009081526020819052604081205460ff16151560011480610f3357503033145b610f7f5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015260640161054b565b6040516bffffffffffffffffffffffff193360601b166020820152610fbe9060340160405160208183030381529060405280519060200120600161155f565b61100a5760405162461bcd60e51b815260206004820152601b60248201527f53656e64657220646f6573206e6f742068617665207269676874730000000000604482015260640161054b565b6000856001600160a01b0316858585604051611027929190611f7c565b60006040518083038185875af1925050503d8060008114611064576040519150601f19603f3d011682016040523d82523d6000602084013e611069565b606091505b5050905080156110bd5784866001600160a01b0316837f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b887876040516110b0929190611f8c565b60405180910390a4611103565b84866001600160a01b0316837fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a6887876040516110fa929190611f8c565b60405180910390a45b50949350505050565b600080600060608060606000600360008981526020019081526020016000209050806000015481600101548260020160009054906101000a90046001600160a01b031683600301846004018560050182805461116790611c1a565b80601f016020809104026020016040519081016040528092919081815260200182805461119390611c1a565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b505050505092508180546111f390611c1a565b80601f016020809104026020016040519081016040528092919081815260200182805461121f90611c1a565b801561126c5780601f106112415761010080835404028352916020019161126c565b820191906000526020600020905b81548152906001019060200180831161124f57829003601f168201915b5050505050915080805461127f90611c1a565b80601f01602080910402602001604051908101604052809291908181526020018280546112ab90611c1a565b80156112f85780601f106112cd576101008083540402835291602001916112f8565b820191906000526020600020905b8154815290600101906020018083116112db57829003601f168201915b505050505090509650965096509650965096505091939550919395565b6000611321838361155f565b9392505050565b60405162461bcd60e51b815260206004820152600f60248201527f4e6f7420696d706c656d656e7465640000000000000000000000000000000000604482015260009060640161054b565b60065460609060009067ffffffffffffffff81111561139457611394611899565b6040519080825280602002602001820160405280156113bd578160200160208202803683370190505b50905060005b6006548110156114305760036000600683815481106113e4576113e4611d15565b906000526020600020015481526020019081526020016000206000015482828151811061141357611413611d15565b60209081029190910101528061142881611d2b565b9150506113c3565b50919050565b3360009081526020819052604090205460ff1615156001148061145857503033145b6114a45760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015260640161054b565b6114ac6115f1565b565b6000806060818060405162461bcd60e51b815260040161054b906020808252600f908201527f4e6f7420696d706c656d656e7465640000000000000000000000000000000000604082015260600190565b600081815260016020908152604091829020805483518184028101840190945280845260609392830182828015610b5d5760200282019190600052602060002090815481526020019060010190808311610b495750505050509050919050565b600082815260016020526040812060020154810361157f57506000610f0b565b60005b6000848152600160205260409020548110156115e75760008481526001602052604090208054849190839081106115bb576115bb611d15565b9060005260206000200154036115d5576001915050610f0b565b806115df81611d2b565b915050611582565b5060009392505050565b3360009081526020819052604090205460ff1615156001148061161357503033145b61165f5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c6572000000000000604482015260640161054b565b336000908152602081905260409020805460ff19169055565b50805461168490611c1a565b6000825580601f10611694575050565b601f016020900490600052602060002090810190610c5f91906116cc565b5080546000825590600052602060002090810190610c5f91905b5b808211156116e157600081556001016116cd565b5090565b6000602082840312156116f757600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461132157600080fd5b60006020828403121561173957600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561177057815187529582019590820190600101611754565b509495945050505050565b60608152600061178e6060830186611740565b60208301949094525060400152919050565b6000806000606084860312156117b557600080fd5b505081359360208301359350604090920135919050565b600080604083850312156117df57600080fd5b50508035926020909101359150565b6000806040838503121561180157600080fd5b823591506020830135801515811461181857600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561185b5783518352928401929184019160010161183f565b50909695505050505050565b80356001600160a01b03811681146107cf57600080fd5b60006020828403121561189057600080fd5b61132182611867565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126118c057600080fd5b813567ffffffffffffffff808211156118db576118db611899565b604051601f8301601f19908116603f0116810190828211818310171561190357611903611899565b8160405283815286602085880101111561191c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c0878903121561195557600080fd5b863595506020870135945061196c60408801611867565b9350606087013567ffffffffffffffff8082111561198957600080fd5b6119958a838b016118af565b945060808901359150808211156119ab57600080fd5b6119b78a838b016118af565b935060a08901359150808211156119cd57600080fd5b506119da89828a016118af565b9150509295509295509295565b600080600080606085870312156119fd57600080fd5b611a0685611867565b935060208501359250604085013567ffffffffffffffff80821115611a2a57600080fd5b818701915087601f830112611a3e57600080fd5b813581811115611a4d57600080fd5b886020828501011115611a5f57600080fd5b95989497505060200194505050565b6000815180845260005b81811015611a9457602081850181015186830182015201611a78565b506000602082860101526020601f19601f83011685010191505092915050565b8681528560208201526001600160a01b038516604082015260c060608201526000611ae260c0830186611a6e565b8281036080840152611af48186611a6e565b905082810360a0840152611b088185611a6e565b9998505050505050505050565b600080600080600080600060e0888a031215611b3057600080fd5b873596506020880135955060408801359450611b4e60608901611867565b9350608088013567ffffffffffffffff80821115611b6b57600080fd5b611b778b838c016118af565b945060a08a0135915080821115611b8d57600080fd5b611b998b838c016118af565b935060c08a0135915080821115611baf57600080fd5b50611bbc8a828b016118af565b91505092959891949750929550565b6020815260006113216020830184611740565b6001600160a01b038616815284602082015260a060408201526000611c0660a0830186611a6e565b931515606083015250608001529392505050565b600181811c90821680611c2e57607f821691505b60208210810361143057634e487b7160e01b600052602260045260246000fd5b60008154611c5b81611c1a565b808552602060018381168015611c785760018114611c9257611cc0565b60ff198516838901528284151560051b8901019550611cc0565b866000528260002060005b85811015611cb85781548a8201860152908301908401611c9d565b890184019650505b505050505092915050565b848152608060208201526000611ce46080830186611c4e565b8281036040840152611cf68186611c4e565b90508281036060840152611d0a8185611c4e565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198203611d4c57634e487b7160e01b600052601160045260246000fd5b5060010190565b601f821115611d9d57600081815260208120601f850160051c81016020861015611d7a5750805b601f850160051c820191505b81811015611d9957828155600101611d86565b5050505b505050565b815167ffffffffffffffff811115611dbc57611dbc611899565b611dd081611dca8454611c1a565b84611d53565b602080601f831160018114611e055760008415611ded5750858301515b600019600386901b1c1916600185901b178555611d99565b600085815260208120601f198616915b82811015611e3457888601518255948401946001909101908401611e15565b5085821015611e525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b818103611e6d575050565b611e778254611c1a565b67ffffffffffffffff811115611e8f57611e8f611899565b611e9d81611dca8454611c1a565b6000601f821160018114611ed15760008315611eb95750848201545b600019600385901b1c1916600184901b178455611f36565b600085815260209020601f19841690600086815260209020845b83811015611f0b5782860154825560019586019590910190602001611eeb565b5085831015611f295781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b848152608060208201526000611f566080830186611a6e565b8281036040840152611f688186611a6e565b90508281036060840152611d0a8185611a6e565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220a9d20f3fa9b210dd07e7216286debbae5cb141b15366e1f04ec8fc455c12a6d564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806359d21ad914610030575b600080fd5b61003861003a565b005b6000805461005d9073ffffffffffffffffffffffffffffffffffffffff166100a6565b604051909150339073ffffffffffffffffffffffffffffffffffffffff8316907f45afe31e3a48a54e27da1d1f2ec6c6e272ce5838616e0d61071b223bceb5c69090600090a350565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f0905073ffffffffffffffffffffffffffffffffffffffff811661016d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f455243313136373a20637265617465206661696c656400000000000000000000604482015260640160405180910390fd5b91905056fea2646970667358221220d61b0582de7692289f457f8abcb4e7193fcc3dedaa496cec98cef920176022be64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 85,
        "contract": "src/IdentityFactory.sol:IdentityFactory",
        "label": "_template",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}