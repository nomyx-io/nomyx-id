{
  "address": "0x279B2Af39222385e6391318B1E07832800ABC5a3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "template",
          "type": "address"
        }
      ],
      "name": "SVGTemplateCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "createSVG",
      "outputs": [
        {
          "internalType": "address",
          "name": "_tplAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "svgAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "_svgAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "svgString",
      "outputs": [
        {
          "internalType": "string",
          "name": "data_",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "svgs",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x26cf56be3d61e96c2635668becdb77571cabd8e15c763d03e72d4c71f5929ce6",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0x279B2Af39222385e6391318B1E07832800ABC5a3",
    "transactionIndex": 35,
    "gasUsed": "2019305",
    "logsBloom": "0x
    "blockHash": "0x95a3830c497d53a8e87fdacc832f06914c8003ebe3c298e52d63abaeed907db9",
    "transactionHash": "0x26cf56be3d61e96c2635668becdb77571cabd8e15c763d03e72d4c71f5929ce6",
    "logs": [],
    "blockNumber": 3861189,
    "cumulativeGasUsed": "15453688",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a261774717de28517d6038bd0944662b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"template\",\"type\":\"address\"}],\"name\":\"SVGTemplateCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"createSVG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_tplAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"svgAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_svgAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"svgString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"data_\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"svgs\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"}},\"version\":1},\"userdoc\":{\"events\":{\"ControllerAdded(address,address)\":{\"notice\":\"emitted when a controller is added.\"},\"ControllerRemoved(address,address)\":{\"notice\":\"emitted when a controller is removed.\"}},\"kind\":\"user\",\"methods\":{\"createSVG(address,string)\":{\"notice\":\"add a new gem pool\"},\"svgAddress(string)\":{\"notice\":\"get the svg address of the given svg name. does not mean the file exists\"},\"svgString(string)\":{\"notice\":\"get the svg data of the given svg name as a string\"},\"svgs()\":{\"notice\":\"get all the svg namea in the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/utilities/SVGManager.sol\":\"SVGManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\\r\\ninterface IControllable {\\r\\n\\r\\n    /// @notice emitted when a controller is added.\\r\\n    event ControllerAdded(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice emitted when a controller is removed.\\r\\n    event ControllerRemoved(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice adds a controller.\\r\\n    /// @param controller the controller to add.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    /// @notice removes a controller.\\r\\n    /// @param controller the address to check\\r\\n    /// @return true if the address is a controller\\r\\n    function isController(address controller) external view returns (bool);\\r\\n\\r\\n    /// @notice remove ourselves from the list of controllers.\\r\\n    function relinquishControl() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x15f5c4f8732a9caffb811a8ebf9aeba41a108e58634607c0700a46a891edf2ec\",\"license\":\"MIT\"},\"src/interfaces/IMultiPart.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n\\n/* solhint-disable indent */\\n\\n\\nstruct MultiPartContract {\\n    string name_;\\n    bytes[] data_;\\n}\\n\",\"keccak256\":\"0xcb970b1c3b410edf58a38791322389593058409d355ea725ebbcfb7c7841ecdd\",\"license\":\"MIT\"},\"src/interfaces/ISVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nstruct SVGTemplatesContract {\\n    mapping(string => address) _templates;\\n    string[] _templateNames;\\n}\\n\\ninterface ISVG {\\n    function getSVG() external view returns (string memory);\\n}\\n\\ninterface ISVGTemplate {\\n    function createSVG(address sender, string memory _name) external returns (address _tplAddress);\\n    function svgs() external view returns (string[] memory);\\n    function svgName() external view returns (string memory _name);\\n    function svgString(string memory name) external view returns (string memory _data);\\n    function svgAddress(string memory name) external view returns (address _data);\\n    function svgBytes() external view returns (bytes[] memory _data);\\n    function clear() external;\\n    function add(string memory _data) external returns (uint256 _index);\\n    function addAll(string[] memory _data) external returns (uint256 _count);\\n    function buildSVG(Replacement[] memory replacements) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1cb8dda6f9d4957c71f0fc06475be2bf4798f6368565f34a322abe015c16593c\",\"license\":\"MIT\"},\"src/interfaces/IStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nstruct Replacement {\\n    string matchString;\\n    string replaceString;\\n}\\n\",\"keccak256\":\"0x0df4530f0e41983002d8732a50f802d069b85d0f2fedad4dc58bf4b73ea39146\",\"license\":\"MIT\"},\"src/libraries/SVGTemplatesLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\n\\nimport \\\"../interfaces/ISVG.sol\\\";\\nimport \\\"../interfaces/IStrings.sol\\\";\\nimport \\\"../interfaces/IMultiPart.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\n\\nimport \\\"../utilities/SVGTemplate.sol\\\";\\n\\nstruct SaltStorage {\\n    uint256 salt;\\n}\\n\\nstruct SVGStorage {\\n    SVGTemplatesContract svgTemplates;\\n    SaltStorage salt;    \\n    address svgManager;\\n    MultiPartContract multiPart;\\n}\\n\\nlibrary SVGTemplatesLib {\\n\\n    event SVGTemplateCreated(string name, address template);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nextblock.bitgem.app.SVGStorage.storage\\\");\\n\\n    function svgStorage() internal pure returns (SVGStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n    \\n    /// @notice get the stored template names in the contract\\n    /// @return the names of the templates\\n    function _svgs(SVGTemplatesContract storage self)\\n        internal\\n        view\\n        returns (string[] memory) { return self._templateNames; }\\n\\n    /// @notice get the create2 address of the given name\\n    function _svgAddress(\\n        SVGTemplatesContract storage,\\n        string memory _name) \\n        internal \\n        view returns (address) {\\n        return Create2.computeAddress(\\n            keccak256(abi.encodePacked(_name)), \\n            keccak256(type(SVGTemplate).creationCode)\\n        );  \\n    }\\n\\n    /// @notice the svg string or an empty string\\n    function _svgString(\\n        SVGTemplatesContract storage self,\\n        string memory _name\\n    ) internal view returns (string memory data_) {\\n        try SVGTemplate(_svgAddress(self, _name)).svgString() returns (string memory _data) {\\n            data_ = _data;\\n        } catch (bytes memory) {}\\n    }\\n\\n    /// @notice the sstored address for the name storage. empty is no svg\\n    function _svgData(\\n        SVGTemplatesContract storage self,\\n        string memory _name\\n    ) internal view returns (address) {\\n        return self._templates[_name];\\n    }\\n\\n    /// @notice create a new SVG image with the given name\\n    function _createSVG(SVGTemplatesContract storage self, address sender, string memory _name)\\n        internal\\n        returns (address _tplAddress)\\n    {\\n        // make sure the name is unique\\n        require(\\n            self._templates[_name] == address(0),\\n            \\\"template already deployed\\\"\\n        );\\n\\n        // get the address for the given name, create using create2,\\n        // then verify that create2 returned the expected address\\n        address targetTplAddress = _svgAddress(self, _name);\\n        _tplAddress = Create2.deploy(\\n            0,\\n            keccak256(abi.encodePacked(_name)),\\n            type(SVGTemplate).creationCode\\n        );\\n        require(targetTplAddress == _tplAddress, \\\"template address mismatch\\\");\\n\\n        // transfer ownership to the creator and update storage\\n        Ownable(_tplAddress).transferOwnership(sender);\\n        self._templateNames.push(_name);\\n        self._templates[_name] = _tplAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x26dfe5608e1b47a5537f8ff8d7c6312eade2b181950d7f41f6a999b1a84b72f2\",\"license\":\"MIT\"},\"src/libraries/StringsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nlibrary StringsLib {\\n\\n    function parseInt(string memory s) internal pure returns (uint256 res) {\\n\\n        for (uint256 i = 0; i < bytes(s).length; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        return res;\\n\\n    }\\n\\n    function startsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (haystackBytes[i] != needleBytes[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function endsWith(string memory haystack, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        bytes memory needleBytes = bytes(needle);\\n        uint256 haystackLength = haystackBytes.length;\\n        uint256 needleLength = needleBytes.length;\\n        if (needleLength > haystackLength) {\\n            return false;\\n        }\\n        for (uint256 i = 0; i < needleLength; i++) {\\n            if (\\n                haystackBytes[haystackLength - i - 1] !=\\n                needleBytes[needleLength - i - 1]\\n            ) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 length = haystackBytes.length;\\n        uint256 endpos = length - startpos;\\n        bytes memory substringBytes = new bytes(endpos);\\n        for (uint256 i = 0; i < endpos; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function substring(string memory haystack, uint256 startpos, uint256 endpos)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory haystackBytes = bytes(haystack);\\n        uint256 substringLength = endpos - startpos;\\n        bytes memory substringBytes = new bytes(substringLength);\\n        for (uint256 i = 0; i < substringLength; i++) {\\n            substringBytes[i] = haystackBytes[startpos + i];\\n        }\\n        return string(substringBytes);\\n    }\\n\\n    function concat(string[] memory _strings)\\n        internal\\n        pure\\n        returns (string memory _concat)\\n    {\\n        _concat = \\\"\\\";\\n        for (uint256 i = 0; i < _strings.length; i++) {\\n            _concat = string(abi.encodePacked(_concat, _strings[i]));\\n        }\\n        return _concat;\\n    }\\n\\n    function split(string memory _string, string memory _delimiter) internal pure returns (string[] memory _split) {\\n        _split = new string[](0);\\n        uint256 _delimiterLength = bytes(_delimiter).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _splitLength = 0;\\n        uint256 _splitIndex = 0;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_delimiter)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _split[_splitIndex] = substring(_string, _startpos);\\n                    _splitIndex++;\\n                    _splitLength++;\\n                }\\n                _startpos = i + _delimiterLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _split[_splitIndex] = substring(_string, _startpos);\\n            _splitIndex++;\\n            _splitLength++;\\n        }\\n        return _split;\\n    }\\n\\n    function join(string[] memory _strings, string memory _delimiter) internal pure returns (string memory _joined) {\\n        for (uint256 i = 0; i < _strings.length; i++) {\\n            _joined = string(abi.encodePacked(_joined, _strings[i]));\\n            if (i < _strings.length - 1) {\\n                _joined = string(abi.encodePacked(_joined, _delimiter));\\n            }\\n        }\\n        return _joined;\\n    }\\n\\n    function replace(string memory _string, string memory _search, string memory _replace) internal pure returns (string memory _replaced) {\\n        _replaced = _string;\\n        uint256 _searchLength = bytes(_search).length;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _replacedLength = _stringLength;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] == bytes(_search)[0]) {\\n                _endpos = i;\\n                if (_endpos - _startpos > 0) {\\n                    _replaced = substring(_replaced, _startpos);\\n                    _replacedLength -= _endpos - _startpos;\\n                }\\n                _replaced = string(abi.encodePacked(_replaced, _replace));\\n                _replacedLength += bytes(_replace).length;\\n                _startpos = i + _searchLength;\\n            }\\n        }\\n        if (_startpos < _stringLength) {\\n            _replaced = substring(_replaced, _startpos);\\n            _replacedLength -= _stringLength - _startpos;\\n        }\\n        return _replaced;\\n    }\\n\\n    function trim(string memory _string) internal pure returns (string memory _trimmed) {\\n        _trimmed = _string;\\n        uint256 _stringLength = bytes(_string).length;\\n        uint256 _startpos = 0;\\n        uint256 _endpos = 0;\\n        for (uint256 i = 0; i < _stringLength; i++) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _startpos = i;\\n                break;\\n            }\\n        }\\n        for (uint256 i = _stringLength - 1; i >= 0; i--) {\\n            if (bytes(_string)[i] != 0x20) {\\n                _endpos = i;\\n                break;\\n            }\\n        }\\n        if (_startpos < _endpos) {\\n            _trimmed = substring(_trimmed, _startpos);\\n            _trimmed = substring(_trimmed, 0, _endpos - _startpos + 1);\\n        }\\n        return _trimmed;\\n    }\\n\\n    function toUint16(string memory s) internal pure returns (uint16 res_) {\\n        uint256 res = 0;\\n        for (uint256 i = 0; i < bytes(s).length; i++) {\\n            if ((uint8(bytes(s)[i]) - 48) < 0 || (uint8(bytes(s)[i]) - 48) > 9) {\\n                return 0;\\n            }\\n            res += (uint8(bytes(s)[i]) - 48) * 10**(bytes(s).length - i - 1);\\n        }\\n        res_ = uint16(res);\\n    }\\n\\n\\n    function replace(string[] memory input, string memory matchTag, string[] memory repl) internal pure returns (string memory) {\\n        string memory svgBody;\\n        for(uint256 i = 0; i < input.length; i++) {\\n            string memory svgString = input[i];\\n            string memory outValue;\\n            if(StringsLib.startsWith(svgString, matchTag)) {\\n                string memory restOfLine = StringsLib.substring(svgString, bytes(matchTag).length);\\n                uint256 replIndex = StringsLib.parseInt(restOfLine);\\n                outValue = repl[replIndex];\\n            } else {\\n                outValue = svgString;\\n            }\\n            svgBody = string(abi.encodePacked(svgBody, outValue));\\n        }\\n        return svgBody;\\n    }\\n\\n    function replace(bytes[] memory sourceBytes, Replacement[] memory replacements_) public pure returns (string memory) {\\n        //bytes[] memory sourceBytes = _getSourceBytes();\\n        string memory outputFile = \\\"\\\";\\n        for (uint256 i = 0; i < sourceBytes.length; i++) {\\n            bytes memory sourceByte = sourceBytes[i];\\n            string memory outputLine  = string(sourceBytes[i]);\\n            for (uint256 j = 0; j < replacements_.length; j++) {\\n                Replacement memory replacement = replacements_[j];\\n                if (keccak256(sourceByte) == keccak256(bytes(replacement.matchString))) {\\n                    outputLine = replacement.replaceString;\\n                }\\n            }\\n            outputFile = string(abi.encodePacked(outputFile, outputLine));\\n        }\\n        return outputFile;\\n    }    \\n}\\n\",\"keccak256\":\"0x02a9a5ce9ebdced869474486e20ab30554be62b13e2f86f894f027524cc60965\",\"license\":\"MIT\"},\"src/utilities/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IControllable.sol\\\";\\r\\n\\r\\nabstract contract Controllable is IControllable {\\r\\n    mapping(address => bool) internal _controllers;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account not in authorized list\\r\\n     */\\r\\n    modifier onlyController() virtual {\\r\\n        require(\\r\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\r\\n            \\\"caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add an address allowed to control this contract\\r\\n     */\\r\\n    function addController(address _controller)\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n    {\\r\\n        _addController(_controller);\\r\\n    }\\r\\n    function _addController(address _controller) internal {\\r\\n        _controllers[_controller] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if this address is a controller\\r\\n     */\\r\\n    function isController(address _address)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _isController(_address);\\r\\n    }\\r\\n    function _isController(address _address)\\r\\n        internal view\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _controllers[_address];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove the sender address from the list of controllers\\r\\n     */\\r\\n    function relinquishControl() external override onlyController {\\r\\n        _relinquishControl();\\r\\n    }\\r\\n    function _relinquishControl() internal onlyController{\\r\\n        delete _controllers[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8ecd3dbef92020332fa9e63f82871d6832e55ed630818f223784c73d6fe23fd2\",\"license\":\"MIT\"},\"src/utilities/MultipartData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\nimport \\\"../interfaces/IMultiPart.sol\\\";\\n\\nabstract contract MultipartData  {\\n    /// @notice add a new multipart to the contract\\n    /// @param _data the data of the multipart\\n    function _addData(bytes memory _data)\\n        internal returns (uint256 _index) {\\n        _index = SVGTemplatesLib.svgStorage().multiPart.data_.length;\\n        SVGTemplatesLib.svgStorage().multiPart.data_.push(_data);\\n    }\\n\\n    /// @notice get the data of the given index\\n    /// @param _index the index of the data\\n    function _getData(uint256 _index)\\n        internal view  returns (bytes memory data) {\\n        data = SVGTemplatesLib.svgStorage().multiPart.data_[_index];\\n    }\\n\\n    /// @notice get the data as a string\\n    function _fromBytes() internal view returns (string memory output) {\\n        string memory result = \\\"\\\";\\n        for (uint256 i = 0; i < SVGTemplatesLib.svgStorage().multiPart.data_.length; i++) {\\n            result = string(abi.encodePacked(result, SVGTemplatesLib.svgStorage().multiPart.data_[i]));\\n        }\\n        output = result;\\n    }\\n\\n    /// @notice get the data as a  bytes array\\n    function data__() internal view returns (bytes[] storage) {\\n        return SVGTemplatesLib.svgStorage().multiPart.data_;\\n    }\\n\\n    /// @notice clear the contents of the data array\\n    function _clear() internal {\\n        delete SVGTemplatesLib.svgStorage().multiPart.data_;\\n    }\\n}\",\"keccak256\":\"0x1bca756549a4758d672d48b5ea483434354ef8c8bc6562c0a6110dff273017dc\",\"license\":\"MIT\"},\"src/utilities/SVGManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../utilities/Controllable.sol\\\";\\nimport \\\"../interfaces/ISVG.sol\\\";\\n\\nimport \\\"../interfaces/IStrings.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\ncontract SVGManager is Controllable {\\n\\n    using SVGTemplatesLib for SVGTemplatesContract;\\n\\n    event SVGTemplateCreated(string name, address template);\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /// @notice get all the svg namea in the contract\\n    function svgs() external view returns (string[] memory) {\\n        return SVGTemplatesLib.svgStorage().svgTemplates._svgs();\\n    }\\n\\n    /// @notice get the svg address of the given svg name. does not mean the file exists\\n    function svgAddress(string memory _name) external view returns (address _svgAddress) {\\n        _svgAddress = SVGTemplatesLib.svgStorage().svgTemplates._svgAddress(_name);\\n    }\\n\\n    /// @notice get the svg data of the given svg name as a string\\n    function svgString(string memory _name) external view returns (string memory data_) {\\n\\n        try SVGTemplate(SVGTemplatesLib.svgStorage().svgTemplates._svgAddress(_name)).svgString() returns (string memory _data) {\\n            data_ = _data;\\n        } catch (bytes memory) {}\\n    }\\n\\n    /// @notice add a new gem pool\\n    function createSVG(address sender, string memory _name) external onlyController returns(address _tplAddress) {\\n\\n        _tplAddress = SVGTemplatesLib.svgStorage().svgTemplates._createSVG(sender, _name);\\n        emit SVGTemplateCreated(_name, _tplAddress);\\n    }\\n}\",\"keccak256\":\"0xc9e1fcaa75acc5544717dc9bd42a58a1093602400a7f4f443c264d4737c5f37a\",\"license\":\"MIT\"},\"src/utilities/SVGTemplate.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../utilities/MultipartData.sol\\\";\\n\\nimport \\\"../libraries/StringsLib.sol\\\";\\nimport \\\"../libraries/SVGTemplatesLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/// @notice a single SVG image\\ncontract SVGTemplate is MultipartData, Ownable, Initializable {\\n\\n    event SVGImageAdded(address indexed _from, address indexed _to, string _name, string _data);\\n    event SVGImagePartAdded(address indexed _from, address indexed _to, string _name, string _data);\\n\\n    function initialize(string memory _name, string[] memory _svg) external initializer {\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        ds.name_ = _name;\\n        for(uint i = 0; i < _svg.length; i++) {\\n            ds.data_.push(bytes(_svg[i]));\\n        }\\n    }\\n\\n    /// @notice the name of the svg\\n    function svgName() external view returns (string memory _name) {\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        _name = ds.name_;\\n    }\\n\\n    /// @notice the data of the svg\\n    function svgString() external view returns (string memory _data) {\\n        _data = _fromBytes();\\n    }\\n\\n    /// @notice the data of the svg\\n    function svgBytes() external view returns (bytes[] memory _data) {\\n        _data = data__();\\n    }\\n    \\n    /// @notice clear the data of the svg\\n    function clear() external onlyOwner {\\n        _clear();\\n    }\\n\\n    /// @notice add data to the end of the data\\n    function add(string memory _data) external onlyOwner returns (uint256 _index) {\\n        _index = _addData(bytes(_data));\\n        emit SVGImagePartAdded(msg.sender, address(this), SVGTemplatesLib.svgStorage().multiPart.name_, _data);\\n    }\\n\\n    /// @notice add all SVG lines at\\n    function addAll(string[] memory _data) external onlyOwner returns (uint256 _count) {\\n        for(uint256 i = 0; i < _data.length; i++) {\\n            _addData(bytes(_data[i]));\\n        }\\n        _count = _data.length;\\n        MultiPartContract storage ds = SVGTemplatesLib.svgStorage().multiPart;\\n        emit SVGImageAdded(msg.sender, address(this), ds.name_, _fromBytes());\\n    }\\n\\n    /// @notice get the svg, replacing the data with the data from the given replacements\\n    function buildSVG(Replacement[] memory replacements) external view returns (string memory) {\\n        return StringsLib.replace(data__(), replacements);\\n    }\\n}\",\"keccak256\":\"0xc8e1e6a1f9592e26cfb9798e5c5a151070e2cff8290d63288a82071e57bf9d91\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610039336001600160a01b03166000908152602081905260409020805460ff19166001179055565b612339806100486000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063642cd0911161005b578063642cd091146100e7578063a7fc7a07146100fa578063b429afeb1461010f578063e1c28bef1461013257600080fd5b80630e60927a146100825780631373d4e8146100b25780631f2cd4c6146100c7575b600080fd5b610095610090366004610a9f565b61013a565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ba61016e565b6040516100a99190610b2c565b6100da6100d5366004610a9f565b61019e565b6040516100a99190610bac565b6100956100f5366004610bd6565b61026a565b61010d610108366004610c24565b610349565b005b61012261011d366004610c24565b6103e2565b60405190151581526020016100a9565b61010d610403565b6000610168827fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e5b9061047b565b92915050565b60606101997fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e6104de565b905090565b60606101ca827fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e610162565b6001600160a01b0316633851e5e46040518163ffffffff1660e01b8152600401600060405180830381865afa92505050801561022857506040513d6000823e601f3d908101601f191682016040526102259190810190610c3f565b60015b610262573d808015610256576040519150601f19603f3d011682016040523d82523d6000602084013e61025b565b606091505b5050919050565b90505b919050565b3360009081526020819052604081205460ff1615156001148061028c57503033145b6102dd5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064015b60405180910390fd5b6103087fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e84846105bb565b90507f9def9fa0200e8a75d052e2441695912f07be1a15bbce5e2cbd822ecd0d981a66828260405161033b929190610cb6565b60405180910390a192915050565b3360009081526020819052604090205460ff1615156001148061036b57503033145b6103b75760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064016102d4565b6103df816001600160a01b03166000908152602081905260409020805460ff19166001179055565b50565b6001600160a01b03811660009081526020819052604081205460ff16610168565b3360009081526020819052604090205460ff1615156001148061042557503033145b6104715760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064016102d4565b6104796107f2565b565b60006104d7826040516020016104919190610ce1565b60405160208183030381529060405280519060200120604051806020016104b7906109b4565b6020820181038252601f19601f8201166040525080519060200120610879565b9392505050565b606081600101805480602002602001604051908101604052809291908181526020016000905b828210156105b057838290600052602060002001805461052390610cfd565b80601f016020809104026020016040519081016040528092919081815260200182805461054f90610cfd565b801561059c5780601f106105715761010080835404028352916020019161059c565b820191906000526020600020905b81548152906001019060200180831161057f57829003601f168201915b505050505081526020019060010190610504565b505050509050919050565b604051600090819085906105d0908590610ce1565b908152604051908190036020019020546001600160a01b0316146106365760405162461bcd60e51b815260206004820152601960248201527f74656d706c61746520616c7265616479206465706c6f7965640000000000000060448201526064016102d4565b6000610642858461047b565b905061069860008460405160200161065a9190610ce1565b6040516020818303038152906040528051906020012060405180602001610680906109b4565b601f1982820381018352601f90910116604052610886565b9150816001600160a01b0316816001600160a01b0316146106fb5760405162461bcd60e51b815260206004820152601960248201527f74656d706c6174652061646472657373206d69736d617463680000000000000060448201526064016102d4565b6040517ff2fde38b0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015283169063f2fde38b90602401600060405180830381600087803b15801561075757600080fd5b505af115801561076b573d6000803e3d6000fd5b505050506001858101805491820181556000908152602090200161078f8482610d9f565b508185600001846040516107a39190610ce1565b90815260405190819003602001902080546001600160a01b03929092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179055509392505050565b3360009081526020819052604090205460ff1615156001148061081457503033145b6108605760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064016102d4565b336000908152602081905260409020805460ff19169055565b60006104d783833061098a565b6000834710156108d85760405162461bcd60e51b815260206004820152601d60248201527f437265617465323a20696e73756666696369656e742062616c616e636500000060448201526064016102d4565b81516000036109295760405162461bcd60e51b815260206004820181905260248201527f437265617465323a2062797465636f6465206c656e677468206973207a65726f60448201526064016102d4565b8282516020840186f590506001600160a01b0381166104d75760405162461bcd60e51b815260206004820152601960248201527f437265617465323a204661696c6564206f6e206465706c6f790000000000000060448201526064016102d4565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6114a480610e6083390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610a1957610a196109c1565b604052919050565b600067ffffffffffffffff821115610a3b57610a3b6109c1565b50601f01601f191660200190565b600082601f830112610a5a57600080fd5b8135610a6d610a6882610a21565b6109f0565b818152846020838601011115610a8257600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610ab157600080fd5b813567ffffffffffffffff811115610ac857600080fd5b610ad484828501610a49565b949350505050565b60005b83811015610af7578181015183820152602001610adf565b50506000910152565b60008151808452610b18816020860160208601610adc565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b9f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610b8d858351610b00565b94509285019290850190600101610b53565b5092979650505050505050565b6020815260006104d76020830184610b00565b80356001600160a01b038116811461026557600080fd5b60008060408385031215610be957600080fd5b610bf283610bbf565b9150602083013567ffffffffffffffff811115610c0e57600080fd5b610c1a85828601610a49565b9150509250929050565b600060208284031215610c3657600080fd5b6104d782610bbf565b600060208284031215610c5157600080fd5b815167ffffffffffffffff811115610c6857600080fd5b8201601f81018413610c7957600080fd5b8051610c87610a6882610a21565b818152856020838501011115610c9c57600080fd5b610cad826020830160208601610adc565b95945050505050565b604081526000610cc96040830185610b00565b90506001600160a01b03831660208301529392505050565b60008251610cf3818460208701610adc565b9190910192915050565b600181811c90821680610d1157607f821691505b602082108103610d4a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f821115610d9a57600081815260208120601f850160051c81016020861015610d775750805b601f850160051c820191505b81811015610d9657828155600101610d83565b5050505b505050565b815167ffffffffffffffff811115610db957610db96109c1565b610dcd81610dc78454610cfd565b84610d50565b602080601f831160018114610e025760008415610dea5750858301515b600019600386901b1c1916600185901b178555610d96565b600085815260208120601f198616915b82811015610e3157888601518255948401946001909101908401610e12565b5085821015610e4f5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6114268061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100c85760003560e01c806365ece3e911610081578063b0c8f9dc1161005b578063b0c8f9dc14610176578063c53936b114610189578063f2fde38b1461019c57600080fd5b806365ece3e91461013e578063715018a6146101465780638da5cb5b1461014e57600080fd5b80632763b63c116100b25780632763b63c1461010b5780633851e5e41461012c57806352efea6e1461013457600080fd5b806253a5c7146100cd57806325a1f8f7146100f6575b600080fd5b6100e06100db366004610c40565b6101af565b6040516100ed9190610d9c565b60405180910390f35b6100fe61026f565b6040516100ed9190610db6565b61011e610119366004610ec1565b610367565b6040519081526020016100ed565b6100e061041f565b61013c61042e565b005b6100e0610440565b61013c6104f6565b60005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b61011e610184366004610efe565b610508565b61013c610197366004610f33565b610580565b61013c6101aa366004610f97565b6107ef565b6040517f20134c5c0000000000000000000000000000000000000000000000000000000081526060907309a89Cfbdbe53e34fF1E919006a47d12a6aABd40906320134c5c90610224907fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5986390869060040161107e565b600060405180830381865af4158015610241573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610269919081019061117b565b92915050565b60607fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc59863805480602002602001604051908101604052809291908181526020016000905b8282101561035e5783829060005260206000200180546102d190610fcd565b80601f01602080910402602001604051908101604052809291908181526020018280546102fd90610fcd565b801561034a5780601f1061031f5761010080835404028352916020019161034a565b820191906000526020600020905b81548152906001019060200180831161032d57829003601f168201915b5050505050815260200190600101906102b2565b50505050905090565b600061037161088c565b60005b82518110156103b25761039f838281518110610392576103926111f2565b60200260200101516108f3565b50806103aa81611208565b915050610374565b505080517fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5986230337f2feaa7d3b0dd621e7cad5cfc3691f0dd694e4df1ec0cacdaa75168f732a5429c83610403610955565b604051610411929190611230565b60405180910390a350919050565b6060610429610955565b905090565b61043661088c565b61043e610a09565b565b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc59862805460609190819061047290610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461049e90610fcd565b80156104eb5780601f106104c0576101008083540402835291602001916104eb565b820191906000526020600020905b8154815290600101906020018083116104ce57829003601f168201915b505050505091505090565b6104fe61088c565b61043e6000610a34565b600061051261088c565b61051b826108f3565b905030337f06655b3acec5ad67072e7d20045a297095f255f96184d146a1b1604362507a037fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e60405161057391600401908790611230565b60405180910390a3919050565b6000547501000000000000000000000000000000000000000000900460ff16158080156105cb575060005460017401000000000000000000000000000000000000000090910460ff16105b806105fd5750303b1580156105fd575060005474010000000000000000000000000000000000000000900460ff166001145b6106745760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017905580156106fa57600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790555b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc598628061072685826112a3565b5060005b83518110156107855781600101848281518110610749576107496111f2565b6020908102919091018101518254600181018455600093845291909220019061077290826112a3565b508061077d81611208565b91505061072a565b505080156107ea57600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6107f761088c565b73ffffffffffffffffffffffffffffffffffffffff81166108805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066b565b61088981610a34565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461043e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5986380546001810182556000919091527fed06d2150f13cde0363cec0281f53ae553aa71beb1921caab2449a88e09f1db0810161094f83826112a3565b50919050565b60408051602081019091526000808252606091905b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc598635481101561094f57817fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e6005018054839081106109ca576109ca6111f2565b906000526020600020016040516020016109e5929190611363565b60405160208183030381529060405291508080610a0190611208565b91505061096a565b61043e7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc598636000610aa9565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061088991905b80821115610ae0576000610ad78282610ae4565b50600101610ac3565b5090565b508054610af090610fcd565b6000825580601f10610b00575050565b601f01602090049060005260206000209081019061088991905b80821115610ae05760008155600101610b1a565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610b6757610b67610b2e565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b9657610b96610b2e565b604052919050565b600067ffffffffffffffff821115610bb857610bb8610b2e565b5060051b60200190565b600067ffffffffffffffff821115610bdc57610bdc610b2e565b50601f01601f191660200190565b600082601f830112610bfb57600080fd5b8135610c0e610c0982610bc2565b610b6d565b818152846020838601011115610c2357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020808385031215610c5357600080fd5b823567ffffffffffffffff80821115610c6b57600080fd5b818501915085601f830112610c7f57600080fd5b8135610c8d610c0982610b9e565b81815260059190911b83018401908481019088831115610cac57600080fd5b8585015b83811015610d3f57803585811115610cc85760008081fd5b86016040818c03601f1901811315610ce05760008081fd5b610ce8610b44565b8983013588811115610cfa5760008081fd5b610d088e8c83870101610bea565b825250908201359087821115610d1e5760008081fd5b610d2c8d8b84860101610bea565b818b015285525050918601918601610cb0565b5098975050505050505050565b60005b83811015610d67578181015183820152602001610d4f565b50506000910152565b60008151808452610d88816020860160208601610d4c565b601f01601f19169290920160200192915050565b602081526000610daf6020830184610d70565b9392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e29577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610e17858351610d70565b94509285019290850190600101610ddd565b5092979650505050505050565b600082601f830112610e4757600080fd5b81356020610e57610c0983610b9e565b82815260059290921b84018101918181019086841115610e7657600080fd5b8286015b84811015610eb657803567ffffffffffffffff811115610e9a5760008081fd5b610ea88986838b0101610bea565b845250918301918301610e7a565b509695505050505050565b600060208284031215610ed357600080fd5b813567ffffffffffffffff811115610eea57600080fd5b610ef684828501610e36565b949350505050565b600060208284031215610f1057600080fd5b813567ffffffffffffffff811115610f2757600080fd5b610ef684828501610bea565b60008060408385031215610f4657600080fd5b823567ffffffffffffffff80821115610f5e57600080fd5b610f6a86838701610bea565b93506020850135915080821115610f8057600080fd5b50610f8d85828601610e36565b9150509250929050565b600060208284031215610fa957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610daf57600080fd5b600181811c90821680610fe157607f821691505b60208210810361094f57634e487b7160e01b600052602260045260246000fd5b6000815461100e81610fcd565b80855260206001838116801561102b576001811461104557611073565b60ff198516838901528284151560051b8901019550611073565b866000528260002060005b8581101561106b5781548a8201860152908301908401611050565b890184019650505b505050505092915050565b6000604080830181845280865480835260608601915060608160051b87010192508760005260208060002060005b838110156110f7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08987030185526110e58683611001565b955093820193600191820191016110ac565b505086840381880152875180855281850193509150600582901b8401810188820160005b8481101561116b57601f198784030186528151805189855261113f8a860182610d70565b91860151858303868801529190506111578183610d70565b97860197945050509083019060010161111b565b50909a9950505050505050505050565b60006020828403121561118d57600080fd5b815167ffffffffffffffff8111156111a457600080fd5b8201601f810184136111b557600080fd5b80516111c3610c0982610bc2565b8181528560208385010111156111d857600080fd5b6111e9826020830160208601610d4c565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019820361122957634e487b7160e01b600052601160045260246000fd5b5060010190565b6040815260006112436040830185611001565b82810360208401526111e98185610d70565b601f8211156107ea57600081815260208120601f850160051c8101602086101561127c5750805b601f850160051c820191505b8181101561129b57828155600101611288565b505050505050565b815167ffffffffffffffff8111156112bd576112bd610b2e565b6112d1816112cb8454610fcd565b84611255565b602080601f83116001811461130657600084156112ee5750858301515b600019600386901b1c1916600185901b17855561129b565b600085815260208120601f198616915b8281101561133557888601518255948401946001909101908401611316565b50858210156113535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000835160206113768285838901610d4c565b81840191506000855461138881610fcd565b600182811680156113a057600181146113b5576113e1565b60ff19841687528215158302870194506113e1565b896000528560002060005b848110156113d9578154898201529083019087016113c0565b505082870194505b5092999850505050505050505056fea264697066735822122034337346c55d5425adf14088dbb6f93514ad28d07c4d3e6d72a6a0354c1a336c64736f6c63430008110033a26469706673582212206d3867bfb4169fde4a4a08578024ef23c4e95f0e3a34caa03c9375efb1f601b664736f6c63430008110033",
  "deployedBytecode": "$6d7f79f7096847e2518d2fcd7c807cddfd$__906320134c5c90610224907fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5986390869060040161107e565b600060405180830381865af4158015610241573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610269919081019061117b565b92915050565b60607fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc59863805480602002602001604051908101604052809291908181526020016000905b8282101561035e5783829060005260206000200180546102d190610fcd565b80601f01602080910402602001604051908101604052809291908181526020018280546102fd90610fcd565b801561034a5780601f1061031f5761010080835404028352916020019161034a565b820191906000526020600020905b81548152906001019060200180831161032d57829003601f168201915b5050505050815260200190600101906102b2565b50505050905090565b600061037161088c565b60005b82518110156103b25761039f838281518110610392576103926111f2565b60200260200101516108f3565b50806103aa81611208565b915050610374565b505080517fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5986230337f2feaa7d3b0dd621e7cad5cfc3691f0dd694e4df1ec0cacdaa75168f732a5429c83610403610955565b604051610411929190611230565b60405180910390a350919050565b6060610429610955565b905090565b61043661088c565b61043e610a09565b565b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc59862805460609190819061047290610fcd565b80601f016020809104026020016040519081016040528092919081815260200182805461049e90610fcd565b80156104eb5780601f106104c0576101008083540402835291602001916104eb565b820191906000526020600020905b8154815290600101906020018083116104ce57829003601f168201915b505050505091505090565b6104fe61088c565b61043e6000610a34565b600061051261088c565b61051b826108f3565b905030337f06655b3acec5ad67072e7d20045a297095f255f96184d146a1b1604362507a037fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e60405161057391600401908790611230565b60405180910390a3919050565b6000547501000000000000000000000000000000000000000000900460ff16158080156105cb575060005460017401000000000000000000000000000000000000000090910460ff16105b806105fd5750303b1580156105fd575060005474010000000000000000000000000000000000000000900460ff166001145b6106745760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017905580156106fa57600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790555b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc598628061072685826112a3565b5060005b83518110156107855781600101848281518110610749576107496111f2565b6020908102919091018101518254600181018455600093845291909220019061077290826112a3565b508061077d81611208565b91505061072a565b505080156107ea57600080547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6107f761088c565b73ffffffffffffffffffffffffffffffffffffffff81166108805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066b565b61088981610a34565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461043e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066b565b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5986380546001810182556000919091527fed06d2150f13cde0363cec0281f53ae553aa71beb1921caab2449a88e09f1db0810161094f83826112a3565b50919050565b60408051602081019091526000808252606091905b7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc598635481101561094f57817fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc5985e6005018054839081106109ca576109ca6111f2565b906000526020600020016040516020016109e5929190611363565b60405160208183030381529060405291508080610a0190611208565b91505061096a565b61043e7fd6bd814cc1bc4b2e2e963d75e86b66330979dafa58695edbdc535ed90fc598636000610aa9565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061088991905b80821115610ae0576000610ad78282610ae4565b50600101610ac3565b5090565b508054610af090610fcd565b6000825580601f10610b00575050565b601f01602090049060005260206000209081019061088991905b80821115610ae05760008155600101610b1a565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610b6757610b67610b2e565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610b9657610b96610b2e565b604052919050565b600067ffffffffffffffff821115610bb857610bb8610b2e565b5060051b60200190565b600067ffffffffffffffff821115610bdc57610bdc610b2e565b50601f01601f191660200190565b600082601f830112610bfb57600080fd5b8135610c0e610c0982610bc2565b610b6d565b818152846020838601011115610c2357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020808385031215610c5357600080fd5b823567ffffffffffffffff80821115610c6b57600080fd5b818501915085601f830112610c7f57600080fd5b8135610c8d610c0982610b9e565b81815260059190911b83018401908481019088831115610cac57600080fd5b8585015b83811015610d3f57803585811115610cc85760008081fd5b86016040818c03601f1901811315610ce05760008081fd5b610ce8610b44565b8983013588811115610cfa5760008081fd5b610d088e8c83870101610bea565b825250908201359087821115610d1e5760008081fd5b610d2c8d8b84860101610bea565b818b015285525050918601918601610cb0565b5098975050505050505050565b60005b83811015610d67578181015183820152602001610d4f565b50506000910152565b60008151808452610d88816020860160208601610d4c565b601f01601f19169290920160200192915050565b602081526000610daf6020830184610d70565b9392505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610e29577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610e17858351610d70565b94509285019290850190600101610ddd565b5092979650505050505050565b600082601f830112610e4757600080fd5b81356020610e57610c0983610b9e565b82815260059290921b84018101918181019086841115610e7657600080fd5b8286015b84811015610eb657803567ffffffffffffffff811115610e9a5760008081fd5b610ea88986838b0101610bea565b845250918301918301610e7a565b509695505050505050565b600060208284031215610ed357600080fd5b813567ffffffffffffffff811115610eea57600080fd5b610ef684828501610e36565b949350505050565b600060208284031215610f1057600080fd5b813567ffffffffffffffff811115610f2757600080fd5b610ef684828501610bea565b60008060408385031215610f4657600080fd5b823567ffffffffffffffff80821115610f5e57600080fd5b610f6a86838701610bea565b93506020850135915080821115610f8057600080fd5b50610f8d85828601610e36565b9150509250929050565b600060208284031215610fa957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610daf57600080fd5b600181811c90821680610fe157607f821691505b60208210810361094f57634e487b7160e01b600052602260045260246000fd5b6000815461100e81610fcd565b80855260206001838116801561102b576001811461104557611073565b60ff198516838901528284151560051b8901019550611073565b866000528260002060005b8581101561106b5781548a8201860152908301908401611050565b890184019650505b505050505092915050565b6000604080830181845280865480835260608601915060608160051b87010192508760005260208060002060005b838110156110f7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08987030185526110e58683611001565b955093820193600191820191016110ac565b505086840381880152875180855281850193509150600582901b8401810188820160005b8481101561116b57601f198784030186528151805189855261113f8a860182610d70565b91860151858303868801529190506111578183610d70565b97860197945050509083019060010161111b565b50909a9950505050505050505050565b60006020828403121561118d57600080fd5b815167ffffffffffffffff8111156111a457600080fd5b8201601f810184136111b557600080fd5b80516111c3610c0982610bc2565b8181528560208385010111156111d857600080fd5b6111e9826020830160208601610d4c565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019820361122957634e487b7160e01b600052601160045260246000fd5b5060010190565b6040815260006112436040830185611001565b82810360208401526111e98185610d70565b601f8211156107ea57600081815260208120601f850160051c8101602086101561127c5750805b601f850160051c820191505b8181101561129b57828155600101611288565b505050505050565b815167ffffffffffffffff8111156112bd576112bd610b2e565b6112d1816112cb8454610fcd565b84611255565b602080601f83116001811461130657600084156112ee5750858301515b600019600386901b1c1916600185901b17855561129b565b600085815260208120601f198616915b8281101561133557888601518255948401946001909101908401611316565b50858210156113535787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000835160206113768285838901610d4c565b81840191506000855461138881610fcd565b600182811680156113a057600181146113b5576113e1565b60ff19841687528215158302870194506113e1565b896000528560002060005b848110156113d9578154898201529083019087016113c0565b505082870194505b5092999850505050505050505056fea264697066735822122034337346c55d5425adf14088dbb6f93514ad28d07c4d3e6d72a6a0354c1a336c64736f6c63430008110033a26469706673582212206d3867bfb4169fde4a4a08578024ef23c4e95f0e3a34caa03c9375efb1f601b664736f6c63430008110033",
  "libraries": {
    "AddressSet": "0x99D84A2aA566300d09323EE12ad120177B7654bA",
    "AttributeLib": "0x929098055005A237C806Df3e2dC0E9B07390D83D",
    "Base64": "0x672911b00d6E0d0f6959A1726B4960090a357a4f",
    "Bytes32Set": "0xdDe75BdD8C22C231325997274D523aa0588648cf",
    "ClaimStorageLib": "0xd7b49da1a4b6f5f847367934d205267069E79772",
    "ClaimTopicLib": "0x74F75CF7495D01F851E49c9e0b6cfA1E4e874940",
    "DiamondFactoryLib": "0xf718448Cc7F47f8A41Df4369B3DB85654c895dA8",
    "DiamondLib": "0xe6b068a7e6129Ca173Ea322B7Eaa97F1A4d6ebBC",
    "ERC721AEnumerationLib": "0x2F25585979FD3EAda22229F7Cf1c41D59D2AA6e8",
    "ERC721ALib": "0x2C0A3c204108b7432d6378Fa52070Afa63a40785",
    "IdentityLib": "0x53709DA9782E836FB703Dd3E5d34B83a17da2773",
    "LibDiamond": "0x71c73a51f4Ab21532035DDCfc11656AbBF0c3a42",
    "MetadataLib": "0x17276309aca9bb8272367aB843d0E869405Dd5B6",
    "StringsLib": "0x09a89Cfbdbe53e34fF1E919006a47d12a6aABd40",
    "Strings": "0xE0e88D1dFaf4Bf95dAFB567fE65862827849AAbE",
    "SVGTemplatesLib": "0x318B833110D5d0DEB641bF3bd723DDc830BbBBd8",
    "TrustedIssuerLib": "0x0f367e5aa7a7f9a004ae37BC3c2e66A09FF95DA8",
    "UInt256Set": "0x8d8632635555c6c20F54a1b0b4A79b7A69f04026"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ControllerAdded(address,address)": {
        "notice": "emitted when a controller is added."
      },
      "ControllerRemoved(address,address)": {
        "notice": "emitted when a controller is removed."
      }
    },
    "kind": "user",
    "methods": {
      "createSVG(address,string)": {
        "notice": "add a new gem pool"
      },
      "svgAddress(string)": {
        "notice": "get the svg address of the given svg name. does not mean the file exists"
      },
      "svgString(string)": {
        "notice": "get the svg data of the given svg name as a string"
      },
      "svgs()": {
        "notice": "get all the svg namea in the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22883,
        "contract": "src/utilities/SVGManager.sol:SVGManager",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}