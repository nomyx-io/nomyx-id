{
  "address": "0xE8436ffC894A1171E7b322Ece280d623f941b068",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuerAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "claimIssuer",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "claimTopics",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct TrustedIssuer",
          "name": "trustedIssuer",
          "type": "tuple"
        }
      ],
      "name": "TrustedIssuerUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedIssuer",
          "type": "address"
        }
      ],
      "name": "getTrustedIssuerClaimTopics",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "hasClaimTopic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "hasTopic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1aa956cacb97bbe740db083f9233a3775083861785c2358755fd7e2478d0c8d0",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0xE8436ffC894A1171E7b322Ece280d623f941b068",
    "transactionIndex": 28,
    "gasUsed": "249421",
    "logsBloom": "0x
    "blockHash": "0xbd83b8189e6a83982aa3aa82b63f08e705512fcd8fb2716946419a0f283f17de",
    "transactionHash": "0x1aa956cacb97bbe740db083f9233a3775083861785c2358755fd7e2478d0c8d0",
    "logs": [],
    "blockNumber": 3879438,
    "cumulativeGasUsed": "7977380",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "484eba28627d1a62f03f1e15ade25543",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct TrustedIssuer\",\"name\":\"trustedIssuer\",\"type\":\"tuple\"}],\"name\":\"TrustedIssuerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedIssuer\",\"type\":\"address\"}],\"name\":\"getTrustedIssuerClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"hasClaimTopic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasTopic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTrustedIssuerClaimTopics(address)\":{\"params\":{\"_trustedIssuer\":\"The trusted issuer\"},\"returns\":{\"_0\":\"trustedIssuer The trusted issuer\"}},\"hasClaimTopic(address,uint256)\":{\"params\":{\"_claimTopic\":\"The claim topic\",\"_issuer\":\"The address of the issuer\"},\"returns\":{\"hasTopic\":\"True if the issuer has this claim topic\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTrustedIssuerClaimTopics(address)\":{\"notice\":\"Get the trusted issuer\"},\"hasClaimTopic(address,uint256)\":{\"notice\":\"Does this issuer have this claim topic\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/TrustedIssuerLib.sol\":\"TrustedIssuerLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/interfaces/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n    bool isRemoved;\\n}\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n    \\n}\",\"keccak256\":\"0xf94927c44289cafe7442ff3e69f6949f3f97ab784a27b0b5d79f3757da7f1dd8\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"src/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"src/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(\\n        uint256 _topic, \\n        uint256 _scheme, \\n        address _issuer, \\n        bytes memory _signature, \\n        bytes memory _data, \\n        string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\\n\\n/*\\nHow IdentityRegistry works:\\n\\n1. User creates an Identity contract\\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\\n\\n*/\",\"keccak256\":\"0xd9696a4c45abd2c8e0cc7cd8f02bd18612d0dcb0c573c928ab225de624c01d92\",\"license\":\"MIT\"},\"src/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"src/interfaces/ITrustedIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"./IClaimIssuer.sol\\\";\\n\\nstruct TrustedIssuer {\\n    address claimIssuer;\\n    uint[] claimTopics;\\n}\\n\\ninterface ITrustedIssuersRegistry {\\n\\n    // events\\n    event TrustedIssuerAdded(address indexed trustedIssuer, uint[] claimTopics);\\n    event TrustedIssuerRemoved(address indexed trustedIssuer);\\n    event ClaimTopicsUpdated(address indexed trustedIssuer, uint[] claimTopics);\\n\\n    // functions\\n    // setters\\n    function addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n    function removeTrustedIssuer(address _trustedIssuer) external;\\n    function updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n\\n    // getters\\n    function getTrustedIssuers() external view returns (TrustedIssuer[] memory);\\n    function isTrustedIssuer(address _issuer) external view returns(bool);\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory);\\n    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\\n\\n}\",\"keccak256\":\"0xec92af21e4a22ca0a3f643399fb2da26b898aa7c0b70bc59819e49935dcc21ad\",\"license\":\"MIT\"},\"src/libraries/TrustedIssuerLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"../interfaces/IClaimIssuer.sol\\\";\\nimport { ITrustedIssuersRegistry, TrustedIssuer } from \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\n\\nstruct TrustedIssuerContract {\\n    mapping(address => TrustedIssuer) trustedIssuers;\\n    address[] trustedIssuerAddresses;\\n    address owner;\\n}\\n\\nstruct TrustedIssuerStorage {\\n    TrustedIssuerContract trustedIssuerContract;\\n}\\n\\n/// \\nlibrary TrustedIssuerLib {\\n\\n    event TrustedIssuerUpdated(address indexed issuerAddress, TrustedIssuer trustedIssuer);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nomyx.lenderlabs.TrustedIssuerStorage.storage\\\");\\n\\n    /// @notice Get the storage struct for the TrustedIssuerRegistry\\n    /// @return ds TrustedIssuerStorage struct for the TrustedIssuerRegistry\\n    function trustedIssuerStorage() internal pure returns (TrustedIssuerStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice Get the trusted issuer struct given the trusted issuer address \\n    /// @param issuerAddress The address of the trusted issuer\\n    /// @return trustedIssuer The trusted issuer struct\\n    function _getTrustedIssuer(\\n        TrustedIssuerContract storage,\\n        address issuerAddress\\n    ) internal view returns (TrustedIssuer memory trustedIssuer) {\\n        return trustedIssuerStorage().trustedIssuerContract.trustedIssuers[issuerAddress];\\n    }\\n\\n    /// @notice Set the trusted issuer struct given the trusted issuer address\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @param issuerAddress The address of the trusted issuer\\n    /// @param trustedIssuer The trusted issuer struct\\n    function _setTrustedIssuer(\\n        TrustedIssuerContract storage self,\\n        address issuerAddress,\\n        TrustedIssuer memory trustedIssuer\\n    ) internal {\\n        if(self.trustedIssuers[issuerAddress].claimIssuer == address(0)) {\\n            self.trustedIssuerAddresses.push(issuerAddress);\\n        }\\n        self.trustedIssuers[issuerAddress] = trustedIssuer; \\n        emit TrustedIssuerUpdated(issuerAddress, trustedIssuer);\\n    }\\n\\n    /// @notice Add a trusted issuer\\n    /// @param _trustedIssuer The address of the trusted issuer\\n    /// @param _claimTopics The claim topics that the trusted issuer is allowed to issue\\n    function _addTrustedIssuer(\\n        TrustedIssuerContract storage,\\n        address _trustedIssuer, \\n        uint[] calldata _claimTopics) internal {\\n\\n        TrustedIssuer memory trustedIssuer = TrustedIssuer({\\n            claimIssuer: _trustedIssuer,\\n            claimTopics: _claimTopics\\n        });\\n\\n        _setTrustedIssuer(\\n            trustedIssuerStorage().trustedIssuerContract,\\n            address(_trustedIssuer),\\n            trustedIssuer\\n        );\\n    }\\n\\n    /// @notice Remove a trusted issuer\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @param _trustedIssuer The address of the trusted issuer\\n    function removeTrustedIssuer(TrustedIssuerContract storage self, address _trustedIssuer) internal {\\n        delete self.trustedIssuers[address(_trustedIssuer)];\\n    }\\n\\n    /// @notice Update the claim topics that a trusted issuer is allowed to issue\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @param _trustedIssuer The address of the trusted issuer\\n    /// @param _claimTopics The claim topics that the trusted issuer is allowed to issue\\n    function updateIssuerClaimTopics(TrustedIssuerContract storage self, address _trustedIssuer, uint[] calldata _claimTopics) internal {\\n        TrustedIssuer memory trustedIssuer = _getTrustedIssuer(\\n            self,\\n            address(_trustedIssuer)\\n        );\\n        trustedIssuer.claimTopics = _claimTopics;\\n        _setTrustedIssuer(\\n            self,\\n            address(_trustedIssuer),\\n            trustedIssuer\\n        );\\n    }\\n\\n    /// @notice Get the trusted issuers\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @return trustedIssuers The trusted issuers\\n    function getTrustedIssuers(TrustedIssuerContract storage self) internal view  returns (TrustedIssuer[] memory trustedIssuers) {\\n        trustedIssuers = new TrustedIssuer[](self.trustedIssuerAddresses.length);\\n        for (uint i = 0; i < self.trustedIssuerAddresses.length; i++) {\\n            trustedIssuers[i] = self.trustedIssuers[self.trustedIssuerAddresses[i]];\\n        }\\n    }\\n\\n    /// @notice is the issuer trusted\\n    /// @param _issuer The address of the issuer\\n    /// @return isTrusted True if the issuer is trusted\\n    function isTrustedIssuer(address _issuer) internal view returns(bool isTrusted) {\\n        isTrusted = trustedIssuerStorage().trustedIssuerContract.trustedIssuers[_issuer].claimIssuer != address(0);\\n    }\\n\\n    /// @notice Get the trusted issuer\\n    /// @param _trustedIssuer The trusted issuer\\n    /// @return trustedIssuer The trusted issuer\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory) {\\n        return trustedIssuerStorage().trustedIssuerContract.trustedIssuers[address(_trustedIssuer)].claimTopics;\\n    }\\n\\n    /// @notice Does this issuer have this claim topic\\n    /// @param _issuer The address of the issuer\\n    /// @param _claimTopic The claim topic\\n    /// @return hasTopic True if the issuer has this claim topic\\n    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool hasTopic) {\\n        uint[] memory claimTopics = trustedIssuerStorage().trustedIssuerContract.trustedIssuers[_issuer].claimTopics;\\n        for (uint i = 0; i < claimTopics.length; i++) {\\n            if (claimTopics[i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xd590e10d7d6181df0c8cba045dd605ab9432e1d72ef1500d22c1d00eac4165d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61038e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806334a8998714610045578063c28fb2781461006d575b600080fd5b61005861005336600461023a565b61008d565b60405190151581526020015b60405180910390f35b61008061007b366004610264565b610176565b6040516100649190610286565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e8367602090815260408083206001018054825181850281018501909352808352849383018282801561011957602002820191906000526020600020905b815481526020019060010190808311610105575b5050505050905060005b8151811015610169578382828151811061013f5761013f6102ca565b60200260200101510361015757600192505050610170565b80610161816102f9565b915050610123565b5060009150505b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e8367602090815260409182902060010180548351818402810184019094528084526060939283018282801561020557602002820191906000526020600020905b8154815260200190600101908083116101f1575b50505050509050919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461023557600080fd5b919050565b6000806040838503121561024d57600080fd5b61025683610211565b946020939093013593505050565b60006020828403121561027657600080fd5b61027f82610211565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156102be578351835292840192918401916001016102a2565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610351577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212208495fd2cddc6cea6f20a9339e0246afc4af27f33d3c0ef37b9ebe2b0e042e79f64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806334a8998714610045578063c28fb2781461006d575b600080fd5b61005861005336600461023a565b61008d565b60405190151581526020015b60405180910390f35b61008061007b366004610264565b610176565b6040516100649190610286565b73ffffffffffffffffffffffffffffffffffffffff821660009081527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e8367602090815260408083206001018054825181850281018501909352808352849383018282801561011957602002820191906000526020600020905b815481526020019060010190808311610105575b5050505050905060005b8151811015610169578382828151811061013f5761013f6102ca565b60200260200101510361015757600192505050610170565b80610161816102f9565b915050610123565b5060009150505b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e8367602090815260409182902060010180548351818402810184019094528084526060939283018282801561020557602002820191906000526020600020905b8154815260200190600101908083116101f1575b50505050509050919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461023557600080fd5b919050565b6000806040838503121561024d57600080fd5b61025683610211565b946020939093013593505050565b60006020828403121561027657600080fd5b61027f82610211565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156102be578351835292840192918401916001016102a2565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610351577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212208495fd2cddc6cea6f20a9339e0246afc4af27f33d3c0ef37b9ebe2b0e042e79f64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTrustedIssuerClaimTopics(address)": {
        "params": {
          "_trustedIssuer": "The trusted issuer"
        },
        "returns": {
          "_0": "trustedIssuer The trusted issuer"
        }
      },
      "hasClaimTopic(address,uint256)": {
        "params": {
          "_claimTopic": "The claim topic",
          "_issuer": "The address of the issuer"
        },
        "returns": {
          "hasTopic": "True if the issuer has this claim topic"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTrustedIssuerClaimTopics(address)": {
        "notice": "Get the trusted issuer"
      },
      "hasClaimTopic(address,uint256)": {
        "notice": "Does this issuer have this claim topic"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}