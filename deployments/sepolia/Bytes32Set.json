{
  "address": "0xF8cF9DDd669304191Db084053CB0CB2B996721A8",
  "abi": [],
  "transactionHash": "0xde7f41e14b9a2fc4fea41a3f0353ee0d973dbce130baa8996f27150992c9c1ee",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0xF8cF9DDd669304191Db084053CB0CB2B996721A8",
    "transactionIndex": 0,
    "gasUsed": "273005",
    "logsBloom": "0x
    "blockHash": "0x1dbf344370add37ec0754818763ac1605c43c88db18cc3539118dee536263e7e",
    "transactionHash": "0xde7f41e14b9a2fc4fea41a3f0353ee0d973dbce130baa8996f27150992c9c1ee",
    "logs": [],
    "blockNumber": 3879084,
    "cumulativeGasUsed": "273005",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dbcfcf842e810514aedd8e426522bfbb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Sets are unordered. Delete operations reorder keys. All operations have a fixed gas cost at any scale, O(1). author: Rob Hitchens\",\"kind\":\"dev\",\"methods\":{\"count(Bytes32Set.Set storage)\":{\"params\":{\"self\":\"storage pointer to a Set.\"}},\"exists(Bytes32Set.Set storage,bytes32)\":{\"params\":{\"key\":\"value to check.\",\"self\":\"storage pointer to a Set.\"},\"returns\":{\"_0\":\"bool true: Set member, false: not a Set member.\"}},\"insert(Bytes32Set.Set storage,bytes32)\":{\"details\":\"duplicate keys are not permitted.\",\"params\":{\"key\":\"value to insert.\",\"self\":\"storage pointer to a Set.\"}},\"keyAtIndex(Bytes32Set.Set storage,uint256)\":{\"params\":{\"index\":\"row to enumerate. Must be < count() - 1.\",\"self\":\"storage pointer to a Set.\"}},\"remove(Bytes32Set.Set storage,bytes32)\":{\"details\":\"key to remove must exist.\",\"params\":{\"key\":\"value to remove.\",\"self\":\"storage pointer to a Set.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"count(Bytes32Set.Set storage)\":{\"notice\":\"count the keys.\"},\"exists(Bytes32Set.Set storage,bytes32)\":{\"notice\":\"check if a key is in the Set.\"},\"insert(Bytes32Set.Set storage,bytes32)\":{\"notice\":\"insert a key.\"},\"keyAtIndex(Bytes32Set.Set storage,uint256)\":{\"notice\":\"fetch a key by row (enumerate).\"},\"remove(Bytes32Set.Set storage,bytes32)\":{\"notice\":\"remove a key.\"}},\"notice\":\"Key sets with enumeration and delete. Uses mappings for random and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/Bytes32Set.sol\":\"Bytes32Set\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/libraries/Bytes32Set.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.\\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a\\n * fixed gas cost at any scale, O(1).\\n * author: Rob Hitchens\\n */\\n\\nlibrary Bytes32Set {\\n    struct Set {\\n        mapping(bytes32 => uint256) keyPointers;\\n        bytes32[] keyList;\\n    }\\n\\n    /**\\n     * @notice insert a key.\\n     * @dev duplicate keys are not permitted.\\n     * @param self storage pointer to a Set.\\n     * @param key value to insert.\\n     */\\n    function insert(Set storage self, bytes32 key) public {\\n        require(\\n            !exists(self, key),\\n            \\\"key already exists in the set.\\\"\\n        );\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length - 1;\\n    }\\n\\n    /**\\n     * @notice remove a key.\\n     * @dev key to remove must exist.\\n     * @param self storage pointer to a Set.\\n     * @param key value to remove.\\n     */\\n    function remove(Set storage self, bytes32 key) public {\\n        // TODO: I commented this out do get a test to pass - need to figure out what is up here\\n        // require(\\n        //     exists(self, key),\\n        //     \\\"Bytes32Set: key does not exist in the set.\\\"\\n        // );\\n        if (!exists(self, key)) return;\\n        uint256 last = count(self) - 1;\\n        uint256 rowToReplace = self.keyPointers[key];\\n        if (rowToReplace != last) {\\n            bytes32 keyToMove = self.keyList[last];\\n            self.keyPointers[keyToMove] = rowToReplace;\\n            self.keyList[rowToReplace] = keyToMove;\\n        }\\n        delete self.keyPointers[key];\\n        delete self.keyList[self.keyList.length - 1];\\n    }\\n\\n    /**\\n     * @notice count the keys.\\n     * @param self storage pointer to a Set.\\n     */\\n    function count(Set storage self) public view returns (uint256) {\\n        return self.keyList.length;\\n    }\\n\\n    /**\\n     * @notice check if a key is in the Set.\\n     * @param self storage pointer to a Set.\\n     * @param key value to check.\\n     * @return bool true: Set member, false: not a Set member.\\n     */\\n    function exists(Set storage self, bytes32 key)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        if (self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     * @notice fetch a key by row (enumerate).\\n     * @param self storage pointer to a Set.\\n     * @param index row to enumerate. Must be < count() - 1.\\n     */\\n    function keyAtIndex(Set storage self, uint256 index)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return self.keyList[index];\\n    }\\n}\\n\",\"keccak256\":\"0x25c482167b0148a81b64d5a05d464bd62ed5b085b8541921ca6d9de8f407c060\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6103fe61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c8063888d4ed01161005a578063888d4ed0146100b15780639b3cbfbe146100d3578063dd50f64e146100f657600080fd5b8063460f25b7146100765780634c55b7ae1461009c575b600080fd5b610089610084366004610324565b610116565b6040519081526020015b60405180910390f35b6100896100aa366004610346565b6001015490565b8180156100bd57600080fd5b506100d16100cc366004610324565b610141565b005b6100e66100e1366004610324565b610229565b6040519015158152602001610093565b81801561010257600080fd5b506100d1610111366004610324565b610279565b600082600101828154811061012d5761012d61035f565b906000526020600020015490505b92915050565b61014b8282610229565b610153575050565b60006001610162846001015490565b61016c919061038e565b6000838152602085905260409020549091508082146101e757600084600101838154811061019c5761019c61035f565b906000526020600020015490508185600001600083815260200190815260200160002081905550808560010183815481106101d9576101d961035f565b600091825260209091200155505b6000838152602085905260408120556001808501805490916102089161038e565b815481106102185761021861035f565b600091825260208220015550505050565b6001820154600090810361023f5750600061013b565b60008281526020849052604090205460018401805484929081106102655761026561035f565b906000526020600020015414905092915050565b6102838282610229565b156102ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6b657920616c72656164792065786973747320696e20746865207365742e0000604482015260640160405180910390fd5b6001808301805480830182556000828152602090200183905554610312919061038e565b60009182526020929092526040902055565b6000806040838503121561033757600080fd5b50508035926020909101359150565b60006020828403121561035857600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181038181111561013b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220cf179f298594afe2f74272128c6140473560bcdf2143c7f92b9c786d52198b1064736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100715760003560e01c8063888d4ed01161005a578063888d4ed0146100b15780639b3cbfbe146100d3578063dd50f64e146100f657600080fd5b8063460f25b7146100765780634c55b7ae1461009c575b600080fd5b610089610084366004610324565b610116565b6040519081526020015b60405180910390f35b6100896100aa366004610346565b6001015490565b8180156100bd57600080fd5b506100d16100cc366004610324565b610141565b005b6100e66100e1366004610324565b610229565b6040519015158152602001610093565b81801561010257600080fd5b506100d1610111366004610324565b610279565b600082600101828154811061012d5761012d61035f565b906000526020600020015490505b92915050565b61014b8282610229565b610153575050565b60006001610162846001015490565b61016c919061038e565b6000838152602085905260409020549091508082146101e757600084600101838154811061019c5761019c61035f565b906000526020600020015490508185600001600083815260200190815260200160002081905550808560010183815481106101d9576101d961035f565b600091825260209091200155505b6000838152602085905260408120556001808501805490916102089161038e565b815481106102185761021861035f565b600091825260208220015550505050565b6001820154600090810361023f5750600061013b565b60008281526020849052604090205460018401805484929081106102655761026561035f565b906000526020600020015414905092915050565b6102838282610229565b156102ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6b657920616c72656164792065786973747320696e20746865207365742e0000604482015260640160405180910390fd5b6001808301805480830182556000828152602090200183905554610312919061038e565b60009182526020929092526040902055565b6000806040838503121561033757600080fd5b50508035926020909101359150565b60006020828403121561035857600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181038181111561013b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220cf179f298594afe2f74272128c6140473560bcdf2143c7f92b9c786d52198b1064736f6c63430008110033",
  "devdoc": {
    "details": "Sets are unordered. Delete operations reorder keys. All operations have a fixed gas cost at any scale, O(1). author: Rob Hitchens",
    "kind": "dev",
    "methods": {
      "count(Bytes32Set.Set storage)": {
        "params": {
          "self": "storage pointer to a Set."
        }
      },
      "exists(Bytes32Set.Set storage,bytes32)": {
        "params": {
          "key": "value to check.",
          "self": "storage pointer to a Set."
        },
        "returns": {
          "_0": "bool true: Set member, false: not a Set member."
        }
      },
      "insert(Bytes32Set.Set storage,bytes32)": {
        "details": "duplicate keys are not permitted.",
        "params": {
          "key": "value to insert.",
          "self": "storage pointer to a Set."
        }
      },
      "keyAtIndex(Bytes32Set.Set storage,uint256)": {
        "params": {
          "index": "row to enumerate. Must be < count() - 1.",
          "self": "storage pointer to a Set."
        }
      },
      "remove(Bytes32Set.Set storage,bytes32)": {
        "details": "key to remove must exist.",
        "params": {
          "key": "value to remove.",
          "self": "storage pointer to a Set."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "count(Bytes32Set.Set storage)": {
        "notice": "count the keys."
      },
      "exists(Bytes32Set.Set storage,bytes32)": {
        "notice": "check if a key is in the Set."
      },
      "insert(Bytes32Set.Set storage,bytes32)": {
        "notice": "insert a key."
      },
      "keyAtIndex(Bytes32Set.Set storage,uint256)": {
        "notice": "fetch a key by row (enumerate)."
      },
      "remove(Bytes32Set.Set storage,bytes32)": {
        "notice": "remove a key."
      }
    },
    "notice": "Key sets with enumeration and delete. Uses mappings for random and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}