{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "src/identity/Identity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IIdentity } from \"../interfaces/IIdentity.sol\";\nimport { Controllable } from \"../utilities/Controllable.sol\";\n\n/// @title Identity\n/// @notice This contract represents an identity of a user\n/// @dev This contract is used to store the claims of a user\ncontract Identity is IIdentity, Controllable {\n\t\n\tmapping(bytes32 => Key) keys;\n\tmapping(uint256 => bytes32[]) keysByPurpose;\n\n\tconstructor() Controllable() {\n\t\t_addController(msg.sender);\n\t}\n\n\tstruct Key {\n\t\tuint256[] purposes;\n\t\tuint256 keyType;\n\t\tbytes32 key;\n\t}\n\n\tfunction addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external override onlyController {\n\t\trequire(keys[_key].key != _key, \"Key already exists\");\n\n\t\tkeys[_key].key = _key;\n\t\tkeys[_key].purposes.push(_purpose);\n\t\tkeys[_key].keyType = _keyType;\n\n\t\tkeysByPurpose[_purpose].push(_key);\n\n\t\temit KeyAdded(_key, _purpose, _keyType);\n\t}\n\n\tfunction removeKey(bytes32 _key, uint256 _purpose) external override onlyController {\n\t\trequire(keys[_key].key == _key, \"No such key\");\n\t\tfor (uint i = 0; i < keys[_key].purposes.length; i++) {\n\t\t\tif (keys[_key].purposes[i] == _purpose) {\n\t\t\t\tdelete keys[_key].purposes[i];\n\t\t\t}\n\t\t}\n\n\t\temit KeyRemoved(_key, _purpose, keys[_key].keyType);\n\n\t\tdelete keys[_key];\n\t}\n\n\tfunction getKey(\n\t\tbytes32 _key\n\t) external view override returns (uint256[] memory purposes, uint256 keyType, bytes32 key) {\n\t\treturn (keys[_key].purposes, keys[_key].keyType, keys[_key].key);\n\t}\n\n\tfunction getKeyPurposes(bytes32 _key) external view override returns (uint256[] memory _purposes) {\n\t\treturn (keys[_key].purposes);\n\t}\n\n\tfunction getKeysByPurpose(uint256 _purpose) external view override returns (bytes32[] memory _keys) {\n\t\treturn (keysByPurpose[_purpose]);\n\t}\n\n\tfunction _keyHasPurpose(bytes32 _key, uint256 _purpose) internal view returns (bool exists) {\n\t\tif (keys[_key].key == 0) return false;\n\t\tfor (uint i = 0; i < keys[_key].purposes.length; i++) {\n\t\t\tif (keys[_key].purposes[i] == _purpose) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists) {\n\t\treturn _keyHasPurpose(_key, _purpose);\n\t}\n\n\tfunction execute(address _to, uint256 _value, bytes calldata _data) external payable onlyController returns (uint256 executionId) {\n\t\trequire(_keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), 1), \"Sender does not have rights\");\n\t\t(bool success, ) = _to.call{value: _value}(_data);\n\t\tif (success) {\n\t\t\temit Executed(executionId, _to, _value, _data);\n\t\t} else {\n\t\t\temit ExecutionFailed(executionId, _to, _value, _data);\n\t\t}\n\t\treturn executionId;\n\t}\n\n\tfunction approve(uint256 _id, bool _approve) external override onlyController {\n\t\trequire(_keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), 2), \"Sender does not have rights\");\n\t\tif (_approve) {\n\t\t\temit Approved(_id, true);\n\t\t} else {\n\t\t\temit Approved(_id, false);\n\t\t}\n\t}\n\n\tstruct Claim {\n\t\tuint256 topic;\n\t\tuint256 scheme;\n\t\taddress issuer;\n\t\tbytes signature;\n\t\tbytes data;\n\t\tstring uri;\n\t}\n\n\tmapping(bytes32 => Claim) internal claims;\n\tbytes32[] internal claimIds;\n\n\tmapping(uint256 => bytes32[]) internal claimsByTopic;\n\tbytes32[] internal claimTopics;\n\n\tfunction getClaim(bytes32 _claimId)\n\t\texternal\n\t\tview\n\t\toverride\n\t\treturns (\n\t\t\tuint256 topic,\n\t\t\tuint256 scheme,\n\t\t\taddress issuer,\n\t\t\tbytes memory signature,\n\t\t\tbytes memory data,\n\t\t\tstring memory uri\n\t\t) {\n\t\tClaim storage claim = claims[_claimId];\n\t\treturn (claim.topic, claim.scheme, claim.issuer, claim.signature, claim.data, claim.uri);\n\t}\n\n\tfunction getClaimIdsByTopic(uint256 _topic) external view override returns (bytes32[] memory claimIds_) {\n\t\tclaimIds_ = claimsByTopic[_topic];\n\t}\n\n\tfunction addClaim(\n\t\tuint256 _topic,\n\t\tuint256 _scheme,\n\t\taddress _issuer,\n\t\tbytes memory _signature,\n\t\tbytes memory _data,\n\t\tstring memory _uri\n\t) external override onlyController returns (uint256 claimRequestId) {\n\t\tbytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\n\n\t\tClaim storage claim = claims[claimId];\n\t\tclaim.topic = _topic;\n\t\tclaim.scheme = _scheme;\n\t\tclaim.issuer = _issuer;\n\t\tclaim.signature = _signature;\n\t\tclaim.data = _data;\n\t\tclaim.uri = _uri;\n\n\t\tclaimsByTopic[_topic].push(claimId);\n\t\tclaimTopics.push(claimId);\n\n\t\tclaims[claimId] = claim;\n\t\tclaimIds.push(claimId);\n\n\t\temit ClaimAdded(claimId, _topic, _scheme, _issuer, _signature, _data, _uri);\n\n\t\treturn _topic;\n\t}\n\n\tfunction changeClaim(\n\t\tbytes32,\n\t\tuint256,\n\t\tuint256,\n\t\taddress,\n\t\tbytes memory,\n\t\tbytes memory,\n\t\tstring memory\n\t) external pure override returns (bool) {\n\t\trequire(false, \"Not implemented\");\n\t}\n\n\tfunction removeClaim(bytes32 _claimId) external override onlyController returns (bool success) {\n\t\tClaim storage claim = claims[_claimId];\n\t\trequire(claim.issuer != address(0), \"Claim does not exist\");\n\t\tdelete claims[_claimId];\n\t\temit ClaimRemoved(_claimId, claim.topic, claim.scheme, claim.issuer, claim.signature, claim.data, claim.uri);\n\t\treturn true;\n\t}\n\n\tfunction supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\n\t\treturn interfaceId == type(IIdentity).interfaceId;\n\t}\n\n\tfunction getExecution(\n\t\tuint256\n\t)\n\t\texternal\n\t\tpure\n\t\toverride\n\t\treturns (address, uint256, bytes memory, bool, uint256)\n\t{\n\t\trequire(false, \"Not implemented\");\n\t}\n\n\t function getClaimTopics() external view override returns (uint256[] memory) {\n\t\t uint256[] memory _claimTopics = new uint256[](claimTopics.length);\n\t\t for (uint256 i = 0; i < claimTopics.length; i++) {\n\t\t\t _claimTopics[i] = claims[claimTopics[i]].topic;\n\t\t }\n\t\t return _claimTopics;\n\t }\n\n\t function isVerified() external view returns (bool) {}\n}"
    },
    "src/IdentityFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport \"./identity/Identity.sol\";\n\ncontract IdentityFactory {\n    address private _template;\n\n    event IdentityCreated(address indexed identity, address indexed owner);\n\n    constructor() {\n        _template = address(new Identity());\n    }\n\n    function createIdentity() public  {\n        address addr = Clones.clone(_template);\n        emit IdentityCreated(addr, msg.sender);\n    }\n}"
    },
    "src/interfaces/IControllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\r\ninterface IControllable {\r\n\r\n    /// @notice emitted when a controller is added.\r\n    event ControllerAdded(\r\n        address indexed contractAddress,\r\n        address indexed controllerAddress\r\n    );\r\n\r\n    /// @notice emitted when a controller is removed.\r\n    event ControllerRemoved(\r\n        address indexed contractAddress,\r\n        address indexed controllerAddress\r\n    );\r\n\r\n    /// @notice adds a controller.\r\n    /// @param controller the controller to add.\r\n    function addController(address controller) external;\r\n\r\n    /// @notice removes a controller.\r\n    /// @param controller the address to check\r\n    /// @return true if the address is a controller\r\n    function isController(address controller) external view returns (bool);\r\n\r\n    /// @notice remove ourselves from the list of controllers.\r\n    function relinquishControl() external;\r\n}\r\n"
    },
    "src/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceId The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/interfaces/IERC734.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport { IERC165 } from \"./IERC165.sol\";\n\ninterface IERC734 is IERC165 {\n    // events\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event ExecutionRequested(\n        uint256 indexed executionId,\n        address indexed to,\n        uint256 indexed value,\n        bytes data\n    );\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Approved(uint256 indexed executionId, bool approved);\n\n    // functions\n    // setters\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\n    function removeKey(bytes32 _key, uint256 _purpose) external;\n    function approve(uint256 _id, bool _approve) external;\n\n    // getters\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\n}\n"
    },
    "src/interfaces/IERC735.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ninterface IERC735 {\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\n    function addClaim(uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (uint256 claimRequestId);\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\n    function removeClaim(bytes32 _claimId) external returns (bool success);\n}\n\n/*\nHow IdentityRegistry works:\n\n1. User creates an Identity contract\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\n\n*/"
    },
    "src/interfaces/IIdentity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC734 } from \"./IERC734.sol\";\nimport { IERC735 } from \"./IERC735.sol\";\n\ninterface IIdentity is IERC734, IERC735 {\n    function isVerified() external view returns (bool);\n    function getClaimTopics() external view returns (uint256[] memory);\n}"
    },
    "src/utilities/Controllable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.0;\r\n\r\nimport \"../interfaces/IControllable.sol\";\r\n\r\nabstract contract Controllable is IControllable {\r\n    mapping(address => bool) internal _controllers;\r\n\r\n    /**\r\n     * @dev Throws if called by any account not in authorized list\r\n     */\r\n    modifier onlyController() virtual {\r\n        require(\r\n            _controllers[msg.sender] == true || address(this) == msg.sender,\r\n            \"caller is not a controller\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Add an address allowed to control this contract\r\n     */\r\n    function addController(address _controller)\r\n        external\r\n        override\r\n        onlyController\r\n    {\r\n        _addController(_controller);\r\n    }\r\n    function _addController(address _controller) internal {\r\n        _controllers[_controller] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if this address is a controller\r\n     */\r\n    function isController(address _address)\r\n        external\r\n        view\r\n        override\r\n        returns (bool allowed)\r\n    {\r\n        allowed = _isController(_address);\r\n    }\r\n    function _isController(address _address)\r\n        internal view\r\n        returns (bool allowed)\r\n    {\r\n        allowed = _controllers[_address];\r\n    }\r\n\r\n    /**\r\n     * @dev Remove the sender address from the list of controllers\r\n     */\r\n    function relinquishControl() external override onlyController {\r\n        _relinquishControl();\r\n    }\r\n    function _relinquishControl() internal onlyController{\r\n        delete _controllers[msg.sender];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}