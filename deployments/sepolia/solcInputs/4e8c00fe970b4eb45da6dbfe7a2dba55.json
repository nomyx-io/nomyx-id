{
  "language": "Solidity",
  "sources": {
    "src/facets/ClaimTopicsRegistryFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IClaimTopicsRegistry.sol\";\nimport \"../libraries/ClaimTopicLib.sol\";\nimport \"../utilities/Modifiers.sol\";\n\ncontract ClaimTopicsRegistryFacet is IClaimTopicsRegistry, Modifiers {\n\n    using ClaimTopicLib for ClaimTopicContract;\n\n    constructor() {\n        ClaimTopicStorage storage _contract = ClaimTopicLib.claimTopicStorage();\n        _contract.owner = msg.sender;\n    }\n\n    function addClaimTopic(uint256 _claimTopic) external override onlyOwner {\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\n        _contract.addClaimTopic(_claimTopic);\n    }\n\n    function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\n        _contract.removeClaimTopic(_claimTopic);\n    }\n\n    function getClaimTopics() external view override returns (uint256[] memory) {\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\n        return _contract.getClaimTopics();\n    }\n\n}"
    },
    "src/facets/IdentityRegistryFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IIdentityRegistry.sol\";\nimport \"../libraries/IdentityLib.sol\";\nimport \"../libraries/TrustedIssuerLib.sol\";\nimport \"../utilities/Modifiers.sol\";\n\nimport \"../interfaces/ITrustedIssuersRegistry.sol\";\nimport \"../interfaces/IClaimTopicsRegistry.sol\";\n\nimport { IIdentityRegistry, IIdentity } from \"../interfaces/IIdentityRegistry.sol\";\n\n/// @title IdentityRegistryFacet\n/// @notice This contract manages the identity registry\n/// @dev This contract is meant to be used via diamond proxy\ncontract IdentityRegistryFacet is IIdentityRegistry, Modifiers {\n\tusing IdentityLib for IdentityContract;\n    using TrustedIssuerLib for TrustedIssuerContract;\n\n\tevent ContractAddressesSet();\n\n\tmodifier isTrustedIssuer() {\n\t\trequire(ITrustedIssuersRegistry(address(this)).isTrustedIssuer(msg.sender), \"Not trusted issuer\");\n\t\t_;\n\t}\n\n\tconstructor() {}\n\n\t/// @notice add an identity to the registry\n\t/// @param _identity address of the identity\n\t/// @param identityData address of the identity data contract\n    function _addIdentity(address _identity, IIdentity identityData) internal {\n        IdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n        Identity storage idObj = _contract._getIdentity(_identity);\n        require(idObj.identityData == IIdentity(address(0)), \"Identity already exists\");\n        idObj.identityData = identityData;\n        _contract.identityOwners.push(_identity);\n        emit IdentityAdded(_identity, identityData);\n    }\n\n\t/// @notice add an identity to the registry\n\t/// @param _identity address of the identity contract\n\t/// @param identityData address of the identity data contract\n\t/// @dev this function can only be called by a trusted issuer\n\tfunction addIdentity(address _identity, IIdentity identityData) external override isTrustedIssuer {\n       _addIdentity(_identity, identityData);\n    }\n\n\t/// @notice remove an identity from the registry\n\t/// @param _identity address of the identity contract\n\t/// @dev this function can only be called by a trusted issuer\n\tfunction removeIdentity(address _identity) external override isTrustedIssuer {\n        IdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n        Identity storage idObj = _contract._getIdentity(_identity);\n        require(idObj.identityData != IIdentity(address(0)), \"Identity does not exist\");\n        delete _contract.identities[_identity];\n        emit IdentityRemoved(_identity, idObj.identityData);\n    }\n\n\t/// @notice get the identity data contract address of an identity\n\t/// @param _userAddress address of the identity user\n\t/// @return identityData address of the identity data contract\n\tfunction identity(address _userAddress) external view override returns (IIdentity) {\n        IdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n        return _contract._getIdentity(_userAddress).identityData;\n    }\n\n\t/// @notice batch add identities to the registry\n\t/// @param _identities array of addresses of the identities\n\t/// @param identityDatas array of addresses of the identity data contracts\n\t/// @dev this function can only be called by a trusted issuer\n\tfunction batchAddIdentity(address[] calldata _identities, IIdentity[] calldata identityDatas) external override isTrustedIssuer {\n        require(_identities.length == identityDatas.length, \"Arrays length mismatch\");\n        for (uint256 i = 0; i < _identities.length; i++) {\n            _addIdentity(_identities[i], identityDatas[i]);\n        }\n\t}\n\n\t/// @notice add claim to an identity\n\t/// @param _identity address of the identity contract\n\t/// @param _claimTopic claim topic\n\t/// @param _claim claim data\n\t/// @dev this function can only be called by a trusted issuer\n\tfunction addClaim(address _identity, uint256 _claimTopic, bytes calldata _claim) external override isTrustedIssuer {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\tIdentity storage idObj = _contract._getIdentity(_identity);\n\t\trequire(!idObj.claimTopics[_claimTopic], \"Claim already exists\");\n\t\tidObj.claims[_claimTopic] = _claim;\n\t\tidObj.claimTopics[_claimTopic] = true;\n\t\temit ClaimAdded(_identity, _claimTopic, _claim);\n\t}\n\n\t/// @notice remove claim from an identity\n\t/// @param _identity address of the identity contract\n\t/// @param _claimTopic claim topic\n\t/// @dev this function can only be called by a trusted issuer\n\tfunction removeClaim(address _identity, uint256 _claimTopic) external override isTrustedIssuer {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\tIdentity storage idObj = _contract._getIdentity(_identity);\n\t\trequire(idObj.claimTopics[_claimTopic], \"Claim does not exist\");\n\t\tdelete idObj.claims[_claimTopic];\n\t\tdelete idObj.claimTopics[_claimTopic];\n\t\temit ClaimRemoved(_identity, _claimTopic);\n\t}\n\n\t/// @notice does an identity exist\n\t/// @param _userAddress address of the identity user\n\t/// @return bool\n\tfunction contains(address _userAddress) external view override returns (bool) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\treturn _contract._getIdentity(_userAddress).identityData != IIdentity(address(0));\n\t}\n\n\t/// @notice is an identity verified\n\t/// @param _userAddress address of the identity user\n\t/// @return bool\n\tfunction isVerified(address _userAddress) external view override returns (bool) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\treturn _contract._getIdentity(_userAddress).identityData.isVerified();\n\t}\n\n\t/// @notice get the users of the registry\n\t/// @return array of addresses of the users\n\tfunction getRegistryUsers() external view override returns (address[] memory) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\treturn _contract.identityOwners;\n\t}\n\n\t/// @notice is the user a registry user\n\t/// @param _registryUser address of the registry user\n\t/// @return bool\n\tfunction isRegistryUser(address _registryUser) external view override returns (bool) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\treturn _contract._getIdentity(_registryUser).identityData != IIdentity(address(0));\n\t}\n\n\t/// @notice get the claims of an identity\n\t/// @param _registryUser address of the registry user\n\t/// @return array of claim topics\n\tfunction getClaims(address _registryUser) external view override returns (uint256[] memory) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\tIdentity storage idObj = _contract._getIdentity(_registryUser);\n\t\tuint256[] memory claims = new uint256[](idObj.identityData.getClaimTopics().length);\n\t\tfor (uint256 i = 0; i < idObj.identityData.getClaimTopics().length; i++) {\n\t\t\tclaims[i] = idObj.identityData.getClaimTopics()[i];\n\t\t}\n\t\treturn claims;\n\t}\n\n\t/// @notice get the claim of an identity\n\t/// @param _registryUser address of the registry user\n\t/// @param _claimTopic claim topic\n\t/// @return claim data\n\tfunction getClaim(address _registryUser, uint256 _claimTopic) external view override returns (bytes memory) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\tIdentity storage idObj = _contract._getIdentity(_registryUser);\n\t\treturn idObj.claims[_claimTopic];\n\t}\n\n\t/// @notice does an identity have a claim\n\t/// @param _registryUser address of the registry user\n\t/// @param _claimTopic claim topic\n\t/// @return bool\n\tfunction hasClaim(address _registryUser, uint256 _claimTopic) external view override returns (bool) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\tIdentity storage idObj = _contract._getIdentity(_registryUser);\n\t\treturn idObj.claimTopics[_claimTopic];\n\t}\n\n\t/// @notice get the onchain ID of an identity\n\t/// @param _userAddress address of the registry user\n\t/// @return onchainID onchain ID\n\tfunction getOnchainIDFromWallet(address _userAddress) external view override returns (bytes32) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\treturn _contract.addressToOnchainID[_userAddress];\n\t}\n\n\t/// @notice is the wallet linked to an onchain ID\n\t/// @return bool\n\tfunction walletLinked(bytes32) external view override returns (bool) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\treturn _contract.identityAddresses.length > 0;\n\t}\n\n\t/// @notice get the wallet addresses of an onchain ID\n\t/// @param _onchainID onchain ID\n\t/// @dev this function can only be called by a trusted issuer\n\tfunction unlinkWallet(bytes32 _onchainID) external override isTrustedIssuer {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\trequire(_contract.identityAddresses.length > 0, \"No linked wallet\");\n\t\taddress _walletAddress = _contract.identityAddresses[_contract.identityAddresses.length - 1];\n\t\t_contract.addressToOnchainID[_walletAddress] = bytes32(0);\n\t\t_contract.identityAddresses.pop();\n\t\temit WalletUnlinked(_walletAddress, _onchainID);\n\t}\n\n\t/// @notice unlink a wallet address from an onchain ID\n\t/// @param _walletAddress address of the wallet\n\t/// @dev this function can only be called by a trusted issuer\n\tfunction unlinkWalletAddress(address _walletAddress) external override isTrustedIssuer {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\trequire(_contract.identityAddresses.length > 0, \"No linked wallet\");\n\t\tbytes32 _onchainID = _contract.addressToOnchainID[_walletAddress];\n\t\t_contract.addressToOnchainID[_walletAddress] = bytes32(0);\n\t\t_contract.identityAddresses.pop();\n\t\temit WalletUnlinked(_walletAddress, _onchainID);\n\t}\n\n\t/// @notice link a wallet address to an onchain ID\n\t/// @param _walletAddress address of the wallet\n\tfunction walletAddressLinked(address _walletAddress) external view override returns (bool) {\n\t\tIdentityContract storage _contract = IdentityLib.identityStorage().identityContract;\n\t\treturn _contract.addressToOnchainID[_walletAddress] != bytes32(0);\n\t}\n\n}\n"
    },
    "src/facets/TrustedIsssuersRegistryFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IClaimIssuer } from \"../interfaces/IClaimIssuer.sol\";\nimport { ITrustedIssuersRegistry } from \"../interfaces/ITrustedIssuersRegistry.sol\";\nimport { Modifiers } from \"../utilities/Modifiers.sol\";\n\nimport \"../libraries/TrustedIssuerLib.sol\";\n\ncontract TrustedIssuersRegistryFacet is ITrustedIssuersRegistry, Modifiers {\n\tusing TrustedIssuerLib for TrustedIssuerContract;\n\n\tfunction getTrustedIssuer(address issuerAddress) external view returns (TrustedIssuer memory) {\n\t\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\n\t\treturn _contract._getTrustedIssuer(issuerAddress);\n\t}\n\n\tfunction setTrustedIssuer(address issuerAddress, TrustedIssuer memory trustedIssuer) external {\n\t\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\n\t\t_contract._setTrustedIssuer(issuerAddress, trustedIssuer);\n\t}\n\n\tfunction addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external onlyOwner {\n\t\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\n\t\t_contract._addTrustedIssuer(_trustedIssuer, _claimTopics);\n\t}\n\n\tfunction removeTrustedIssuer(address _trustedIssuer) external onlyOwner {\n\t\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\n\t\t_contract.removeTrustedIssuer(_trustedIssuer);\n\t}\n\n\tfunction updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external {\n\t\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\n\t\t_contract.updateIssuerClaimTopics(_trustedIssuer, _claimTopics);\n\t}\n\n\tfunction getTrustedIssuers() external view override returns (TrustedIssuer[] memory) {\n\t\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\n\t\treturn _contract.getTrustedIssuers();\n\t}\n\n\tfunction isTrustedIssuer(address _issuer) external view override returns (bool) {\n\t\treturn TrustedIssuerLib.isTrustedIssuer(_issuer);\n\t}\n\n\tfunction getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns (uint[] memory) {\n\t\treturn TrustedIssuerLib.getTrustedIssuerClaimTopics(_trustedIssuer);\n\t}\n\n\tfunction hasClaimTopic(address _issuer, uint _claimTopic) external view override returns (bool) {\n\t\treturn TrustedIssuerLib.hasClaimTopic(_issuer, _claimTopic);\n\t}\n}\n"
    },
    "src/interfaces/IClaimIssuer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IIdentity.sol\";\n\nstruct Claim {\n    uint256 topic;\n    uint256 scheme;\n    address issuer;\n    bytes signature;\n    bytes data;\n    string uri;\n    bool isRemoved;\n}\n\ninterface IClaimIssuer is IIdentity {\n\n    event ClaimRevoked(bytes indexed signature);\n\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\n    function revokeClaimBySignature(bytes calldata signature) external;\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\n    function isClaimValid(\n        IIdentity _identity,\n        uint256 claimTopic,\n        bytes calldata sig,\n        bytes calldata data)\n    external view returns (bool);\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\n    \n}"
    },
    "src/interfaces/IClaimTopicsRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IClaimTopicsRegistry {\n\n    // events\n    event ClaimTopicAdded(uint256 indexed claimTopic);\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\n\n    // functions\n    // setters\n    function addClaimTopic(uint256 _claimTopic) external;\n    function removeClaimTopic(uint256 _claimTopic) external;\n\n    // getter\n    function getClaimTopics() external view returns (uint256[] memory);\n\n}"
    },
    "src/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\n/******************************************************************************\\\r\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\r\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\r\n/******************************************************************************/\r\n\r\ninterface IDiamondCut {\r\n    enum FacetCutAction {Add, Replace, Remove}\r\n    // Add=0, Replace=1, Remove=2\r\n\r\n    struct FacetCut {\r\n        address facetAddress;\r\n        FacetCutAction action;\r\n        bytes4[] functionSelectors;\r\n    }\r\n\r\n    /// @notice Add/replace/remove any number of functions and optionally execute\r\n    ///         a function with delegatecall\r\n    /// @param _diamondCut Contains the facet addresses and function selectors\r\n    /// @param _init The address of the contract or facet to execute _calldata\r\n    /// @param _calldata A function call, including function selector and arguments\r\n    ///                  _calldata is executed with delegatecall on _init\r\n    function diamondCut(\r\n        FacetCut[] calldata _diamondCut,\r\n        address _init,\r\n        bytes calldata _calldata\r\n    ) external;\r\n\r\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\r\n}\r\n"
    },
    "src/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\ninterface IERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceId The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceID` and\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/interfaces/IERC734.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport { IERC165 } from \"./IERC165.sol\";\n\ninterface IERC734 is IERC165 {\n    // events\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\n    event ExecutionRequested(\n        uint256 indexed executionId,\n        address indexed to,\n        uint256 indexed value,\n        bytes data\n    );\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\n    event Approved(uint256 indexed executionId, bool approved);\n\n    // functions\n    // setters\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\n    function removeKey(bytes32 _key, uint256 _purpose) external;\n    function approve(uint256 _id, bool _approve) external;\n\n    // getters\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\n}\n"
    },
    "src/interfaces/IERC735.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.16;\n\ninterface IERC735 {\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\n\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\n    function addClaim(uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (uint256 claimRequestId);\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\n    function removeClaim(bytes32 _claimId) external returns (bool success);\n}"
    },
    "src/interfaces/IIdentity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IERC734 } from \"./IERC734.sol\";\nimport { IERC735 } from \"./IERC735.sol\";\n\ninterface IIdentity is IERC734, IERC735 {\n    function isVerified() external view returns (bool);\n    function getClaimTopics() external view returns (uint256[] memory);\n}"
    },
    "src/interfaces/IIdentityRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport { IIdentity } from \"./IIdentity.sol\";\n\ninterface IIdentityRegistry {\n    // events\n    event IdentityAdded(address indexed _address, IIdentity identity);\n    event IdentityRemoved(address indexed _address, IIdentity identity);\n    event IdentityCountryUpdated(address indexed identity, uint16 indexed country);\n    event ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim);\n    event ClaimRemoved(address indexed identity, uint256 indexed claimTopic);\n    event WalletLinked(address indexed walletAddress, bytes32 indexed onchainID);\n    event WalletUnlinked(address indexed walletAddress, bytes32 indexed onchainID);\n\n    // functions\n    function addIdentity(address _identity, IIdentity identityData) external;\n    function batchAddIdentity(address[] calldata _identities, IIdentity[] calldata identityDatas) external;\n    function removeIdentity(address _identity) external;\n    function addClaim(address _identity, uint256 _claimTopic, bytes calldata _claim) external;\n    function removeClaim(address _identity, uint256 _claimTopic) external;\n\n    // registry consultation\n    function contains(address _userAddress) external view returns (bool);\n    function isVerified(address _userAddress) external view returns (bool);\n    function identity(address _userAddress) external view returns (IIdentity);\n\n    // getters\n    function getRegistryUsers() external view returns (address[] memory);\n    function isRegistryUser(address _registryUser) external view returns(bool);\n    function getClaims(address _registryUser) external view returns(uint256[] memory);\n    function getClaim(address _registryUser, uint256 _claimTopic) external view returns(bytes memory);\n    function hasClaim(address _registryUser, uint256 _claimTopic) external view returns(bool);\n\n    function getOnchainIDFromWallet(address _userAddress) external view returns (bytes32);\n    function walletLinked(bytes32 _onchainID) external view returns (bool);\n    function unlinkWallet(bytes32 _onchainID) external;\n    function unlinkWalletAddress(address _walletAddress) external;\n    function walletAddressLinked(address _walletAddress) external view returns (bool);\n}"
    },
    "src/interfaces/ITrustedIssuersRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IClaimIssuer } from \"./IClaimIssuer.sol\";\n\nstruct TrustedIssuer {\n    address claimIssuer;\n    uint[] claimTopics;\n}\n\ninterface ITrustedIssuersRegistry {\n\n    // events\n    event TrustedIssuerAdded(address indexed trustedIssuer, uint[] claimTopics);\n    event TrustedIssuerRemoved(address indexed trustedIssuer);\n    event ClaimTopicsUpdated(address indexed trustedIssuer, uint[] claimTopics);\n\n    // functions\n    // setters\n    function addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external;\n    function removeTrustedIssuer(address _trustedIssuer) external;\n    function updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external;\n\n    // getters\n    function getTrustedIssuers() external view returns (TrustedIssuer[] memory);\n    function isTrustedIssuer(address _issuer) external view returns(bool);\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory);\n    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\n\n}"
    },
    "src/libraries/ClaimTopicLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IClaimTopicsRegistry.sol\";\n\nstruct ClaimTopicContract {\n    uint256[] claimTopics;\n}\n\nstruct ClaimTopicStorage {\n    ClaimTopicContract _contract;\n    address owner;\n}\n\nlibrary ClaimTopicLib {\n\n    event ClaimTopicAdded(uint256 indexed claimTopic);\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\n\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = \n        keccak256(\"diamond.standard.claimTopics.facet.contract\");\n\n    function claimTopicStorage() internal pure returns (ClaimTopicStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function addClaimTopic(\n        ClaimTopicContract storage self,\n        uint256 _claimTopic\n    ) internal {\n        self.claimTopics.push(_claimTopic);\n        emit ClaimTopicAdded(_claimTopic);\n    }\n\n    function removeClaimTopic(\n        ClaimTopicContract storage self,\n        uint256 _claimTopic\n    ) internal {\n        for (uint256 i; i < self.claimTopics.length; i++) {\n            if (self.claimTopics[i] == _claimTopic) {\n                self.claimTopics[i] = self.claimTopics[self.claimTopics.length - 1];\n                self.claimTopics.pop();\n                emit ClaimTopicRemoved(_claimTopic);\n                return;\n            }\n        }\n        revert(\"Claim topic not found.\");\n    }\n\n    function getClaimTopics(ClaimTopicContract storage self) internal view returns (uint256[] memory) {\n        return self.claimTopics;\n    }\n}\n"
    },
    "src/libraries/IdentityLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.2;\n\nimport {IIdentity} from \"../interfaces/IIdentity.sol\";\nimport {IIdentityRegistry} from \"../interfaces/IIdentityRegistry.sol\";\n\nstruct Identity {\n    IIdentity identityData;\n    uint16 country;\n    mapping(uint256 => bytes) claims;\n    mapping(uint256 => bool) claimTopics;\n}\n\nstruct IdentityContract {\n    mapping(address => Identity) identities;\n    address[] identityOwners;\n    address[] identityAddresses;\n    mapping(address => bytes32) addressToOnchainID;\n}\n\nstruct IdentityStorage {\n    IdentityContract identityContract;\n}\n\nlibrary IdentityLib {\n\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.nomyx.IdentityRegistryFacet.IdentityStorage\");\n\n    event IdentityAdded(address indexed _address, IIdentity identity);\n    event IdentityRemoved(address indexed _address, IIdentity identity);\n\n    function identityStorage() internal pure returns (IdentityStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    /// @notice get an Identity for an address\n    function _getIdentity(\n        IdentityContract storage,\n        address _identityAddress\n    ) internal view returns (Identity storage) {\n        return identityStorage().identityContract.identities[_identityAddress];\n    }\n\n    /// @notice set an Identity for a tokenid keyed by string\n    function _setIdentity(\n        IdentityContract storage self,\n        address _identityAddress,\n        Identity storage identity\n    ) internal {\n        self.identities[_identityAddress].identityData = identity.identityData;\n        self.identities[_identityAddress].country = identity.country;\n        self.identityAddresses.push(_identityAddress);\n        emit IdentityAdded(_identityAddress, identity.identityData);\n    }\n\n    /// @notice remove an Identity for an address\n    function _removeIdentity(\n        IdentityContract storage self,\n        address _identityAddress\n    ) internal {\n        delete self.identities[_identityAddress];\n        \n        uint256 index;\n        for (uint256 i = 0; i < self.identityAddresses.length; i++) {\n            if (self.identityAddresses[i] == _identityAddress) {\n                index = i;\n                break;\n            }\n        }\n        if (index != self.identityAddresses.length - 1) {\n            self.identityAddresses[index] = self.identityAddresses[self.identityAddresses.length - 1];\n        }\n        self.identityAddresses.pop();\n        emit IdentityRemoved(_identityAddress, self.identities[_identityAddress].identityData);\n    }\n\n}\n"
    },
    "src/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport { IDiamondCut } from \"../interfaces/IDiamondCut.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        //require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();        \n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);            \n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }    \n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    },
    "src/libraries/TrustedIssuerLib.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IClaimIssuer } from \"../interfaces/IClaimIssuer.sol\";\nimport { ITrustedIssuersRegistry, TrustedIssuer } from \"../interfaces/ITrustedIssuersRegistry.sol\";\n\nstruct TrustedIssuerContract {\n    mapping(address => TrustedIssuer) trustedIssuers;\n    address[] trustedIssuerAddresses;\n    address owner;\n}\n\nstruct TrustedIssuerStorage {\n    TrustedIssuerContract trustedIssuerContract;\n}\n\n/// \nlibrary TrustedIssuerLib {\n\n    event TrustedIssuerUpdated(address indexed issuerAddress, TrustedIssuer trustedIssuer);\n\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.nomyx.lenderlabs.TrustedIssuerStorage.storage\");\n\n    /// @notice Get the storage struct for the TrustedIssuerRegistry\n    /// @return ds TrustedIssuerStorage struct for the TrustedIssuerRegistry\n    function trustedIssuerStorage() internal pure returns (TrustedIssuerStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    /// @notice Get the trusted issuer struct given the trusted issuer address \n    /// @param issuerAddress The address of the trusted issuer\n    /// @return trustedIssuer The trusted issuer struct\n    function _getTrustedIssuer(\n        TrustedIssuerContract storage,\n        address issuerAddress\n    ) internal view returns (TrustedIssuer memory trustedIssuer) {\n        return trustedIssuerStorage().trustedIssuerContract.trustedIssuers[issuerAddress];\n    }\n\n    /// @notice Set the trusted issuer struct given the trusted issuer address\n    /// @param self The TrustedIssuerContract storage struct\n    /// @param issuerAddress The address of the trusted issuer\n    /// @param trustedIssuer The trusted issuer struct\n    function _setTrustedIssuer(\n        TrustedIssuerContract storage self,\n        address issuerAddress,\n        TrustedIssuer memory trustedIssuer\n    ) internal {\n        if(self.trustedIssuers[issuerAddress].claimIssuer == address(0)) {\n            self.trustedIssuerAddresses.push(issuerAddress);\n        }\n        self.trustedIssuers[issuerAddress] = trustedIssuer; \n        emit TrustedIssuerUpdated(issuerAddress, trustedIssuer);\n    }\n\n    /// @notice Add a trusted issuer\n    /// @param _trustedIssuer The address of the trusted issuer\n    /// @param _claimTopics The claim topics that the trusted issuer is allowed to issue\n    function _addTrustedIssuer(\n        TrustedIssuerContract storage,\n        address _trustedIssuer, \n        uint[] calldata _claimTopics) internal {\n\n        TrustedIssuer memory trustedIssuer = TrustedIssuer({\n            claimIssuer: _trustedIssuer,\n            claimTopics: _claimTopics\n        });\n\n        _setTrustedIssuer(\n            trustedIssuerStorage().trustedIssuerContract,\n            address(_trustedIssuer),\n            trustedIssuer\n        );\n    }\n\n    /// @notice Remove a trusted issuer\n    /// @param self The TrustedIssuerContract storage struct\n    /// @param _trustedIssuer The address of the trusted issuer\n    function removeTrustedIssuer(TrustedIssuerContract storage self, address _trustedIssuer) internal {\n        delete self.trustedIssuers[address(_trustedIssuer)];\n    }\n\n    /// @notice Update the claim topics that a trusted issuer is allowed to issue\n    /// @param self The TrustedIssuerContract storage struct\n    /// @param _trustedIssuer The address of the trusted issuer\n    /// @param _claimTopics The claim topics that the trusted issuer is allowed to issue\n    function updateIssuerClaimTopics(TrustedIssuerContract storage self, address _trustedIssuer, uint[] calldata _claimTopics) internal {\n        TrustedIssuer memory trustedIssuer = _getTrustedIssuer(\n            self,\n            address(_trustedIssuer)\n        );\n        trustedIssuer.claimTopics = _claimTopics;\n        _setTrustedIssuer(\n            self,\n            address(_trustedIssuer),\n            trustedIssuer\n        );\n    }\n\n    /// @notice Get the trusted issuers\n    /// @param self The TrustedIssuerContract storage struct\n    /// @return trustedIssuers The trusted issuers\n    function getTrustedIssuers(TrustedIssuerContract storage self) internal view  returns (TrustedIssuer[] memory trustedIssuers) {\n        trustedIssuers = new TrustedIssuer[](self.trustedIssuerAddresses.length);\n        for (uint i = 0; i < self.trustedIssuerAddresses.length; i++) {\n            trustedIssuers[i] = self.trustedIssuers[self.trustedIssuerAddresses[i]];\n        }\n    }\n\n    /// @notice is the issuer trusted\n    /// @param _issuer The address of the issuer\n    /// @return isTrusted True if the issuer is trusted\n    function isTrustedIssuer(address _issuer) internal view returns(bool isTrusted) {\n        isTrusted = trustedIssuerStorage().trustedIssuerContract.trustedIssuers[_issuer].claimIssuer != address(0);\n    }\n\n    /// @notice Get the trusted issuer\n    /// @param _trustedIssuer The trusted issuer\n    /// @return trustedIssuer The trusted issuer\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory) {\n        return trustedIssuerStorage().trustedIssuerContract.trustedIssuers[address(_trustedIssuer)].claimTopics;\n    }\n\n    /// @notice Does this issuer have this claim topic\n    /// @param _issuer The address of the issuer\n    /// @param _claimTopic The claim topic\n    /// @return hasTopic True if the issuer has this claim topic\n    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool hasTopic) {\n        uint[] memory claimTopics = trustedIssuerStorage().trustedIssuerContract.trustedIssuers[_issuer].claimTopics;\n        for (uint i = 0; i < claimTopics.length; i++) {\n            if (claimTopics[i] == _claimTopic) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "src/utilities/Modifiers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"../libraries/LibDiamond.sol\";\n\ncontract Modifiers {\n\n    modifier onlyOwner() {\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender,\n            \"not authorized to call function\");\n        _;\n    }\n\n    // function owner() public view returns (address) {\n    //     return LibDiamond.contractOwner();\n    // }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 2000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}