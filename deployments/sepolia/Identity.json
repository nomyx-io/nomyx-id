{
  "address": "0x6f53C20F95F4Bb02dda5E2b6256129B05C100211",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "ClaimAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "ClaimChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "claimId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "ClaimRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimRequestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "ClaimRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ExecutionFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ExecutionRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purpose",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "keyType",
          "type": "uint256"
        }
      ],
      "name": "KeyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purpose",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "keyType",
          "type": "uint256"
        }
      ],
      "name": "KeyRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_topic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_scheme",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "addClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimRequestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_keyType",
          "type": "uint256"
        }
      ],
      "name": "addKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_approve",
          "type": "bool"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "changeClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "executionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "getClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "topic",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scheme",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_topic",
          "type": "uint256"
        }
      ],
      "name": "getClaimIdsByTopic",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "claimIds_",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimTopics",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getExecution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getKey",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "purposes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "keyType",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        }
      ],
      "name": "getKeyPurposes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_purposes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        }
      ],
      "name": "getKeysByPurpose",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "_keys",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_identityRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedIssuerRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        }
      ],
      "name": "keyHasPurpose",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_claimId",
          "type": "bytes32"
        }
      ],
      "name": "removeClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_purpose",
          "type": "uint256"
        }
      ],
      "name": "removeKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xc8a1b7e4f1d18b946484af702c8bde7fc39053740226386c7c604c23cb9519ca",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0x6f53C20F95F4Bb02dda5E2b6256129B05C100211",
    "transactionIndex": 38,
    "gasUsed": "2027741",
    "logsBloom": "0x
    "blockHash": "0xd0d3b49a1fec0624d1fa2bfbe0f283b888b56ee320d86f6f4330ab1d3a997965",
    "transactionHash": "0xc8a1b7e4f1d18b946484af702c8bde7fc39053740226386c7c604c23cb9519ca",
    "logs": [],
    "blockNumber": 3879440,
    "cumulativeGasUsed": "10782578",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "484eba28627d1a62f03f1e15ade25543",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"claimId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimRequestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"ClaimRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExecutionRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purpose\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"}],\"name\":\"KeyRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"addClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimRequestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_keyType\",\"type\":\"uint256\"}],\"name\":\"addKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"changeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"executionId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"getClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scheme\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"}],\"name\":\"getClaimIdsByTopic\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"claimIds_\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getExecution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"purposes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"keyType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"}],\"name\":\"getKeyPurposes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purposes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"getKeysByPurpose\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_keys\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_identityRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedIssuerRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"keyHasPurpose\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_claimId\",\"type\":\"bytes32\"}],\"name\":\"removeClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_purpose\",\"type\":\"uint256\"}],\"name\":\"removeKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used to store the claims of a user\",\"kind\":\"dev\",\"methods\":{\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"initialize(address,address,address)\":{\"params\":{\"_identityRegistry\":\"the identity registry\",\"_owner\":\"the owner of the contract\",\"_trustedIssuerRegistry\":\"the trusted issuer registry\"}},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise\"}}},\"title\":\"Identity\",\"version\":1},\"userdoc\":{\"events\":{\"ControllerAdded(address,address)\":{\"notice\":\"emitted when a controller is added.\"},\"ControllerRemoved(address,address)\":{\"notice\":\"emitted when a controller is removed.\"}},\"kind\":\"user\",\"methods\":{\"initialize(address,address,address)\":{\"notice\":\"initialize the contract\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"notice\":\"This contract represents an identity of a user\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/identity/Identity.sol\":\"Identity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"src/identity/Identity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IIdentity } from \\\"../interfaces/IIdentity.sol\\\";\\nimport { Controllable } from \\\"../utilities/Controllable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport { ITrustedIssuersRegistry } from \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\n\\n/// @title Identity\\n/// @notice This contract represents an identity of a user\\n/// @dev This contract is used to store the claims of a user\\ncontract Identity is IIdentity, Controllable, Initializable {\\n\\t\\n\\tmapping(bytes32 => Key) keys;\\n\\tmapping(uint256 => bytes32[]) keysByPurpose;\\n\\n\\taddress identityRegistry;\\n\\taddress trustedIssuerRegistry;\\n\\n\\tmodifier onlyTrustedIssuer() {\\n\\t\\trequire(\\n\\t\\t\\tITrustedIssuersRegistry(trustedIssuerRegistry).isTrustedIssuer(msg.sender),\\n\\t\\t\\t\\\"Sender is not a trusted issuer\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * initialize the contract\\n\\t * @param _owner the owner of the contract\\n\\t * @param _identityRegistry the identity registry\\n\\t * @param _trustedIssuerRegistry the trusted issuer registry\\n\\t */\\n\\tfunction initialize(address _owner, address _identityRegistry, address _trustedIssuerRegistry) external initializer {\\n\\t\\t_addController(_owner);\\n\\t\\tidentityRegistry = _identityRegistry;\\n\\t\\ttrustedIssuerRegistry = _trustedIssuerRegistry;\\n\\t}\\n\\n\\tstruct Key {\\n\\t\\tuint256[] purposes;\\n\\t\\tuint256 keyType;\\n\\t\\tbytes32 key;\\n\\t}\\n\\n\\tfunction addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external override onlyTrustedIssuer {\\n\\t\\trequire(keys[_key].key != _key, \\\"Key already exists\\\");\\n\\n\\t\\tkeys[_key].key = _key;\\n\\t\\tkeys[_key].purposes.push(_purpose);\\n\\t\\tkeys[_key].keyType = _keyType;\\n\\n\\t\\tkeysByPurpose[_purpose].push(_key);\\n\\n\\t\\temit KeyAdded(_key, _purpose, _keyType);\\n\\t}\\n\\n\\tfunction removeKey(bytes32 _key, uint256 _purpose) external override onlyTrustedIssuer {\\n\\t\\trequire(keys[_key].key == _key, \\\"No such key\\\");\\n\\t\\tfor (uint i = 0; i < keys[_key].purposes.length; i++) {\\n\\t\\t\\tif (keys[_key].purposes[i] == _purpose) {\\n\\t\\t\\t\\tdelete keys[_key].purposes[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\temit KeyRemoved(_key, _purpose, keys[_key].keyType);\\n\\n\\t\\tdelete keys[_key];\\n\\t}\\n\\n\\tfunction getKey(\\n\\t\\tbytes32 _key\\n\\t) external view override returns (uint256[] memory purposes, uint256 keyType, bytes32 key) {\\n\\t\\treturn (keys[_key].purposes, keys[_key].keyType, keys[_key].key);\\n\\t}\\n\\n\\tfunction getKeyPurposes(bytes32 _key) external view override returns (uint256[] memory _purposes) {\\n\\t\\treturn (keys[_key].purposes);\\n\\t}\\n\\n\\tfunction getKeysByPurpose(uint256 _purpose) external view override returns (bytes32[] memory _keys) {\\n\\t\\treturn (keysByPurpose[_purpose]);\\n\\t}\\n\\n\\tfunction _keyHasPurpose(bytes32 _key, uint256 _purpose) internal view returns (bool exists) {\\n\\t\\tif (keys[_key].key == 0) return false;\\n\\t\\tfor (uint i = 0; i < keys[_key].purposes.length; i++) {\\n\\t\\t\\tif (keys[_key].purposes[i] == _purpose) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction keyHasPurpose(bytes32 _key, uint256 _purpose) external view returns (bool exists) {\\n\\t\\treturn _keyHasPurpose(_key, _purpose);\\n\\t}\\n\\n\\tfunction execute(address _to, uint256 _value, bytes calldata _data) external payable onlyTrustedIssuer returns (uint256 executionId) {\\n\\t\\trequire(_keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), 1), \\\"Sender does not have rights\\\");\\n\\t\\t(bool success, ) = _to.call{value: _value}(_data);\\n\\t\\tif (success) {\\n\\t\\t\\temit Executed(executionId, _to, _value, _data);\\n\\t\\t} else {\\n\\t\\t\\temit ExecutionFailed(executionId, _to, _value, _data);\\n\\t\\t}\\n\\t\\treturn executionId;\\n\\t}\\n\\n\\tfunction approve(uint256 _id, bool _approve) external override onlyTrustedIssuer {\\n\\t\\trequire(_keyHasPurpose(keccak256(abi.encodePacked(msg.sender)), 2), \\\"Sender does not have rights\\\");\\n\\t\\tif (_approve) {\\n\\t\\t\\temit Approved(_id, true);\\n\\t\\t} else {\\n\\t\\t\\temit Approved(_id, false);\\n\\t\\t}\\n\\t}\\n\\n\\tstruct Claim {\\n\\t\\tuint256 topic;\\n\\t\\tuint256 scheme;\\n\\t\\taddress issuer;\\n\\t\\tbytes signature;\\n\\t\\tbytes data;\\n\\t\\tstring uri;\\n\\t}\\n\\n\\tmapping(bytes32 => Claim) internal claims;\\n\\tbytes32[] internal claimIds;\\n\\n\\tmapping(uint256 => bytes32[]) internal claimsByTopic;\\n\\tbytes32[] internal claimTopics;\\n\\n\\tfunction getClaim(bytes32 _claimId)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (\\n\\t\\t\\tuint256 topic,\\n\\t\\t\\tuint256 scheme,\\n\\t\\t\\taddress issuer,\\n\\t\\t\\tbytes memory signature,\\n\\t\\t\\tbytes memory data,\\n\\t\\t\\tstring memory uri\\n\\t\\t) {\\n\\t\\tClaim storage claim = claims[_claimId];\\n\\t\\treturn (claim.topic, claim.scheme, claim.issuer, claim.signature, claim.data, claim.uri);\\n\\t}\\n\\n\\tfunction getClaimIdsByTopic(uint256 _topic) external view override returns (bytes32[] memory claimIds_) {\\n\\t\\tclaimIds_ = claimsByTopic[_topic];\\n\\t}\\n\\n\\tfunction addClaim(\\n\\t\\tuint256 _topic,\\n\\t\\tuint256 _scheme,\\n\\t\\taddress _issuer,\\n\\t\\tbytes memory _signature,\\n\\t\\tbytes memory _data,\\n\\t\\tstring memory _uri\\n\\t) external override onlyTrustedIssuer returns (uint256 claimRequestId) {\\n\\n\\t\\tbytes32 claimId = keccak256(abi.encodePacked(_issuer, _topic));\\n\\n\\t\\tClaim storage claim = claims[claimId];\\n\\t\\tclaim.topic = _topic;\\n\\t\\tclaim.scheme = _scheme;\\n\\t\\tclaim.issuer = _issuer;\\n\\t\\tclaim.signature = _signature;\\n\\t\\tclaim.data = _data;\\n\\t\\tclaim.uri = _uri;\\n\\n\\t\\tclaimsByTopic[_topic].push(claimId);\\n\\t\\tclaimTopics.push(claimId);\\n\\n\\t\\tclaims[claimId] = claim;\\n\\t\\tclaimIds.push(claimId);\\n\\n\\t\\temit ClaimAdded(claimId, _topic, _scheme, _issuer, _signature, _data, _uri);\\n\\n\\t\\treturn _topic;\\n\\t}\\n\\n\\tfunction changeClaim(\\n\\t\\tbytes32,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\taddress,\\n\\t\\tbytes memory,\\n\\t\\tbytes memory,\\n\\t\\tstring memory\\n\\t) external pure override returns (bool) {\\n\\t\\trequire(false, \\\"Not implemented\\\");\\n\\t}\\n\\n\\tfunction removeClaim(bytes32 _claimId) external override onlyTrustedIssuer returns (bool success) {\\n\\t\\tClaim storage claim = claims[_claimId];\\n\\t\\trequire(claim.issuer != address(0), \\\"Claim does not exist\\\");\\n\\t\\tdelete claims[_claimId];\\n\\t\\temit ClaimRemoved(_claimId, claim.topic, claim.scheme, claim.issuer, claim.signature, claim.data, claim.uri);\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n\\t\\treturn interfaceId == type(IIdentity).interfaceId;\\n\\t}\\n\\n\\tfunction getExecution(\\n\\t\\tuint256\\n\\t)\\n\\t\\texternal\\n\\t\\tpure\\n\\t\\toverride\\n\\t\\treturns (address, uint256, bytes memory, bool, uint256)\\n\\t{\\n\\t\\trequire(false, \\\"Not implemented\\\");\\n\\t}\\n\\n\\t function getClaimTopics() external view override returns (uint256[] memory) {\\n\\t\\t uint256[] memory _claimTopics = new uint256[](claimTopics.length);\\n\\t\\t for (uint256 i = 0; i < claimTopics.length; i++) {\\n\\t\\t\\t _claimTopics[i] = claims[claimTopics[i]].topic;\\n\\t\\t }\\n\\t\\t return _claimTopics;\\n\\t }\\n\\n\\t function isVerified() external view returns (bool) {}\\n}\",\"keccak256\":\"0xf6d28fedf150e696278969dee732f36d933b40cc1021d6de802d0695f35d6236\",\"license\":\"MIT\"},\"src/interfaces/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n    bool isRemoved;\\n}\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n    \\n}\",\"keccak256\":\"0xf94927c44289cafe7442ff3e69f6949f3f97ab784a27b0b5d79f3757da7f1dd8\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\\r\\ninterface IControllable {\\r\\n\\r\\n    /// @notice emitted when a controller is added.\\r\\n    event ControllerAdded(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice emitted when a controller is removed.\\r\\n    event ControllerRemoved(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice adds a controller.\\r\\n    /// @param controller the controller to add.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    /// @notice removes a controller.\\r\\n    /// @param controller the address to check\\r\\n    /// @return true if the address is a controller\\r\\n    function isController(address controller) external view returns (bool);\\r\\n\\r\\n    /// @notice remove ourselves from the list of controllers.\\r\\n    function relinquishControl() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x15f5c4f8732a9caffb811a8ebf9aeba41a108e58634607c0700a46a891edf2ec\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"src/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"src/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(\\n        uint256 _topic, \\n        uint256 _scheme, \\n        address _issuer, \\n        bytes memory _signature, \\n        bytes memory _data, \\n        string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\\n\\n/*\\nHow IdentityRegistry works:\\n\\n1. User creates an Identity contract\\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\\n\\n*/\",\"keccak256\":\"0xd9696a4c45abd2c8e0cc7cd8f02bd18612d0dcb0c573c928ab225de624c01d92\",\"license\":\"MIT\"},\"src/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"src/interfaces/ITrustedIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"./IClaimIssuer.sol\\\";\\n\\nstruct TrustedIssuer {\\n    address claimIssuer;\\n    uint[] claimTopics;\\n}\\n\\ninterface ITrustedIssuersRegistry {\\n\\n    // events\\n    event TrustedIssuerAdded(address indexed trustedIssuer, uint[] claimTopics);\\n    event TrustedIssuerRemoved(address indexed trustedIssuer);\\n    event ClaimTopicsUpdated(address indexed trustedIssuer, uint[] claimTopics);\\n\\n    // functions\\n    // setters\\n    function addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n    function removeTrustedIssuer(address _trustedIssuer) external;\\n    function updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n\\n    // getters\\n    function getTrustedIssuers() external view returns (TrustedIssuer[] memory);\\n    function isTrustedIssuer(address _issuer) external view returns(bool);\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory);\\n    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\\n\\n}\",\"keccak256\":\"0xec92af21e4a22ca0a3f643399fb2da26b898aa7c0b70bc59819e49935dcc21ad\",\"license\":\"MIT\"},\"src/utilities/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IControllable.sol\\\";\\r\\n\\r\\nabstract contract Controllable is IControllable {\\r\\n    mapping(address => bool) internal _controllers;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account not in authorized list\\r\\n     */\\r\\n    modifier onlyController() virtual {\\r\\n        require(\\r\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\r\\n            \\\"caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add an address allowed to control this contract\\r\\n     */\\r\\n    function addController(address _controller)\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n    {\\r\\n        _addController(_controller);\\r\\n    }\\r\\n    function _addController(address _controller) internal {\\r\\n        _controllers[_controller] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if this address is a controller\\r\\n     */\\r\\n    function isController(address _address)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _isController(_address);\\r\\n    }\\r\\n    function _isController(address _address)\\r\\n        internal view\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _controllers[_address];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove the sender address from the list of controllers\\r\\n     */\\r\\n    function relinquishControl() external override onlyController {\\r\\n        _relinquishControl();\\r\\n    }\\r\\n    function _relinquishControl() internal onlyController{\\r\\n        delete _controllers[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8ecd3dbef92020332fa9e63f82871d6832e55ed630818f223784c73d6fe23fd2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506123c2806100206000396000f3fe60806040526004361061016a5760003560e01c8063b1a34e0d116100cb578063d202158d1161007f578063e1c28bef11610059578063e1c28bef1461042d578063e326fbd414610442578063fb307b341461047357600080fd5b8063d202158d146103cb578063db6a20a5146103eb578063df09d6041461040b57600080fd5b8063b61d27f6116100b0578063b61d27f614610366578063c0c53b8b14610379578063c9100bcb1461039957600080fd5b8063b1a34e0d14610318578063b429afeb1461034657600080fd5b8063747442d31161012257806380e9e9e11161010757806380e9e9e1146102ab5780639010f726146102d8578063a7fc7a07146102f857600080fd5b8063747442d31461027757806380007e831461029757600080fd5b80631d381240116101535780631d381240146102155780634eee424a1461023757806353d413c51461025757600080fd5b806301ffc9a71461016f57806312aaac70146101e6575b600080fd5b34801561017b57600080fd5b506101d161018a366004611a4d565b7fffffffff00000000000000000000000000000000000000000000000000000000167f5f09a887000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b3480156101f257600080fd5b50610206610201366004611a8f565b610493565b6040516101dd93929190611ae3565b34801561022157600080fd5b50610235610230366004611b08565b61050f565b005b34801561024357600080fd5b506101d1610252366004611a8f565b6106ab565b34801561026357600080fd5b50610235610272366004611b34565b61089a565b34801561028357600080fd5b50610235610292366004611b64565b610aa9565b3480156102a357600080fd5b5060006101d1565b3480156102b757600080fd5b506102cb6102c6366004611a8f565b610c60565b6040516101dd9190611b94565b3480156102e457600080fd5b506102cb6102f3366004611a8f565b610cc2565b34801561030457600080fd5b50610235610313366004611bef565b610d22565b34801561032457600080fd5b50610338610333366004611cad565b610dbb565b6040519081526020016101dd565b34801561035257600080fd5b506101d1610361366004611bef565b611091565b610338610374366004611d58565b6110b4565b34801561038557600080fd5b50610235610394366004611ddf565b6112fa565b3480156103a557600080fd5b506103b96103b4366004611a8f565b611474565b6040516101dd96959493929190611e68565b3480156103d757600080fd5b506101d16103e6366004611b34565b61167d565b3480156103f757600080fd5b506101d1610406366004611ec9565b611690565b34801561041757600080fd5b506104206116db565b6040516101dd9190611f7f565b34801561043957600080fd5b5061023561179e565b34801561044e57600080fd5b5061046261045d366004611a8f565b611816565b6040516101dd959493929190611f92565b34801561047f57600080fd5b5061042061048e366004611a8f565b611867565b6000818152600260208181526040808420600181015493810154815483518186028101860190945280845260609695869593949093909185918301828280156104fb57602002820191906000526020600020905b8154815260200190600101908083116104e7575b505050505092509250925092509193909250565b600554604051633bcbb46960e21b81523360048201526001600160a01b039091169063ef2ed1a490602401602060405180830381865afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611fce565b6105cc5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064015b60405180910390fd5b6000838152600260208190526040909120015483900361062e5760405162461bcd60e51b815260206004820152601260248201527f4b657920616c726561647920657869737473000000000000000000000000000060448201526064016105c3565b600083815260026020818152604080842092830187905582546001818101855584865283862090910187905592830185905585845260038252808420805493840181558452908320909101859055518291849186917f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e991a4505050565b600554604051633bcbb46960e21b81523360048201526000916001600160a01b03169063ef2ed1a490602401602060405180830381865afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190611fce565b6107645760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b600082815260066020526040902060028101546001600160a01b03166107cc5760405162461bcd60e51b815260206004820152601460248201527f436c61696d20646f6573206e6f7420657869737400000000000000000000000060448201526064016105c3565b60008381526006602052604081208181556001810182905560028101805473ffffffffffffffffffffffffffffffffffffffff191690559061081160038301826119e0565b61081f6004830160006119e0565b61082d6005830160006119e0565b50506002810154815460018301546040516001600160a01b039093169286917f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a9161088791906003880190600489019060058a019061209c565b60405180910390a460019150505b919050565b600554604051633bcbb46960e21b81523360048201526001600160a01b039091169063ef2ed1a490602401602060405180830381865afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611fce565b6109525760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b6000828152600260208190526040909120015482146109b35760405162461bcd60e51b815260206004820152600b60248201527f4e6f2073756368206b657900000000000000000000000000000000000000000060448201526064016105c3565b60005b600083815260026020526040902054811015610a3d5760008381526002602052604090208054839190839081106109ef576109ef6120e6565b906000526020600020015403610a2b576000838152600260205260409020805482908110610a1f57610a1f6120e6565b60009182526020822001555b80610a35816120fc565b9150506109b6565b506000828152600260205260408082206001015490519091839185917f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339791a4600082815260026020526040812090610a958282611a1a565b506000600182018190556002909101555050565b600554604051633bcbb46960e21b81523360048201526001600160a01b039091169063ef2ed1a490602401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190611fce565b610b615760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b6040516bffffffffffffffffffffffff193360601b166020820152610ba0906034016040516020818303038152906040528051906020012060026118c7565b610bec5760405162461bcd60e51b815260206004820152601b60248201527f53656e64657220646f6573206e6f74206861766520726967687473000000000060448201526064016105c3565b8015610c2d576040516001815282907fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d8906020015b60405180910390a25050565b6040516000815282907fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d890602001610c21565b600081815260086020908152604091829020805483518184028101840190945280845260609392830182828015610cb657602002820191906000526020600020905b815481526020019060010190808311610ca2575b50505050509050919050565b600081815260036020908152604091829020805483518184028101840190945280845260609392830182828015610cb65760200282019190600052602060002090815481526020019060010190808311610ca25750505050509050919050565b3360009081526020819052604090205460ff16151560011480610d4457503033145b610d905760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064016105c3565b610db8816001600160a01b03166000908152602081905260409020805460ff19166001179055565b50565b600554604051633bcbb46960e21b81523360048201526000916001600160a01b03169063ef2ed1a490602401602060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e289190611fce565b610e745760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b6040516bffffffffffffffffffffffff19606087901b1660208201526034810188905260009060540160408051808303601f1901815291815281516020928301206000818152600690935291208981556001810189905560028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a1617905590915060038101610f068782612173565b5060048101610f158682612173565b5060058101610f248582612173565b50600089815260086020908152604080832080546001818101835591855283852001869055600980548083019091557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018690558584526006909252909120825481558282015491810191909155600280830154908201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790558190600380820190610fd990840182612233565b50600481810190610fec90840182612233565b50600581810190610fff90840182612233565b5050600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801839055506040516001600160a01b038816908a9084907f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c59061107c908d908c908c908c9061230e565b60405180910390a45096979650505050505050565b6001600160a01b03811660009081526020819052604081205460ff165b92915050565b600554604051633bcbb46960e21b81523360048201526000916001600160a01b03169063ef2ed1a490602401602060405180830381865afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190611fce565b61116d5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b6040516bffffffffffffffffffffffff193360601b1660208201526111ac906034016040516020818303038152906040528051906020012060016118c7565b6111f85760405162461bcd60e51b815260206004820152601b60248201527f53656e64657220646f6573206e6f74206861766520726967687473000000000060448201526064016105c3565b6000856001600160a01b031685858560405161121592919061234d565b60006040518083038185875af1925050503d8060008114611252576040519150601f19603f3d011682016040523d82523d6000602084013e611257565b606091505b5050905080156112ab5784866001600160a01b0316837f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b8878760405161129e92919061235d565b60405180910390a46112f1565b84866001600160a01b0316837fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a6887876040516112e892919061235d565b60405180910390a45b50949350505050565b600154610100900460ff161580801561131757506001805460ff16105b806113305750303b15801561133057506001805460ff16145b6113a25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105c3565b6001805460ff19168117905580156113c4576001805461ff0019166101001790555b6113ec846001600160a01b03166000908152602081905260409020805460ff19166001179055565b600480546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff19928316179092556005805492851692909116919091179055801561146e576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600080600060608060606000600660008981526020019081526020016000209050806000015481600101548260020160009054906101000a90046001600160a01b03168360030184600401856005018280546114cf90611feb565b80601f01602080910402602001604051908101604052809291908181526020018280546114fb90611feb565b80156115485780601f1061151d57610100808354040283529160200191611548565b820191906000526020600020905b81548152906001019060200180831161152b57829003601f168201915b5050505050925081805461155b90611feb565b80601f016020809104026020016040519081016040528092919081815260200182805461158790611feb565b80156115d45780601f106115a9576101008083540402835291602001916115d4565b820191906000526020600020905b8154815290600101906020018083116115b757829003601f168201915b505050505091508080546115e790611feb565b80601f016020809104026020016040519081016040528092919081815260200182805461161390611feb565b80156116605780601f1061163557610100808354040283529160200191611660565b820191906000526020600020905b81548152906001019060200180831161164357829003601f168201915b505050505090509650965096509650965096505091939550919395565b600061168983836118c7565b9392505050565b60405162461bcd60e51b815260206004820152600f60248201527f4e6f7420696d706c656d656e746564000000000000000000000000000000000060448201526000906064016105c3565b60095460609060009067ffffffffffffffff8111156116fc576116fc611c0a565b604051908082528060200260200182016040528015611725578160200160208202803683370190505b50905060005b60095481101561179857600660006009838154811061174c5761174c6120e6565b906000526020600020015481526020019081526020016000206000015482828151811061177b5761177b6120e6565b602090810291909101015280611790816120fc565b91505061172b565b50919050565b3360009081526020819052604090205460ff161515600114806117c057503033145b61180c5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064016105c3565b611814611959565b565b6000806060818060405162461bcd60e51b81526004016105c3906020808252600f908201527f4e6f7420696d706c656d656e7465640000000000000000000000000000000000604082015260600190565b600081815260026020908152604091829020805483518184028101840190945280845260609392830182828015610cb65760200282019190600052602060002090815481526020019060010190808311610ca25750505050509050919050565b60008281526002602081905260408220015481036118e7575060006110ae565b60005b60008481526002602052604090205481101561194f576000848152600260205260409020805484919083908110611923576119236120e6565b90600052602060002001540361193d5760019150506110ae565b80611947816120fc565b9150506118ea565b5060009392505050565b3360009081526020819052604090205460ff1615156001148061197b57503033145b6119c75760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064016105c3565b336000908152602081905260409020805460ff19169055565b5080546119ec90611feb565b6000825580601f106119fc575050565b601f016020900490600052602060002090810190610db89190611a34565b5080546000825590600052602060002090810190610db891905b5b80821115611a495760008155600101611a35565b5090565b600060208284031215611a5f57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461168957600080fd5b600060208284031215611aa157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611ad857815187529582019590820190600101611abc565b509495945050505050565b606081526000611af66060830186611aa8565b60208301949094525060400152919050565b600080600060608486031215611b1d57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611b4757600080fd5b50508035926020909101359150565b8015158114610db857600080fd5b60008060408385031215611b7757600080fd5b823591506020830135611b8981611b56565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611bcc57835183529284019291840191600101611bb0565b50909695505050505050565b80356001600160a01b038116811461089557600080fd5b600060208284031215611c0157600080fd5b61168982611bd8565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611c3157600080fd5b813567ffffffffffffffff80821115611c4c57611c4c611c0a565b604051601f8301601f19908116603f01168101908282118183101715611c7457611c74611c0a565b81604052838152866020858801011115611c8d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215611cc657600080fd5b8635955060208701359450611cdd60408801611bd8565b9350606087013567ffffffffffffffff80821115611cfa57600080fd5b611d068a838b01611c20565b94506080890135915080821115611d1c57600080fd5b611d288a838b01611c20565b935060a0890135915080821115611d3e57600080fd5b50611d4b89828a01611c20565b9150509295509295509295565b60008060008060608587031215611d6e57600080fd5b611d7785611bd8565b935060208501359250604085013567ffffffffffffffff80821115611d9b57600080fd5b818701915087601f830112611daf57600080fd5b813581811115611dbe57600080fd5b886020828501011115611dd057600080fd5b95989497505060200194505050565b600080600060608486031215611df457600080fd5b611dfd84611bd8565b9250611e0b60208501611bd8565b9150611e1960408501611bd8565b90509250925092565b6000815180845260005b81811015611e4857602081850181015186830182015201611e2c565b506000602082860101526020601f19601f83011685010191505092915050565b8681528560208201526001600160a01b038516604082015260c060608201526000611e9660c0830186611e22565b8281036080840152611ea88186611e22565b905082810360a0840152611ebc8185611e22565b9998505050505050505050565b600080600080600080600060e0888a031215611ee457600080fd5b873596506020880135955060408801359450611f0260608901611bd8565b9350608088013567ffffffffffffffff80821115611f1f57600080fd5b611f2b8b838c01611c20565b945060a08a0135915080821115611f4157600080fd5b611f4d8b838c01611c20565b935060c08a0135915080821115611f6357600080fd5b50611f708a828b01611c20565b91505092959891949750929550565b6020815260006116896020830184611aa8565b6001600160a01b038616815284602082015260a060408201526000611fba60a0830186611e22565b931515606083015250608001529392505050565b600060208284031215611fe057600080fd5b815161168981611b56565b600181811c90821680611fff57607f821691505b60208210810361179857634e487b7160e01b600052602260045260246000fd5b6000815461202c81611feb565b808552602060018381168015612049576001811461206357612091565b60ff198516838901528284151560051b8901019550612091565b866000528260002060005b858110156120895781548a820186015290830190840161206e565b890184019650505b505050505092915050565b8481526080602082015260006120b5608083018661201f565b82810360408401526120c7818661201f565b905082810360608401526120db818561201f565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019820361211d57634e487b7160e01b600052601160045260246000fd5b5060010190565b601f82111561216e57600081815260208120601f850160051c8101602086101561214b5750805b601f850160051c820191505b8181101561216a57828155600101612157565b5050505b505050565b815167ffffffffffffffff81111561218d5761218d611c0a565b6121a18161219b8454611feb565b84612124565b602080601f8311600181146121d657600084156121be5750858301515b600019600386901b1c1916600185901b17855561216a565b600085815260208120601f198616915b82811015612205578886015182559484019460019091019084016121e6565b50858210156122235787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810361223e575050565b6122488254611feb565b67ffffffffffffffff81111561226057612260611c0a565b61226e8161219b8454611feb565b6000601f8211600181146122a2576000831561228a5750848201545b600019600385901b1c1916600184901b178455612307565b600085815260209020601f19841690600086815260209020845b838110156122dc57828601548255600195860195909101906020016122bc565b50858310156122fa5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b8481526080602082015260006123276080830186611e22565b82810360408401526123398186611e22565b905082810360608401526120db8185611e22565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220c622b3355046dcffd966a3ff2591c287cac1783d1cea1c5b4ac7cada0ed2ec4064736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c8063b1a34e0d116100cb578063d202158d1161007f578063e1c28bef11610059578063e1c28bef1461042d578063e326fbd414610442578063fb307b341461047357600080fd5b8063d202158d146103cb578063db6a20a5146103eb578063df09d6041461040b57600080fd5b8063b61d27f6116100b0578063b61d27f614610366578063c0c53b8b14610379578063c9100bcb1461039957600080fd5b8063b1a34e0d14610318578063b429afeb1461034657600080fd5b8063747442d31161012257806380e9e9e11161010757806380e9e9e1146102ab5780639010f726146102d8578063a7fc7a07146102f857600080fd5b8063747442d31461027757806380007e831461029757600080fd5b80631d381240116101535780631d381240146102155780634eee424a1461023757806353d413c51461025757600080fd5b806301ffc9a71461016f57806312aaac70146101e6575b600080fd5b34801561017b57600080fd5b506101d161018a366004611a4d565b7fffffffff00000000000000000000000000000000000000000000000000000000167f5f09a887000000000000000000000000000000000000000000000000000000001490565b60405190151581526020015b60405180910390f35b3480156101f257600080fd5b50610206610201366004611a8f565b610493565b6040516101dd93929190611ae3565b34801561022157600080fd5b50610235610230366004611b08565b61050f565b005b34801561024357600080fd5b506101d1610252366004611a8f565b6106ab565b34801561026357600080fd5b50610235610272366004611b34565b61089a565b34801561028357600080fd5b50610235610292366004611b64565b610aa9565b3480156102a357600080fd5b5060006101d1565b3480156102b757600080fd5b506102cb6102c6366004611a8f565b610c60565b6040516101dd9190611b94565b3480156102e457600080fd5b506102cb6102f3366004611a8f565b610cc2565b34801561030457600080fd5b50610235610313366004611bef565b610d22565b34801561032457600080fd5b50610338610333366004611cad565b610dbb565b6040519081526020016101dd565b34801561035257600080fd5b506101d1610361366004611bef565b611091565b610338610374366004611d58565b6110b4565b34801561038557600080fd5b50610235610394366004611ddf565b6112fa565b3480156103a557600080fd5b506103b96103b4366004611a8f565b611474565b6040516101dd96959493929190611e68565b3480156103d757600080fd5b506101d16103e6366004611b34565b61167d565b3480156103f757600080fd5b506101d1610406366004611ec9565b611690565b34801561041757600080fd5b506104206116db565b6040516101dd9190611f7f565b34801561043957600080fd5b5061023561179e565b34801561044e57600080fd5b5061046261045d366004611a8f565b611816565b6040516101dd959493929190611f92565b34801561047f57600080fd5b5061042061048e366004611a8f565b611867565b6000818152600260208181526040808420600181015493810154815483518186028101860190945280845260609695869593949093909185918301828280156104fb57602002820191906000526020600020905b8154815260200190600101908083116104e7575b505050505092509250925092509193909250565b600554604051633bcbb46960e21b81523360048201526001600160a01b039091169063ef2ed1a490602401602060405180830381865afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190611fce565b6105cc5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064015b60405180910390fd5b6000838152600260208190526040909120015483900361062e5760405162461bcd60e51b815260206004820152601260248201527f4b657920616c726561647920657869737473000000000000000000000000000060448201526064016105c3565b600083815260026020818152604080842092830187905582546001818101855584865283862090910187905592830185905585845260038252808420805493840181558452908320909101859055518291849186917f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e991a4505050565b600554604051633bcbb46960e21b81523360048201526000916001600160a01b03169063ef2ed1a490602401602060405180830381865afa1580156106f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107189190611fce565b6107645760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b600082815260066020526040902060028101546001600160a01b03166107cc5760405162461bcd60e51b815260206004820152601460248201527f436c61696d20646f6573206e6f7420657869737400000000000000000000000060448201526064016105c3565b60008381526006602052604081208181556001810182905560028101805473ffffffffffffffffffffffffffffffffffffffff191690559061081160038301826119e0565b61081f6004830160006119e0565b61082d6005830160006119e0565b50506002810154815460018301546040516001600160a01b039093169286917f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a9161088791906003880190600489019060058a019061209c565b60405180910390a460019150505b919050565b600554604051633bcbb46960e21b81523360048201526001600160a01b039091169063ef2ed1a490602401602060405180830381865afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611fce565b6109525760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b6000828152600260208190526040909120015482146109b35760405162461bcd60e51b815260206004820152600b60248201527f4e6f2073756368206b657900000000000000000000000000000000000000000060448201526064016105c3565b60005b600083815260026020526040902054811015610a3d5760008381526002602052604090208054839190839081106109ef576109ef6120e6565b906000526020600020015403610a2b576000838152600260205260409020805482908110610a1f57610a1f6120e6565b60009182526020822001555b80610a35816120fc565b9150506109b6565b506000828152600260205260408082206001015490519091839185917f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339791a4600082815260026020526040812090610a958282611a1a565b506000600182018190556002909101555050565b600554604051633bcbb46960e21b81523360048201526001600160a01b039091169063ef2ed1a490602401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190611fce565b610b615760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b6040516bffffffffffffffffffffffff193360601b166020820152610ba0906034016040516020818303038152906040528051906020012060026118c7565b610bec5760405162461bcd60e51b815260206004820152601b60248201527f53656e64657220646f6573206e6f74206861766520726967687473000000000060448201526064016105c3565b8015610c2d576040516001815282907fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d8906020015b60405180910390a25050565b6040516000815282907fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d890602001610c21565b600081815260086020908152604091829020805483518184028101840190945280845260609392830182828015610cb657602002820191906000526020600020905b815481526020019060010190808311610ca2575b50505050509050919050565b600081815260036020908152604091829020805483518184028101840190945280845260609392830182828015610cb65760200282019190600052602060002090815481526020019060010190808311610ca25750505050509050919050565b3360009081526020819052604090205460ff16151560011480610d4457503033145b610d905760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064016105c3565b610db8816001600160a01b03166000908152602081905260409020805460ff19166001179055565b50565b600554604051633bcbb46960e21b81523360048201526000916001600160a01b03169063ef2ed1a490602401602060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e289190611fce565b610e745760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b6040516bffffffffffffffffffffffff19606087901b1660208201526034810188905260009060540160408051808303601f1901815291815281516020928301206000818152600690935291208981556001810189905560028101805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a1617905590915060038101610f068782612173565b5060048101610f158682612173565b5060058101610f248582612173565b50600089815260086020908152604080832080546001818101835591855283852001869055600980548083019091557f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018690558584526006909252909120825481558282015491810191909155600280830154908201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790558190600380820190610fd990840182612233565b50600481810190610fec90840182612233565b50600581810190610fff90840182612233565b5050600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801839055506040516001600160a01b038816908a9084907f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c59061107c908d908c908c908c9061230e565b60405180910390a45096979650505050505050565b6001600160a01b03811660009081526020819052604081205460ff165b92915050565b600554604051633bcbb46960e21b81523360048201526000916001600160a01b03169063ef2ed1a490602401602060405180830381865afa1580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190611fce565b61116d5760405162461bcd60e51b815260206004820152601e60248201527f53656e646572206973206e6f742061207472757374656420697373756572000060448201526064016105c3565b6040516bffffffffffffffffffffffff193360601b1660208201526111ac906034016040516020818303038152906040528051906020012060016118c7565b6111f85760405162461bcd60e51b815260206004820152601b60248201527f53656e64657220646f6573206e6f74206861766520726967687473000000000060448201526064016105c3565b6000856001600160a01b031685858560405161121592919061234d565b60006040518083038185875af1925050503d8060008114611252576040519150601f19603f3d011682016040523d82523d6000602084013e611257565b606091505b5050905080156112ab5784866001600160a01b0316837f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b8878760405161129e92919061235d565b60405180910390a46112f1565b84866001600160a01b0316837fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a6887876040516112e892919061235d565b60405180910390a45b50949350505050565b600154610100900460ff161580801561131757506001805460ff16105b806113305750303b15801561133057506001805460ff16145b6113a25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105c3565b6001805460ff19168117905580156113c4576001805461ff0019166101001790555b6113ec846001600160a01b03166000908152602081905260409020805460ff19166001179055565b600480546001600160a01b0380861673ffffffffffffffffffffffffffffffffffffffff19928316179092556005805492851692909116919091179055801561146e576001805461ff00191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b600080600060608060606000600660008981526020019081526020016000209050806000015481600101548260020160009054906101000a90046001600160a01b03168360030184600401856005018280546114cf90611feb565b80601f01602080910402602001604051908101604052809291908181526020018280546114fb90611feb565b80156115485780601f1061151d57610100808354040283529160200191611548565b820191906000526020600020905b81548152906001019060200180831161152b57829003601f168201915b5050505050925081805461155b90611feb565b80601f016020809104026020016040519081016040528092919081815260200182805461158790611feb565b80156115d45780601f106115a9576101008083540402835291602001916115d4565b820191906000526020600020905b8154815290600101906020018083116115b757829003601f168201915b505050505091508080546115e790611feb565b80601f016020809104026020016040519081016040528092919081815260200182805461161390611feb565b80156116605780601f1061163557610100808354040283529160200191611660565b820191906000526020600020905b81548152906001019060200180831161164357829003601f168201915b505050505090509650965096509650965096505091939550919395565b600061168983836118c7565b9392505050565b60405162461bcd60e51b815260206004820152600f60248201527f4e6f7420696d706c656d656e746564000000000000000000000000000000000060448201526000906064016105c3565b60095460609060009067ffffffffffffffff8111156116fc576116fc611c0a565b604051908082528060200260200182016040528015611725578160200160208202803683370190505b50905060005b60095481101561179857600660006009838154811061174c5761174c6120e6565b906000526020600020015481526020019081526020016000206000015482828151811061177b5761177b6120e6565b602090810291909101015280611790816120fc565b91505061172b565b50919050565b3360009081526020819052604090205460ff161515600114806117c057503033145b61180c5760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064016105c3565b611814611959565b565b6000806060818060405162461bcd60e51b81526004016105c3906020808252600f908201527f4e6f7420696d706c656d656e7465640000000000000000000000000000000000604082015260600190565b600081815260026020908152604091829020805483518184028101840190945280845260609392830182828015610cb65760200282019190600052602060002090815481526020019060010190808311610ca25750505050509050919050565b60008281526002602081905260408220015481036118e7575060006110ae565b60005b60008481526002602052604090205481101561194f576000848152600260205260409020805484919083908110611923576119236120e6565b90600052602060002001540361193d5760019150506110ae565b80611947816120fc565b9150506118ea565b5060009392505050565b3360009081526020819052604090205460ff1615156001148061197b57503033145b6119c75760405162461bcd60e51b815260206004820152601a60248201527f63616c6c6572206973206e6f74206120636f6e74726f6c6c657200000000000060448201526064016105c3565b336000908152602081905260409020805460ff19169055565b5080546119ec90611feb565b6000825580601f106119fc575050565b601f016020900490600052602060002090810190610db89190611a34565b5080546000825590600052602060002090810190610db891905b5b80821115611a495760008155600101611a35565b5090565b600060208284031215611a5f57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461168957600080fd5b600060208284031215611aa157600080fd5b5035919050565b600081518084526020808501945080840160005b83811015611ad857815187529582019590820190600101611abc565b509495945050505050565b606081526000611af66060830186611aa8565b60208301949094525060400152919050565b600080600060608486031215611b1d57600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611b4757600080fd5b50508035926020909101359150565b8015158114610db857600080fd5b60008060408385031215611b7757600080fd5b823591506020830135611b8981611b56565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611bcc57835183529284019291840191600101611bb0565b50909695505050505050565b80356001600160a01b038116811461089557600080fd5b600060208284031215611c0157600080fd5b61168982611bd8565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611c3157600080fd5b813567ffffffffffffffff80821115611c4c57611c4c611c0a565b604051601f8301601f19908116603f01168101908282118183101715611c7457611c74611c0a565b81604052838152866020858801011115611c8d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215611cc657600080fd5b8635955060208701359450611cdd60408801611bd8565b9350606087013567ffffffffffffffff80821115611cfa57600080fd5b611d068a838b01611c20565b94506080890135915080821115611d1c57600080fd5b611d288a838b01611c20565b935060a0890135915080821115611d3e57600080fd5b50611d4b89828a01611c20565b9150509295509295509295565b60008060008060608587031215611d6e57600080fd5b611d7785611bd8565b935060208501359250604085013567ffffffffffffffff80821115611d9b57600080fd5b818701915087601f830112611daf57600080fd5b813581811115611dbe57600080fd5b886020828501011115611dd057600080fd5b95989497505060200194505050565b600080600060608486031215611df457600080fd5b611dfd84611bd8565b9250611e0b60208501611bd8565b9150611e1960408501611bd8565b90509250925092565b6000815180845260005b81811015611e4857602081850181015186830182015201611e2c565b506000602082860101526020601f19601f83011685010191505092915050565b8681528560208201526001600160a01b038516604082015260c060608201526000611e9660c0830186611e22565b8281036080840152611ea88186611e22565b905082810360a0840152611ebc8185611e22565b9998505050505050505050565b600080600080600080600060e0888a031215611ee457600080fd5b873596506020880135955060408801359450611f0260608901611bd8565b9350608088013567ffffffffffffffff80821115611f1f57600080fd5b611f2b8b838c01611c20565b945060a08a0135915080821115611f4157600080fd5b611f4d8b838c01611c20565b935060c08a0135915080821115611f6357600080fd5b50611f708a828b01611c20565b91505092959891949750929550565b6020815260006116896020830184611aa8565b6001600160a01b038616815284602082015260a060408201526000611fba60a0830186611e22565b931515606083015250608001529392505050565b600060208284031215611fe057600080fd5b815161168981611b56565b600181811c90821680611fff57607f821691505b60208210810361179857634e487b7160e01b600052602260045260246000fd5b6000815461202c81611feb565b808552602060018381168015612049576001811461206357612091565b60ff198516838901528284151560051b8901019550612091565b866000528260002060005b858110156120895781548a820186015290830190840161206e565b890184019650505b505050505092915050565b8481526080602082015260006120b5608083018661201f565b82810360408401526120c7818661201f565b905082810360608401526120db818561201f565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019820361211d57634e487b7160e01b600052601160045260246000fd5b5060010190565b601f82111561216e57600081815260208120601f850160051c8101602086101561214b5750805b601f850160051c820191505b8181101561216a57828155600101612157565b5050505b505050565b815167ffffffffffffffff81111561218d5761218d611c0a565b6121a18161219b8454611feb565b84612124565b602080601f8311600181146121d657600084156121be5750858301515b600019600386901b1c1916600185901b17855561216a565b600085815260208120601f198616915b82811015612205578886015182559484019460019091019084016121e6565b50858210156122235787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81810361223e575050565b6122488254611feb565b67ffffffffffffffff81111561226057612260611c0a565b61226e8161219b8454611feb565b6000601f8211600181146122a2576000831561228a5750848201545b600019600385901b1c1916600184901b178455612307565b600085815260209020601f19841690600086815260209020845b838110156122dc57828601548255600195860195909101906020016122bc565b50858310156122fa5781850154600019600388901b60f8161c191681555b50505060018360011b0184555b5050505050565b8481526080602082015260006123276080830186611e22565b82810360408401526123398186611e22565b905082810360608401526120db8185611e22565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f1916010191905056fea2646970667358221220c622b3355046dcffd966a3ff2591c287cac1783d1cea1c5b4ac7cada0ed2ec4064736f6c63430008110033",
  "devdoc": {
    "details": "This contract is used to store the claims of a user",
    "kind": "dev",
    "methods": {
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "initialize(address,address,address)": {
        "params": {
          "_identityRegistry": "the identity registry",
          "_owner": "the owner of the contract",
          "_trustedIssuerRegistry": "the trusted issuer registry"
        }
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and  `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      }
    },
    "title": "Identity",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ControllerAdded(address,address)": {
        "notice": "emitted when a controller is added."
      },
      "ControllerRemoved(address,address)": {
        "notice": "emitted when a controller is removed."
      }
    },
    "kind": "user",
    "methods": {
      "initialize(address,address,address)": {
        "notice": "initialize the contract"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "notice": "This contract represents an identity of a user",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6048,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "_controllers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 199,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 202,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3084,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "keys",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(Key)3141_storage)"
      },
      {
        "astId": 3089,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "keysByPurpose",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 3091,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "identityRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3093,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "trustedIssuerRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3505,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "claims",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Claim)3500_storage)"
      },
      {
        "astId": 3508,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "claimIds",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 3513,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "claimsByTopic",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 3516,
        "contract": "src/identity/Identity.sol:Identity",
        "label": "claimTopics",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_bytes32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Claim)3500_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Identity.Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)3500_storage"
      },
      "t_mapping(t_bytes32,t_struct(Key)3141_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Identity.Key)",
        "numberOfBytes": "32",
        "value": "t_struct(Key)3141_storage"
      },
      "t_mapping(t_uint256,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Claim)3500_storage": {
        "encoding": "inplace",
        "label": "struct Identity.Claim",
        "members": [
          {
            "astId": 3489,
            "contract": "src/identity/Identity.sol:Identity",
            "label": "topic",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3491,
            "contract": "src/identity/Identity.sol:Identity",
            "label": "scheme",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3493,
            "contract": "src/identity/Identity.sol:Identity",
            "label": "issuer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 3495,
            "contract": "src/identity/Identity.sol:Identity",
            "label": "signature",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3497,
            "contract": "src/identity/Identity.sol:Identity",
            "label": "data",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3499,
            "contract": "src/identity/Identity.sol:Identity",
            "label": "uri",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Key)3141_storage": {
        "encoding": "inplace",
        "label": "struct Identity.Key",
        "members": [
          {
            "astId": 3136,
            "contract": "src/identity/Identity.sol:Identity",
            "label": "purposes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3138,
            "contract": "src/identity/Identity.sol:Identity",
            "label": "keyType",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3140,
            "contract": "src/identity/Identity.sol:Identity",
            "label": "key",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}