{
  "address": "0xe63f1d64eC975e617C23a2f444F2540c0843c3eE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "claimTopics",
          "type": "uint256[]"
        }
      ],
      "name": "ClaimTopicsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "claimTopics",
          "type": "uint256[]"
        }
      ],
      "name": "TrustedIssuerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trustedIssuer",
          "type": "address"
        }
      ],
      "name": "TrustedIssuerRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedIssuer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_claimTopics",
          "type": "uint256[]"
        }
      ],
      "name": "addTrustedIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuerAddress",
          "type": "address"
        }
      ],
      "name": "getTrustedIssuer",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "claimIssuer",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "claimTopics",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct TrustedIssuer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedIssuer",
          "type": "address"
        }
      ],
      "name": "getTrustedIssuerClaimTopics",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedIssuers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "claimIssuer",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "claimTopics",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct TrustedIssuer[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "hasClaimTopic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_issuer",
          "type": "address"
        }
      ],
      "name": "isTrustedIssuer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedIssuer",
          "type": "address"
        }
      ],
      "name": "removeTrustedIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuerAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "claimIssuer",
              "type": "address"
            },
            {
              "internalType": "uint256[]",
              "name": "claimTopics",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct TrustedIssuer",
          "name": "trustedIssuer",
          "type": "tuple"
        }
      ],
      "name": "setTrustedIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedIssuer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_claimTopics",
          "type": "uint256[]"
        }
      ],
      "name": "updateIssuerClaimTopics",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c5de27c9d99d19d263143e16e0cd39555cc66993b9a0c4634da5c00b271b2eb",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0xe63f1d64eC975e617C23a2f444F2540c0843c3eE",
    "transactionIndex": 15,
    "gasUsed": "892134",
    "logsBloom": "0x
    "blockHash": "0x72f1411a8eb1cc809d9c0a804769ac64164498701496e3338ab2315271af1f30",
    "transactionHash": "0x8c5de27c9d99d19d263143e16e0cd39555cc66993b9a0c4634da5c00b271b2eb",
    "logs": [],
    "blockNumber": 3867028,
    "cumulativeGasUsed": "4845793",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "db7be833eb31146ace18bf1ce65f8bcb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"ClaimTopicsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"TrustedIssuerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trustedIssuer\",\"type\":\"address\"}],\"name\":\"TrustedIssuerRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"addTrustedIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"getTrustedIssuer\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"claimIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TrustedIssuer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedIssuer\",\"type\":\"address\"}],\"name\":\"getTrustedIssuerClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedIssuers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"claimIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TrustedIssuer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"hasClaimTopic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"isTrustedIssuer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedIssuer\",\"type\":\"address\"}],\"name\":\"removeTrustedIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"claimIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"claimTopics\",\"type\":\"uint256[]\"}],\"internalType\":\"struct TrustedIssuer\",\"name\":\"trustedIssuer\",\"type\":\"tuple\"}],\"name\":\"setTrustedIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedIssuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_claimTopics\",\"type\":\"uint256[]\"}],\"name\":\"updateIssuerClaimTopics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getTrustedIssuer(address)\":{\"params\":{\"issuerAddress\":\"The address of the trusted issuer\"},\"returns\":{\"_0\":\"trustedIssuer The trusted issuer struct\"}}},\"title\":\"TrustedIssuersRegistryFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTrustedIssuer(address)\":{\"notice\":\"get the trusted issuer struct given the trusted issuer address\"}},\"notice\":\"This contract is used to manage the trusted issuers registry\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/TrustedIsssuersRegistryFacet.sol\":\"TrustedIssuersRegistryFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/facets/TrustedIsssuersRegistryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"../interfaces/IClaimIssuer.sol\\\";\\nimport { ITrustedIssuersRegistry } from \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\nimport { Modifiers } from \\\"../utilities/Modifiers.sol\\\";\\n\\nimport \\\"../libraries/TrustedIssuerLib.sol\\\";\\n\\n/// @title TrustedIssuersRegistryFacet\\n/// @notice This contract is used to manage the trusted issuers registry\\ncontract TrustedIssuersRegistryFacet is ITrustedIssuersRegistry, Modifiers {\\n\\tusing TrustedIssuerLib for TrustedIssuerContract;\\n\\n\\t/// @notice get the trusted issuer struct given the trusted issuer address\\n\\t/// @param issuerAddress The address of the trusted issuer\\n\\t/// @return trustedIssuer The trusted issuer struct\\n\\tfunction getTrustedIssuer(address issuerAddress) external view returns (TrustedIssuer memory) {\\n\\t\\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\\n\\t\\treturn _contract._getTrustedIssuer(issuerAddress);\\n\\t}\\n\\n\\tfunction setTrustedIssuer(address issuerAddress, TrustedIssuer memory trustedIssuer) external {\\n\\t\\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\\n\\t\\t_contract._setTrustedIssuer(issuerAddress, trustedIssuer);\\n\\t}\\n\\n\\tfunction addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external onlyOwner {\\n\\t\\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\\n\\t\\t_contract._addTrustedIssuer(_trustedIssuer, _claimTopics);\\n\\t}\\n\\n\\tfunction removeTrustedIssuer(address _trustedIssuer) external onlyOwner {\\n\\t\\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\\n\\t\\t_contract.removeTrustedIssuer(_trustedIssuer);\\n\\t}\\n\\n\\tfunction updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external {\\n\\t\\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\\n\\t\\t_contract.updateIssuerClaimTopics(_trustedIssuer, _claimTopics);\\n\\t}\\n\\n\\tfunction getTrustedIssuers() external view override returns (TrustedIssuer[] memory) {\\n\\t\\tTrustedIssuerContract storage _contract = TrustedIssuerLib.trustedIssuerStorage().trustedIssuerContract;\\n\\t\\treturn _contract.getTrustedIssuers();\\n\\t}\\n\\n\\tfunction isTrustedIssuer(address _issuer) external view override returns (bool) {\\n\\t\\treturn TrustedIssuerLib.isTrustedIssuer(_issuer);\\n\\t}\\n\\n\\tfunction getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns (uint[] memory) {\\n\\t\\treturn TrustedIssuerLib.getTrustedIssuerClaimTopics(_trustedIssuer);\\n\\t}\\n\\n\\tfunction hasClaimTopic(address _issuer, uint _claimTopic) external view override returns (bool) {\\n\\t\\treturn TrustedIssuerLib.hasClaimTopic(_issuer, _claimTopic);\\n\\t}\\n}\\n\",\"keccak256\":\"0x37bf1a095d7466f1fad8c409fa095c9f1b8e56cf0abaa30bcf621acb488e6c9d\",\"license\":\"MIT\"},\"src/interfaces/IClaimIssuer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IIdentity.sol\\\";\\n\\nstruct Claim {\\n    uint256 topic;\\n    uint256 scheme;\\n    address issuer;\\n    bytes signature;\\n    bytes data;\\n    string uri;\\n    bool isRemoved;\\n}\\n\\ninterface IClaimIssuer is IIdentity {\\n\\n    event ClaimRevoked(bytes indexed signature);\\n\\n    function revokeClaim(bytes32 _claimId, address _identity) external returns(bool);\\n    function revokeClaimBySignature(bytes calldata signature) external;\\n    function isClaimRevoked(bytes calldata _sig) external view returns (bool);\\n    function isClaimValid(\\n        IIdentity _identity,\\n        uint256 claimTopic,\\n        bytes calldata sig,\\n        bytes calldata data)\\n    external view returns (bool);\\n    function getRecoveredAddress(bytes calldata sig, bytes32 dataHash) external pure returns (address);\\n    \\n}\",\"keccak256\":\"0xf94927c44289cafe7442ff3e69f6949f3f97ab784a27b0b5d79f3757da7f1dd8\",\"license\":\"MIT\"},\"src/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x07ab94171f8bf7530b1925a870887671702c22cdebe78952c9dda46eaad01c54\",\"license\":\"MIT\"},\"src/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x65006dc04090531acd9805684a1f27252b8abb0c1990fcf0ba8db33f50791a0d\",\"license\":\"MIT\"},\"src/interfaces/IERC734.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ninterface IERC734 is IERC165 {\\n    // events\\n    event KeyAdded(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event KeyRemoved(bytes32 indexed key, uint256 indexed purpose, uint256 indexed keyType);\\n    event ExecutionRequested(\\n        uint256 indexed executionId,\\n        address indexed to,\\n        uint256 indexed value,\\n        bytes data\\n    );\\n    event Executed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event ExecutionFailed(uint256 indexed executionId, address indexed to, uint256 indexed value, bytes data);\\n    event Approved(uint256 indexed executionId, bool approved);\\n\\n    // functions\\n    // setters\\n    function addKey(bytes32 _key, uint256 _purpose, uint256 _keyType) external;\\n    function removeKey(bytes32 _key, uint256 _purpose) external;\\n    function approve(uint256 _id, bool _approve) external;\\n\\n    // getters\\n    function getKey(bytes32 _key) external view returns(uint256[] memory purposes, uint256 keyType, bytes32 key);\\n    function getKeyPurposes(bytes32 _key) external view returns(uint256[] memory);\\n    function getKeysByPurpose(uint256 _purpose) external view returns(bytes32[] memory);\\n    function getExecution(uint256 _id) external view returns(address to, uint256 value, bytes memory data, bool approved, uint256 executionType);\\n}\\n\",\"keccak256\":\"0xa1bbf071037ac2d697a9134e90ac01a4ca93b206d15283182d8d01f7edda46c0\",\"license\":\"GPL-3.0\"},\"src/interfaces/IERC735.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IERC735 {\\n    event ClaimRequested(uint256 indexed claimRequestId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimAdded(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimRemoved(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n    event ClaimChanged(bytes32 indexed claimId, uint256 indexed topic, uint256 scheme, address indexed issuer, bytes signature, bytes data, string uri);\\n\\n    function getClaim(bytes32 _claimId) external returns(uint256 topic, uint256 scheme, address issuer, bytes memory signature, bytes memory data, string memory uri);\\n    function getClaimIdsByTopic(uint256 _topic) external returns(bytes32[] memory claimIds);\\n    function addClaim(uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (uint256 claimRequestId);\\n    function changeClaim(bytes32 _claimId, uint256 _topic, uint256 _scheme, address _issuer, bytes memory _signature, bytes memory _data, string memory _uri) external returns (bool success);\\n    function removeClaim(bytes32 _claimId) external returns (bool success);\\n}\\n\\n/*\\nHow IdentityRegistry works:\\n\\n1. User creates an Identity contract\\n2. User calls IdentityRegistry.addIdentity(address _identity, IIdentity identityData)\\n3. IdentityRegistry emits IdentityAdded(address indexed _address, IIdentity identity)\\n4. IdentityRegistry emits ClaimAdded(address indexed identity, uint256 indexed claimTopic, bytes claim)\\n5. IdentityRegistry emits WalletLinked(address indexed walletAddress, bytes32 indexed onchainID)\\n\\n*/\",\"keccak256\":\"0x73ba3756b679ad9c5577e896f38e4bd987d3f5881c795c37b55d6e0e6e091fd9\",\"license\":\"MIT\"},\"src/interfaces/IIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC734 } from \\\"./IERC734.sol\\\";\\nimport { IERC735 } from \\\"./IERC735.sol\\\";\\n\\ninterface IIdentity is IERC734, IERC735 {\\n    function isVerified() external view returns (bool);\\n    function getClaimTopics() external view returns (uint256[] memory);\\n}\",\"keccak256\":\"0x3441179ea9b419fccd103fa16dad25300acb771897159f124aeb816d93552044\",\"license\":\"MIT\"},\"src/interfaces/ITrustedIssuersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"./IClaimIssuer.sol\\\";\\n\\nstruct TrustedIssuer {\\n    address claimIssuer;\\n    uint[] claimTopics;\\n}\\n\\ninterface ITrustedIssuersRegistry {\\n\\n    // events\\n    event TrustedIssuerAdded(address indexed trustedIssuer, uint[] claimTopics);\\n    event TrustedIssuerRemoved(address indexed trustedIssuer);\\n    event ClaimTopicsUpdated(address indexed trustedIssuer, uint[] claimTopics);\\n\\n    // functions\\n    // setters\\n    function addTrustedIssuer(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n    function removeTrustedIssuer(address _trustedIssuer) external;\\n    function updateIssuerClaimTopics(address _trustedIssuer, uint[] calldata _claimTopics) external;\\n\\n    // getters\\n    function getTrustedIssuers() external view returns (TrustedIssuer[] memory);\\n    function isTrustedIssuer(address _issuer) external view returns(bool);\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory);\\n    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool);\\n\\n}\",\"keccak256\":\"0xec92af21e4a22ca0a3f643399fb2da26b898aa7c0b70bc59819e49935dcc21ad\",\"license\":\"MIT\"},\"src/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        //require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x7d27d5d7b127f3e393382dcd010fa37b5182d32c8fe91ad950188963a8c3cea6\",\"license\":\"MIT\"},\"src/libraries/TrustedIssuerLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IClaimIssuer } from \\\"../interfaces/IClaimIssuer.sol\\\";\\nimport { ITrustedIssuersRegistry, TrustedIssuer } from \\\"../interfaces/ITrustedIssuersRegistry.sol\\\";\\n\\nstruct TrustedIssuerContract {\\n    mapping(address => TrustedIssuer) trustedIssuers;\\n    address[] trustedIssuerAddresses;\\n    address owner;\\n}\\n\\nstruct TrustedIssuerStorage {\\n    TrustedIssuerContract trustedIssuerContract;\\n}\\n\\n/// \\nlibrary TrustedIssuerLib {\\n\\n    event TrustedIssuerUpdated(address indexed issuerAddress, TrustedIssuer trustedIssuer);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nomyx.lenderlabs.TrustedIssuerStorage.storage\\\");\\n\\n    /// @notice Get the storage struct for the TrustedIssuerRegistry\\n    /// @return ds TrustedIssuerStorage struct for the TrustedIssuerRegistry\\n    function trustedIssuerStorage() internal pure returns (TrustedIssuerStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice Get the trusted issuer struct given the trusted issuer address \\n    /// @param issuerAddress The address of the trusted issuer\\n    /// @return trustedIssuer The trusted issuer struct\\n    function _getTrustedIssuer(\\n        TrustedIssuerContract storage,\\n        address issuerAddress\\n    ) internal view returns (TrustedIssuer memory trustedIssuer) {\\n        return trustedIssuerStorage().trustedIssuerContract.trustedIssuers[issuerAddress];\\n    }\\n\\n    /// @notice Set the trusted issuer struct given the trusted issuer address\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @param issuerAddress The address of the trusted issuer\\n    /// @param trustedIssuer The trusted issuer struct\\n    function _setTrustedIssuer(\\n        TrustedIssuerContract storage self,\\n        address issuerAddress,\\n        TrustedIssuer memory trustedIssuer\\n    ) internal {\\n        if(self.trustedIssuers[issuerAddress].claimIssuer == address(0)) {\\n            self.trustedIssuerAddresses.push(issuerAddress);\\n        }\\n        self.trustedIssuers[issuerAddress] = trustedIssuer; \\n        emit TrustedIssuerUpdated(issuerAddress, trustedIssuer);\\n    }\\n\\n    /// @notice Add a trusted issuer\\n    /// @param _trustedIssuer The address of the trusted issuer\\n    /// @param _claimTopics The claim topics that the trusted issuer is allowed to issue\\n    function _addTrustedIssuer(\\n        TrustedIssuerContract storage,\\n        address _trustedIssuer, \\n        uint[] calldata _claimTopics) internal {\\n\\n        TrustedIssuer memory trustedIssuer = TrustedIssuer({\\n            claimIssuer: _trustedIssuer,\\n            claimTopics: _claimTopics\\n        });\\n\\n        _setTrustedIssuer(\\n            trustedIssuerStorage().trustedIssuerContract,\\n            address(_trustedIssuer),\\n            trustedIssuer\\n        );\\n    }\\n\\n    /// @notice Remove a trusted issuer\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @param _trustedIssuer The address of the trusted issuer\\n    function removeTrustedIssuer(TrustedIssuerContract storage self, address _trustedIssuer) internal {\\n        delete self.trustedIssuers[address(_trustedIssuer)];\\n    }\\n\\n    /// @notice Update the claim topics that a trusted issuer is allowed to issue\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @param _trustedIssuer The address of the trusted issuer\\n    /// @param _claimTopics The claim topics that the trusted issuer is allowed to issue\\n    function updateIssuerClaimTopics(TrustedIssuerContract storage self, address _trustedIssuer, uint[] calldata _claimTopics) internal {\\n        TrustedIssuer memory trustedIssuer = _getTrustedIssuer(\\n            self,\\n            address(_trustedIssuer)\\n        );\\n        trustedIssuer.claimTopics = _claimTopics;\\n        _setTrustedIssuer(\\n            self,\\n            address(_trustedIssuer),\\n            trustedIssuer\\n        );\\n    }\\n\\n    /// @notice Get the trusted issuers\\n    /// @param self The TrustedIssuerContract storage struct\\n    /// @return trustedIssuers The trusted issuers\\n    function getTrustedIssuers(TrustedIssuerContract storage self) internal view  returns (TrustedIssuer[] memory trustedIssuers) {\\n        trustedIssuers = new TrustedIssuer[](self.trustedIssuerAddresses.length);\\n        for (uint i = 0; i < self.trustedIssuerAddresses.length; i++) {\\n            trustedIssuers[i] = self.trustedIssuers[self.trustedIssuerAddresses[i]];\\n        }\\n    }\\n\\n    /// @notice is the issuer trusted\\n    /// @param _issuer The address of the issuer\\n    /// @return isTrusted True if the issuer is trusted\\n    function isTrustedIssuer(address _issuer) internal view returns(bool isTrusted) {\\n        isTrusted = trustedIssuerStorage().trustedIssuerContract.trustedIssuers[_issuer].claimIssuer != address(0);\\n    }\\n\\n    /// @notice Get the trusted issuer\\n    /// @param _trustedIssuer The trusted issuer\\n    /// @return trustedIssuer The trusted issuer\\n    function getTrustedIssuerClaimTopics(address _trustedIssuer) external view returns(uint[] memory) {\\n        return trustedIssuerStorage().trustedIssuerContract.trustedIssuers[address(_trustedIssuer)].claimTopics;\\n    }\\n\\n    /// @notice Does this issuer have this claim topic\\n    /// @param _issuer The address of the issuer\\n    /// @param _claimTopic The claim topic\\n    /// @return hasTopic True if the issuer has this claim topic\\n    function hasClaimTopic(address _issuer, uint _claimTopic) external view returns(bool hasTopic) {\\n        uint[] memory claimTopics = trustedIssuerStorage().trustedIssuerContract.trustedIssuers[_issuer].claimTopics;\\n        for (uint i = 0; i < claimTopics.length; i++) {\\n            if (claimTopics[i] == _claimTopic) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xd590e10d7d6181df0c8cba045dd605ab9432e1d72ef1500d22c1d00eac4165d3\",\"license\":\"MIT\"},\"src/utilities/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract Modifiers {\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender,\\n            \\\"not authorized to call function\\\");\\n        _;\\n    }\\n\\n    // function owner() public view returns (address) {\\n    //     return LibDiamond.contractOwner();\\n    // }\\n\\n}\",\"keccak256\":\"0x1ff9732a4c71208863e0e89890c768f96e670e132b5ca444e979b5a41a13fc41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f32806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b93d28eb11610076578063d21f20651161005b578063d21f20651461014f578063d9dd24c514610162578063ef2ed1a41461017757600080fd5b8063b93d28eb1461011c578063c28fb2781461012f57600080fd5b806304bc7e84146100a85780631fe8b2d0146100bd57806334a89987146100e65780639f63ea9814610109575b600080fd5b6100bb6100b6366004610a69565b61018a565b005b6100d06100cb366004610aef565b6101bd565b6040516100dd9190610b6a565b60405180910390f35b6100f96100f4366004610b7d565b610204565b60405190151581526020016100dd565b6100bb610117366004610a69565b6102a3565b6100bb61012a366004610aef565b610381565b61014261013d366004610aef565b61045c565b6040516100dd9190610ba7565b6100bb61015d366004610c7f565b6104fe565b61016a61052f565b6040516100dd9190610d6d565b6100f9610185366004610aef565b610561565b7fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676101b7818585856105a4565b50505050565b6040805180820190915260008152606060208201527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676101fd81846105fc565b9392505050565b6040517f34a899870000000000000000000000000000000000000000000000000000000081526001600160a01b0383166004820152602481018290526000907324657fBB0f8Ed0961Ea034250D06b6e71231b277906334a8998790604401602060405180830381865af415801561027f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fd9190610ded565b336102d57fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6001600160a01b031614806102e957503033145b610354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e0060448201526064015b60405180910390fd5b7fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676101b7818585856106b9565b336103b37fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6001600160a01b031614806103c757503033145b61042d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e00604482015260640161034b565b7fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676104588183610737565b5050565b6040517fc28fb2780000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526060907324657fBB0f8Ed0961Ea034250D06b6e71231b2779063c28fb27890602401600060405180830381865af41580156104d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f89190810190610e0f565b92915050565b7fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e836761052a818484610778565b505050565b60607fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e836761055b81610875565b91505090565b6001600160a01b0380821660009081527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e8367602052604081205490911615156104f8565b60006105b085856105fc565b905082828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060208201526105f5858583610778565b5050505050565b6040805180820190915260008152606060208201527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676001600160a01b038084166000908152602092835260409081902081518083018352815490931683526001810180548351818702810187019094528084529394919385830193928301828280156106a857602002820191906000526020600020905b815481526020019060010190808311610694575b505050505081525050905092915050565b60006040518060400160405280856001600160a01b03168152602001848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505091525090506105f57fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83678583610778565b6001600160a01b0381166000908152602083905260408120805473ffffffffffffffffffffffffffffffffffffffff19168155906101b760018301826109cc565b6001600160a01b03828116600090815260208590526040902054166107d45760018381018054918201815560009081526020902001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555b6001600160a01b038281166000908152602085815260409091208351815473ffffffffffffffffffffffffffffffffffffffff1916931692909217825582810151805184939261082b9260018501929101906109ed565b50905050816001600160a01b03167f7f2dd682796354e23322812d813709f1a1a35bc597a4867a561303713782849b826040516108689190610b6a565b60405180910390a2505050565b600181015460609067ffffffffffffffff81111561089557610895610beb565b6040519080825280602002602001820160405280156108db57816020015b6040805180820190915260008152606060208201528152602001906001900390816108b35790505b50905060005b60018301548110156109c65782600001600084600101838154811061090857610908610ea0565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825180840184528154909416845260018101805484518185028101850190955280855291938584019390929083018282801561098d57602002820191906000526020600020905b815481526020019060010190808311610979575b5050505050815250508282815181106109a8576109a8610ea0565b602002602001018190525080806109be90610eb6565b9150506108e1565b50919050565b50805460008255906000526020600020908101906109ea9190610a38565b50565b828054828255906000526020600020908101928215610a28579160200282015b82811115610a28578251825591602001919060010190610a0d565b50610a34929150610a38565b5090565b5b80821115610a345760008155600101610a39565b80356001600160a01b0381168114610a6457600080fd5b919050565b600080600060408486031215610a7e57600080fd5b610a8784610a4d565b9250602084013567ffffffffffffffff80821115610aa457600080fd5b818601915086601f830112610ab857600080fd5b813581811115610ac757600080fd5b8760208260051b8501011115610adc57600080fd5b6020830194508093505050509250925092565b600060208284031215610b0157600080fd5b6101fd82610a4d565b6000604083016001600160a01b0383511684526020808401516040828701528281518085526060880191508383019450600092505b80831015610b5f5784518252938301936001929092019190830190610b3f565b509695505050505050565b6020815260006101fd6020830184610b0a565b60008060408385031215610b9057600080fd5b610b9983610a4d565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015610bdf57835183529284019291840191600101610bc3565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610c2457610c24610beb565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c5357610c53610beb565b604052919050565b600067ffffffffffffffff821115610c7557610c75610beb565b5060051b60200190565b60008060408385031215610c9257600080fd5b610c9b83610a4d565b915060208084013567ffffffffffffffff80821115610cb957600080fd5b9085019060408288031215610ccd57600080fd5b610cd5610c01565b610cde83610a4d565b81528383013582811115610cf157600080fd5b80840193505087601f840112610d0657600080fd5b82359150610d1b610d1683610c5b565b610c2a565b82815260059290921b83018401918481019089841115610d3a57600080fd5b938501935b83851015610d5857843582529385019390850190610d3f565b80868401525050809450505050509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610de0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610dce858351610b0a565b94509285019290850190600101610d94565b5092979650505050505050565b600060208284031215610dff57600080fd5b815180151581146101fd57600080fd5b60006020808385031215610e2257600080fd5b825167ffffffffffffffff811115610e3957600080fd5b8301601f81018513610e4a57600080fd5b8051610e58610d1682610c5b565b81815260059190911b82018301908381019087831115610e7757600080fd5b928401925b82841015610e9557835182529284019290840190610e7c565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ef557634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212202d90ddb2379b7380146e782e7042b2261ae4c9a0c086649f7b14ed847e084fc564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063b93d28eb11610076578063d21f20651161005b578063d21f20651461014f578063d9dd24c514610162578063ef2ed1a41461017757600080fd5b8063b93d28eb1461011c578063c28fb2781461012f57600080fd5b806304bc7e84146100a85780631fe8b2d0146100bd57806334a89987146100e65780639f63ea9814610109575b600080fd5b6100bb6100b6366004610a69565b61018a565b005b6100d06100cb366004610aef565b6101bd565b6040516100dd9190610b6a565b60405180910390f35b6100f96100f4366004610b7d565b610204565b60405190151581526020016100dd565b6100bb610117366004610a69565b6102a3565b6100bb61012a366004610aef565b610381565b61014261013d366004610aef565b61045c565b6040516100dd9190610ba7565b6100bb61015d366004610c7f565b6104fe565b61016a61052f565b6040516100dd9190610d6d565b6100f9610185366004610aef565b610561565b7fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676101b7818585856105a4565b50505050565b6040805180820190915260008152606060208201527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676101fd81846105fc565b9392505050565b6040517f34a899870000000000000000000000000000000000000000000000000000000081526001600160a01b03831660048201526024810182905260009073__$9ff6c2ed2fd52f18960e5593de4fd7f398$__906334a8998790604401602060405180830381865af415801561027f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fd9190610ded565b336102d57fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6001600160a01b031614806102e957503033145b610354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e0060448201526064015b60405180910390fd5b7fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676101b7818585856106b9565b336103b37fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b031690565b6001600160a01b031614806103c757503033145b61042d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e00604482015260640161034b565b7fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676104588183610737565b5050565b6040517fc28fb2780000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260609073__$9ff6c2ed2fd52f18960e5593de4fd7f398$__9063c28fb27890602401600060405180830381865af41580156104d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104f89190810190610e0f565b92915050565b7fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e836761052a818484610778565b505050565b60607fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e836761055b81610875565b91505090565b6001600160a01b0380821660009081527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e8367602052604081205490911615156104f8565b60006105b085856105fc565b905082828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060208201526105f5858583610778565b5050505050565b6040805180820190915260008152606060208201527fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83676001600160a01b038084166000908152602092835260409081902081518083018352815490931683526001810180548351818702810187019094528084529394919385830193928301828280156106a857602002820191906000526020600020905b815481526020019060010190808311610694575b505050505081525050905092915050565b60006040518060400160405280856001600160a01b03168152602001848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505091525090506105f57fcb4ddd6b6517b610f6735ef98143f8a0f586e598ccc77ed29d967b7a6b5e83678583610778565b6001600160a01b0381166000908152602083905260408120805473ffffffffffffffffffffffffffffffffffffffff19168155906101b760018301826109cc565b6001600160a01b03828116600090815260208590526040902054166107d45760018381018054918201815560009081526020902001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555b6001600160a01b038281166000908152602085815260409091208351815473ffffffffffffffffffffffffffffffffffffffff1916931692909217825582810151805184939261082b9260018501929101906109ed565b50905050816001600160a01b03167f7f2dd682796354e23322812d813709f1a1a35bc597a4867a561303713782849b826040516108689190610b6a565b60405180910390a2505050565b600181015460609067ffffffffffffffff81111561089557610895610beb565b6040519080825280602002602001820160405280156108db57816020015b6040805180820190915260008152606060208201528152602001906001900390816108b35790505b50905060005b60018301548110156109c65782600001600084600101838154811061090857610908610ea0565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301909120825180840184528154909416845260018101805484518185028101850190955280855291938584019390929083018282801561098d57602002820191906000526020600020905b815481526020019060010190808311610979575b5050505050815250508282815181106109a8576109a8610ea0565b602002602001018190525080806109be90610eb6565b9150506108e1565b50919050565b50805460008255906000526020600020908101906109ea9190610a38565b50565b828054828255906000526020600020908101928215610a28579160200282015b82811115610a28578251825591602001919060010190610a0d565b50610a34929150610a38565b5090565b5b80821115610a345760008155600101610a39565b80356001600160a01b0381168114610a6457600080fd5b919050565b600080600060408486031215610a7e57600080fd5b610a8784610a4d565b9250602084013567ffffffffffffffff80821115610aa457600080fd5b818601915086601f830112610ab857600080fd5b813581811115610ac757600080fd5b8760208260051b8501011115610adc57600080fd5b6020830194508093505050509250925092565b600060208284031215610b0157600080fd5b6101fd82610a4d565b6000604083016001600160a01b0383511684526020808401516040828701528281518085526060880191508383019450600092505b80831015610b5f5784518252938301936001929092019190830190610b3f565b509695505050505050565b6020815260006101fd6020830184610b0a565b60008060408385031215610b9057600080fd5b610b9983610a4d565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b81811015610bdf57835183529284019291840191600101610bc3565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610c2457610c24610beb565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c5357610c53610beb565b604052919050565b600067ffffffffffffffff821115610c7557610c75610beb565b5060051b60200190565b60008060408385031215610c9257600080fd5b610c9b83610a4d565b915060208084013567ffffffffffffffff80821115610cb957600080fd5b9085019060408288031215610ccd57600080fd5b610cd5610c01565b610cde83610a4d565b81528383013582811115610cf157600080fd5b80840193505087601f840112610d0657600080fd5b82359150610d1b610d1683610c5b565b610c2a565b82815260059290921b83018401918481019089841115610d3a57600080fd5b938501935b83851015610d5857843582529385019390850190610d3f565b80868401525050809450505050509250929050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610de0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452610dce858351610b0a565b94509285019290850190600101610d94565b5092979650505050505050565b600060208284031215610dff57600080fd5b815180151581146101fd57600080fd5b60006020808385031215610e2257600080fd5b825167ffffffffffffffff811115610e3957600080fd5b8301601f81018513610e4a57600080fd5b8051610e58610d1682610c5b565b81815260059190911b82018301908381019087831115610e7757600080fd5b928401925b82841015610e9557835182529284019290840190610e7c565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ef557634e487b7160e01b600052601160045260246000fd5b506001019056fea26469706673582212202d90ddb2379b7380146e782e7042b2261ae4c9a0c086649f7b14ed847e084fc564736f6c63430008110033",
  "libraries": {
    "AddressSet": "0x99D84A2aA566300d09323EE12ad120177B7654bA",
    "AttributeLib": "0x929098055005A237C806Df3e2dC0E9B07390D83D",
    "Base64": "0x672911b00d6E0d0f6959A1726B4960090a357a4f",
    "Bytes32Set": "0xdDe75BdD8C22C231325997274D523aa0588648cf",
    "ClaimStorageLib": "0x245Fa7026c58705C70557586693F6575327E170c",
    "ClaimTopicLib": "0xEB45Bf980CfdfEAbde13A10b97B3494b78841bed",
    "DiamondFactoryLib": "0x0eDb1d08BeD07306Ca8F41Ac92149B92edB5a9ae",
    "DiamondLib": "0xC3A48dfc8d0b95404E416B9E76C046299e582431",
    "ERC721AEnumerationLib": "0x2F25585979FD3EAda22229F7Cf1c41D59D2AA6e8",
    "ERC721ALib": "0x409f63a3961986d9BeBfB9B5B11464e925804A90",
    "IdentityLib": "0x4E8e895927958e8E924C0d5145D08A6bdd0F0670",
    "LibDiamond": "0x07af5C2d7417f303eb35fff3943cD593Ca2c4352",
    "MetadataLib": "0x17276309aca9bb8272367aB843d0E869405Dd5B6",
    "StringsLib": "0x09a89Cfbdbe53e34fF1E919006a47d12a6aABd40",
    "Strings": "0xE0e88D1dFaf4Bf95dAFB567fE65862827849AAbE",
    "SVGTemplatesLib": "0x318B833110D5d0DEB641bF3bd723DDc830BbBBd8",
    "TrustedIssuerLib": "0x24657fBB0f8Ed0961Ea034250D06b6e71231b277",
    "UInt256Set": "0x8d8632635555c6c20F54a1b0b4A79b7A69f04026",
    "IdentityFactory": "0x72A85A19daeeCC35bDc5208b3bc338CD680dA729"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getTrustedIssuer(address)": {
        "params": {
          "issuerAddress": "The address of the trusted issuer"
        },
        "returns": {
          "_0": "trustedIssuer The trusted issuer struct"
        }
      }
    },
    "title": "TrustedIssuersRegistryFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTrustedIssuer(address)": {
        "notice": "get the trusted issuer struct given the trusted issuer address"
      }
    },
    "notice": "This contract is used to manage the trusted issuers registry",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}