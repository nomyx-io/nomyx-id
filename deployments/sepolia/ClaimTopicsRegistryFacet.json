{
  "address": "0x8fdEa8243DA3535eCb4F8f6c8c5af1331316FCD2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimTopic",
          "type": "uint256"
        }
      ],
      "name": "ClaimTopicAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimTopic",
          "type": "uint256"
        }
      ],
      "name": "ClaimTopicRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "addClaimTopic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimTopics",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "removeClaimTopic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf01957e9149ea5e74364f6a25b310c77a403d589c418240fb4dbee33e84959f0",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0x8fdEa8243DA3535eCb4F8f6c8c5af1331316FCD2",
    "transactionIndex": 6,
    "gasUsed": "384165",
    "logsBloom": "0x
    "blockHash": "0x2cf7225b6c2ae92b08d65542740d7b7a89302a047aee61d019a269b693966154",
    "transactionHash": "0xf01957e9149ea5e74364f6a25b310c77a403d589c418240fb4dbee33e84959f0",
    "logs": [],
    "blockNumber": 3867026,
    "cumulativeGasUsed": "695835",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "db7be833eb31146ace18bf1ce65f8bcb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"addClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addClaimTopic(uint256)\":{\"details\":\"Only the owner can call this function\",\"params\":{\"_claimTopic\":\"The claim topic to add\"}},\"getClaimTopics()\":{\"returns\":{\"_0\":\"claimTopics The claim topics\"}},\"removeClaimTopic(uint256)\":{\"details\":\"Only the owner can call this function\",\"params\":{\"_claimTopic\":\"The claim topic to remove\"}}},\"title\":\"ClaimTopicsRegistryFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addClaimTopic(uint256)\":{\"notice\":\"Add a claim topic\"},\"getClaimTopics()\":{\"notice\":\"Get the claim topics\"},\"removeClaimTopic(uint256)\":{\"notice\":\"Remove a claim topic\"}},\"notice\":\"This contract is used to manage the claim topics registry\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/ClaimTopicsRegistryFacet.sol\":\"ClaimTopicsRegistryFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/facets/ClaimTopicsRegistryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IClaimTopicsRegistry.sol\\\";\\nimport \\\"../libraries/ClaimTopicLib.sol\\\";\\nimport \\\"../utilities/Modifiers.sol\\\";\\n\\n/// @title ClaimTopicsRegistryFacet\\n/// @notice This contract is used to manage the claim topics registry\\ncontract ClaimTopicsRegistryFacet is IClaimTopicsRegistry, Modifiers {\\n\\n    using ClaimTopicLib for ClaimTopicContract;\\n\\n    constructor() {\\n        ClaimTopicStorage storage _contract = ClaimTopicLib.claimTopicStorage();\\n        _contract.owner = msg.sender;\\n    }\\n\\n    /// @notice Add a claim topic\\n    /// @param _claimTopic The claim topic to add\\n    /// @dev Only the owner can call this function\\n    function addClaimTopic(uint256 _claimTopic) external override onlyOwner {\\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\\n        _contract.addClaimTopic(_claimTopic);\\n    }\\n\\n    /// @notice Remove a claim topic\\n    /// @param _claimTopic The claim topic to remove\\n    /// @dev Only the owner can call this function\\n    function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {\\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\\n        _contract.removeClaimTopic(_claimTopic);\\n    }\\n\\n    /// @notice Get the claim topics\\n    /// @return claimTopics The claim topics\\n    function getClaimTopics() external view override returns (uint256[] memory) {\\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\\n        return _contract.getClaimTopics();\\n    }\\n\\n}\",\"keccak256\":\"0x8b1a29f012be39d4a65dadf468ac2456d4805a636cf4a9f8f619b7ca4501abc1\",\"license\":\"MIT\"},\"src/interfaces/IClaimTopicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IClaimTopicsRegistry {\\n\\n    // events\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\n\\n    // functions\\n    // setters\\n    function addClaimTopic(uint256 _claimTopic) external;\\n    function removeClaimTopic(uint256 _claimTopic) external;\\n\\n    // getter\\n    function getClaimTopics() external view returns (uint256[] memory);\\n\\n}\",\"keccak256\":\"0xf1de8ce4a353e0fe1bf698d8063629b0a34202196a148845ccb57b446751e2b9\",\"license\":\"MIT\"},\"src/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x07ab94171f8bf7530b1925a870887671702c22cdebe78952c9dda46eaad01c54\",\"license\":\"MIT\"},\"src/libraries/ClaimTopicLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IClaimTopicsRegistry.sol\\\";\\n\\nstruct ClaimTopicContract {\\n    uint256[] claimTopics;\\n}\\n\\nstruct ClaimTopicStorage {\\n    ClaimTopicContract _contract;\\n    address owner;\\n}\\n\\nlibrary ClaimTopicLib {\\n\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = \\n        keccak256(\\\"diamond.standard.claimTopics.facet.contract\\\");\\n\\n    function claimTopicStorage() internal pure returns (ClaimTopicStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function addClaimTopic(\\n        ClaimTopicContract storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        self.claimTopics.push(_claimTopic);\\n        emit ClaimTopicAdded(_claimTopic);\\n    }\\n\\n    function removeClaimTopic(\\n        ClaimTopicContract storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        for (uint256 i; i < self.claimTopics.length; i++) {\\n            if (self.claimTopics[i] == _claimTopic) {\\n                self.claimTopics[i] = self.claimTopics[self.claimTopics.length - 1];\\n                self.claimTopics.pop();\\n                emit ClaimTopicRemoved(_claimTopic);\\n                return;\\n            }\\n        }\\n        revert(\\\"Claim topic not found.\\\");\\n    }\\n\\n    function getClaimTopics(ClaimTopicContract storage self) internal view returns (uint256[] memory) {\\n        return self.claimTopics;\\n    }\\n}\\n\",\"keccak256\":\"0xf76abc3b4ee284f6471dd4b0dc7cc2d78f00231fed533b7355dcd2d92ca63e91\",\"license\":\"MIT\"},\"src/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        //require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x7d27d5d7b127f3e393382dcd010fa37b5182d32c8fe91ad950188963a8c3cea6\",\"license\":\"MIT\"},\"src/utilities/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract Modifiers {\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender,\\n            \\\"not authorized to call function\\\");\\n        _;\\n    }\\n\\n    // function owner() public view returns (address) {\\n    //     return LibDiamond.contractOwner();\\n    // }\\n\\n}\",\"keccak256\":\"0x1ff9732a4c71208863e0e89890c768f96e670e132b5ca444e979b5a41a13fc41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061002561003e60201b6102751760201c565b60010180546001600160a01b0319163317905550610062565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f90565b610590806100716000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630829784614610046578063c7b225511461005b578063df09d6041461006e575b600080fd5b61005961005436600461046a565b61008c565b005b61005961006936600461046a565b61016c565b610076610243565b6040516100839190610483565b60405180910390f35b336100cb7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614806100ec57503033145b61013d5760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e0060448201526064015b60405180910390fd5b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f6101688183610299565b5050565b336101ab7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614806101cc57503033145b6102185760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e006044820152606401610134565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f61016881836103cb565b60607ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f61026f8161040e565b91505090565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f90565b60005b825481101561038257818360000182815481106102bb576102bb6104c7565b90600052602060002001540361037057825483906102db906001906104f3565b815481106102eb576102eb6104c7565b906000526020600020015483600001828154811061030b5761030b6104c7565b60009182526020909120015582548390806103285761032861050c565b60019003818190600052602060002001600090559055817f0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec560405160405180910390a2505050565b8061037a81610522565b91505061029c565b5060405162461bcd60e51b815260206004820152601660248201527f436c61696d20746f706963206e6f7420666f756e642e000000000000000000006044820152606401610134565b815460018101835560008381526020812090910182905560405182917f01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d691a25050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561045e57602002820191906000526020600020905b81548152602001906001019080831161044a575b50505050509050919050565b60006020828403121561047c57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156104bb5783518352928401929184019160010161049f565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610506576105066104dd565b92915050565b634e487b7160e01b600052603160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610553576105536104dd565b506001019056fea264697066735822122033117ac6adefe1c87a9ae84fd1f9bf3eefedd5067060e233f3d6dcefc21ac85464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630829784614610046578063c7b225511461005b578063df09d6041461006e575b600080fd5b61005961005436600461046a565b61008c565b005b61005961006936600461046a565b61016c565b610076610243565b6040516100839190610483565b60405180910390f35b336100cb7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614806100ec57503033145b61013d5760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e0060448201526064015b60405180910390fd5b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f6101688183610299565b5050565b336101ab7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614806101cc57503033145b6102185760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e006044820152606401610134565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f61016881836103cb565b60607ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f61026f8161040e565b91505090565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f90565b60005b825481101561038257818360000182815481106102bb576102bb6104c7565b90600052602060002001540361037057825483906102db906001906104f3565b815481106102eb576102eb6104c7565b906000526020600020015483600001828154811061030b5761030b6104c7565b60009182526020909120015582548390806103285761032861050c565b60019003818190600052602060002001600090559055817f0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec560405160405180910390a2505050565b8061037a81610522565b91505061029c565b5060405162461bcd60e51b815260206004820152601660248201527f436c61696d20746f706963206e6f7420666f756e642e000000000000000000006044820152606401610134565b815460018101835560008381526020812090910182905560405182917f01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d691a25050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561045e57602002820191906000526020600020905b81548152602001906001019080831161044a575b50505050509050919050565b60006020828403121561047c57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156104bb5783518352928401929184019160010161049f565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610506576105066104dd565b92915050565b634e487b7160e01b600052603160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610553576105536104dd565b506001019056fea264697066735822122033117ac6adefe1c87a9ae84fd1f9bf3eefedd5067060e233f3d6dcefc21ac85464736f6c63430008110033",
  "libraries": {
    "AddressSet": "0x99D84A2aA566300d09323EE12ad120177B7654bA",
    "AttributeLib": "0x929098055005A237C806Df3e2dC0E9B07390D83D",
    "Base64": "0x672911b00d6E0d0f6959A1726B4960090a357a4f",
    "Bytes32Set": "0xdDe75BdD8C22C231325997274D523aa0588648cf",
    "ClaimStorageLib": "0x245Fa7026c58705C70557586693F6575327E170c",
    "ClaimTopicLib": "0xEB45Bf980CfdfEAbde13A10b97B3494b78841bed",
    "DiamondFactoryLib": "0x0eDb1d08BeD07306Ca8F41Ac92149B92edB5a9ae",
    "DiamondLib": "0xC3A48dfc8d0b95404E416B9E76C046299e582431",
    "ERC721AEnumerationLib": "0x2F25585979FD3EAda22229F7Cf1c41D59D2AA6e8",
    "ERC721ALib": "0x409f63a3961986d9BeBfB9B5B11464e925804A90",
    "IdentityLib": "0x4E8e895927958e8E924C0d5145D08A6bdd0F0670",
    "LibDiamond": "0x07af5C2d7417f303eb35fff3943cD593Ca2c4352",
    "MetadataLib": "0x17276309aca9bb8272367aB843d0E869405Dd5B6",
    "StringsLib": "0x09a89Cfbdbe53e34fF1E919006a47d12a6aABd40",
    "Strings": "0xE0e88D1dFaf4Bf95dAFB567fE65862827849AAbE",
    "SVGTemplatesLib": "0x318B833110D5d0DEB641bF3bd723DDc830BbBBd8",
    "TrustedIssuerLib": "0x24657fBB0f8Ed0961Ea034250D06b6e71231b277",
    "UInt256Set": "0x8d8632635555c6c20F54a1b0b4A79b7A69f04026",
    "IdentityFactory": "0x72A85A19daeeCC35bDc5208b3bc338CD680dA729"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addClaimTopic(uint256)": {
        "details": "Only the owner can call this function",
        "params": {
          "_claimTopic": "The claim topic to add"
        }
      },
      "getClaimTopics()": {
        "returns": {
          "_0": "claimTopics The claim topics"
        }
      },
      "removeClaimTopic(uint256)": {
        "details": "Only the owner can call this function",
        "params": {
          "_claimTopic": "The claim topic to remove"
        }
      }
    },
    "title": "ClaimTopicsRegistryFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addClaimTopic(uint256)": {
        "notice": "Add a claim topic"
      },
      "getClaimTopics()": {
        "notice": "Get the claim topics"
      },
      "removeClaimTopic(uint256)": {
        "notice": "Remove a claim topic"
      }
    },
    "notice": "This contract is used to manage the claim topics registry",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}