{
  "address": "0x2cec3fE963b919C4eCC15df9fE282303238237c1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimTopic",
          "type": "uint256"
        }
      ],
      "name": "ClaimTopicAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "claimTopic",
          "type": "uint256"
        }
      ],
      "name": "ClaimTopicRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "addClaimTopic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getClaimTopics",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "hasClaimTopic",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_claimTopic",
          "type": "uint256"
        }
      ],
      "name": "removeClaimTopic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1fc4bf154cce4c101f3b624f0627f7721f76e6d6eb8f5b217124ea48eb40619f",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0x2cec3fE963b919C4eCC15df9fE282303238237c1",
    "transactionIndex": 20,
    "gasUsed": "474920",
    "logsBloom": "0x
    "blockHash": "0x8a26c50ead9b9cb0d948aa9161106f75dcb9d0fafa45a73d98d0d348baeccdb1",
    "transactionHash": "0x1fc4bf154cce4c101f3b624f0627f7721f76e6d6eb8f5b217124ea48eb40619f",
    "logs": [],
    "blockNumber": 3879130,
    "cumulativeGasUsed": "17586076",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d7b9a1448eec80ffb400f3093fc4c601",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"addClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"hasClaimTopic\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addClaimTopic(uint256)\":{\"details\":\"Only the owner can call this function\",\"params\":{\"_claimTopic\":\"The claim topic to add\"}},\"getClaimTopics()\":{\"returns\":{\"_0\":\"claimTopics The claim topics\"}},\"removeClaimTopic(uint256)\":{\"details\":\"Only the owner can call this function\",\"params\":{\"_claimTopic\":\"The claim topic to remove\"}}},\"title\":\"ClaimTopicsRegistryFacet\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addClaimTopic(uint256)\":{\"notice\":\"Add a claim topic\"},\"getClaimTopics()\":{\"notice\":\"Get the claim topics\"},\"removeClaimTopic(uint256)\":{\"notice\":\"Remove a claim topic\"}},\"notice\":\"This contract is used to manage the claim topics registry\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/facets/ClaimTopicsRegistryFacet.sol\":\"ClaimTopicsRegistryFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"src/facets/ClaimTopicsRegistryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IClaimTopicsRegistry.sol\\\";\\nimport \\\"../libraries/ClaimTopicLib.sol\\\";\\nimport \\\"../utilities/Modifiers.sol\\\";\\n\\n/// @title ClaimTopicsRegistryFacet\\n/// @notice This contract is used to manage the claim topics registry\\ncontract ClaimTopicsRegistryFacet is IClaimTopicsRegistry, Modifiers {\\n\\n    using ClaimTopicLib for ClaimTopicContract;\\n\\n    constructor() {\\n        ClaimTopicStorage storage _contract = ClaimTopicLib.claimTopicStorage();\\n        _contract.owner = msg.sender;\\n    }\\n\\n    /// @notice Add a claim topic\\n    /// @param _claimTopic The claim topic to add\\n    /// @dev Only the owner can call this function\\n    function addClaimTopic(uint256 _claimTopic) external override onlyOwner {\\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\\n        require(!_contract.hasClaimTopic(_claimTopic), \\\"Claim topic already exists\\\");\\n        _contract.addClaimTopic(_claimTopic);\\n    }\\n\\n    /// @notice Remove a claim topic\\n    /// @param _claimTopic The claim topic to remove\\n    /// @dev Only the owner can call this function\\n    function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {\\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\\n        require(_claimTopic != 0, \\\"Cannot remove claim topic 0\\\");\\n        require(_contract.hasClaimTopic(_claimTopic), \\\"Claim topic does not exist\\\");\\n        _contract.removeClaimTopic(_claimTopic);\\n    }\\n\\n    /// @notice Get the claim topics\\n    /// @return claimTopics The claim topics\\n    function getClaimTopics() external view override returns (uint256[] memory) {\\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\\n        return _contract.getClaimTopics();\\n    }\\n\\n    function hasClaimTopic(uint256 _claimTopic) external view returns (bool) {\\n        ClaimTopicContract storage _contract = ClaimTopicLib.claimTopicStorage()._contract;\\n        return _contract.hasClaimTopic(_claimTopic);\\n    }\\n\\n}\",\"keccak256\":\"0xb7a951d2a89f2ecf21a8d86a0b02211c86bf9b97416a62c1ff9bb8fa7e8d073e\",\"license\":\"MIT\"},\"src/interfaces/IClaimTopicsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IClaimTopicsRegistry {\\n\\n    // events\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\n\\n    // functions\\n    // setters\\n    function addClaimTopic(uint256 _claimTopic) external;\\n    function removeClaimTopic(uint256 _claimTopic) external;\\n\\n    // getter\\n    function getClaimTopics() external view returns (uint256[] memory);\\n\\n}\",\"keccak256\":\"0xf1de8ce4a353e0fe1bf698d8063629b0a34202196a148845ccb57b446751e2b9\",\"license\":\"MIT\"},\"src/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x07ab94171f8bf7530b1925a870887671702c22cdebe78952c9dda46eaad01c54\",\"license\":\"MIT\"},\"src/libraries/ClaimTopicLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IClaimTopicsRegistry.sol\\\";\\n\\nstruct ClaimTopicContract {\\n    uint256[] claimTopics;\\n    mapping(uint256 => bool) claimTopicIndex;\\n}\\n\\nstruct ClaimTopicStorage {\\n    ClaimTopicContract _contract;\\n    address owner;\\n}\\n\\nlibrary ClaimTopicLib {\\n\\n    event ClaimTopicAdded(uint256 indexed claimTopic);\\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = \\n        keccak256(\\\"diamond.standard.claimTopics.facet.contract\\\");\\n\\n    function claimTopicStorage() internal pure returns (ClaimTopicStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function addClaimTopic(\\n        ClaimTopicContract storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        self.claimTopics.push(_claimTopic);\\n        self.claimTopicIndex[_claimTopic] = true;\\n        emit ClaimTopicAdded(_claimTopic);\\n    }\\n\\n    function removeClaimTopic(\\n        ClaimTopicContract storage self,\\n        uint256 _claimTopic\\n    ) internal {\\n        for (uint256 i; i < self.claimTopics.length; i++) {\\n            if (self.claimTopics[i] == _claimTopic) {\\n                self.claimTopics[i] = self.claimTopics[self.claimTopics.length - 1];\\n                self.claimTopics.pop();\\n                emit ClaimTopicRemoved(_claimTopic);\\n                return;\\n            }\\n        }\\n        self.claimTopicIndex[_claimTopic] = false;\\n        revert(\\\"Claim topic not found.\\\");\\n    }\\n\\n    function getClaimTopics(ClaimTopicContract storage self) internal view returns (uint256[] memory) {\\n        return self.claimTopics;\\n    }\\n\\n    function hasClaimTopic(ClaimTopicContract storage self, uint256 _claimTopic) internal view returns (bool) {\\n        return self.claimTopicIndex[_claimTopic];\\n    }\\n}\\n\",\"keccak256\":\"0x6f3e1a64efa755d36beac63ca575718c51ccea575c0e4e46127dae85e368a48a\",\"license\":\"MIT\"},\"src/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        //require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x7d27d5d7b127f3e393382dcd010fa37b5182d32c8fe91ad950188963a8c3cea6\",\"license\":\"MIT\"},\"src/utilities/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract Modifiers {\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender,\\n            \\\"not authorized to call function\\\");\\n        _;\\n    }\\n\\n    // function owner() public view returns (address) {\\n    //     return LibDiamond.contractOwner();\\n    // }\\n\\n}\",\"keccak256\":\"0x1ff9732a4c71208863e0e89890c768f96e670e132b5ca444e979b5a41a13fc41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061002561003e60201b6103d11760201c565b60020180546001600160a01b0319163317905550610062565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f90565b610735806100716000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630829784614610051578063c7b2255114610066578063da22d41f14610079578063df09d604146100a1575b600080fd5b61006461005f366004610615565b6100b6565b005b610064610074366004610615565b61023d565b61008c610087366004610615565b61036b565b60405190151581526020015b60405180910390f35b6100a961039f565b604051610098919061062e565b336100f57fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16148061011657503033145b6101675760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e0060448201526064015b60405180910390fd5b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f60008290036101d95760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742072656d6f766520636c61696d20746f70696320300000000000604482015260640161015e565b6101e381836103f5565b61022f5760405162461bcd60e51b815260206004820152601a60248201527f436c61696d20746f70696320646f6573206e6f74206578697374000000000000604482015260640161015e565b6102398183610410565b5050565b3361027c7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16148061029d57503033145b6102e95760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e00604482015260640161015e565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f61031481836103f5565b156103615760405162461bcd60e51b815260206004820152601a60248201527f436c61696d20746f70696320616c726561647920657869737473000000000000604482015260640161015e565b610239818361055c565b60007ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f61039881846103f5565b9392505050565b60607ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f6103cb816105b9565b91505090565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f90565b600081815260018301602052604090205460ff165b92915050565b60005b82548110156104f9578183600001828154811061043257610432610672565b9060005260206000200154036104e757825483906104529060019061069e565b8154811061046257610462610672565b906000526020600020015483600001828154811061048257610482610672565b600091825260209091200155825483908061049f5761049f6106b1565b60019003818190600052602060002001600090559055817f0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec560405160405180910390a2505050565b806104f1816106c7565b915050610413565b50600081815260018301602052604090819020805460ff191690555162461bcd60e51b815261015e9060040160208082526016908201527f436c61696d20746f706963206e6f7420666f756e642e00000000000000000000604082015260600190565b815460018181018455600084815260208082209093018490558381528185019092526040808320805460ff19169092179091555182917f01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d691a25050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561060957602002820191906000526020600020905b8154815260200190600101908083116105f5575b50505050509050919050565b60006020828403121561062757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156106665783518352928401929184019160010161064a565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561040a5761040a610688565b634e487b7160e01b600052603160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036106f8576106f8610688565b506001019056fea26469706673582212209e52045fb60cbc0573d1519089b633622a4c97b1fad72e223eb894c3c2c4176164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630829784614610051578063c7b2255114610066578063da22d41f14610079578063df09d604146100a1575b600080fd5b61006461005f366004610615565b6100b6565b005b610064610074366004610615565b61023d565b61008c610087366004610615565b61036b565b60405190151581526020015b60405180910390f35b6100a961039f565b604051610098919061062e565b336100f57fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16148061011657503033145b6101675760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e0060448201526064015b60405180910390fd5b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f60008290036101d95760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f742072656d6f766520636c61696d20746f70696320300000000000604482015260640161015e565b6101e381836103f5565b61022f5760405162461bcd60e51b815260206004820152601a60248201527f436c61696d20746f70696320646f6573206e6f74206578697374000000000000604482015260640161015e565b6102398183610410565b5050565b3361027c7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16148061029d57503033145b6102e95760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e00604482015260640161015e565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f61031481836103f5565b156103615760405162461bcd60e51b815260206004820152601a60248201527f436c61696d20746f70696320616c726561647920657869737473000000000000604482015260640161015e565b610239818361055c565b60007ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f61039881846103f5565b9392505050565b60607ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f6103cb816105b9565b91505090565b7ff2d5df6e03e329d7472e7e5b48a0fcc7231d5839f07cce006029241344d5145f90565b600081815260018301602052604090205460ff165b92915050565b60005b82548110156104f9578183600001828154811061043257610432610672565b9060005260206000200154036104e757825483906104529060019061069e565b8154811061046257610462610672565b906000526020600020015483600001828154811061048257610482610672565b600091825260209091200155825483908061049f5761049f6106b1565b60019003818190600052602060002001600090559055817f0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec560405160405180910390a2505050565b806104f1816106c7565b915050610413565b50600081815260018301602052604090819020805460ff191690555162461bcd60e51b815261015e9060040160208082526016908201527f436c61696d20746f706963206e6f7420666f756e642e00000000000000000000604082015260600190565b815460018181018455600084815260208082209093018490558381528185019092526040808320805460ff19169092179091555182917f01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d691a25050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561060957602002820191906000526020600020905b8154815260200190600101908083116105f5575b50505050509050919050565b60006020828403121561062757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156106665783518352928401929184019160010161064a565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561040a5761040a610688565b634e487b7160e01b600052603160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036106f8576106f8610688565b506001019056fea26469706673582212209e52045fb60cbc0573d1519089b633622a4c97b1fad72e223eb894c3c2c4176164736f6c63430008110033",
  "libraries": {
    "AddressSet": "0xe816f9c968c92bef011eabc25bb1e062f23f0ce3",
    "AttributeLib": "0x54b27B50D22583c3F8D44062105fa3746092F98D",
    "Base64": "0x18f7751ECdE5e9A20F7ba3b3E6419e5486dce02C",
    "Bytes32Set": "0xF8cF9DDd669304191Db084053CB0CB2B996721A8",
    "ClaimStorageLib": "0xb355293012312F75756CE66d5D6208D50E9570D9",
    "ClaimTopicLib": "0xfA5F92fB7D658b83Bd8eb891CFa1de03B2dE6ca0",
    "DiamondFactoryLib": "0x5e3a72a725e885D3297Df110fed8513c1A89590F",
    "DiamondLib": "0xfF3811e752E2fB8ca0192Ac977ec7EE0154C27D7",
    "ERC721AEnumerationLib": "0x3862fD7Aee0687c461D40A3c6AbaD9bD9F15e6c4",
    "ERC721ALib": "0x185d29cB9B14a6EA5d114534EF1A99C205d13204",
    "IdentityLib": "0x8187074C0542Adc6f8679958106A546F2Ac498cc",
    "LibDiamond": "0x0ef6EE0407615E57bC04bF16C21a9aeA1530f650",
    "MetadataLib": "0xFFa8D07fA502AbD668CFdba501999F3074f1a78c",
    "StringsLib": "0xfe30ea7bcFa85debB8FC3c8AA925ebEb22011b6f",
    "Strings": "0x9fF441f16e0163DCa2109c376d15348b3001232D",
    "SVGTemplatesLib": "0xB66E75ed2C1202b29F37e862e00CdA37B4edA8A3",
    "TrustedIssuerLib": "0x2DE50b277A2b56220F676E9C84524f9c3fdc12F3",
    "UInt256Set": "0xCA610CCce4b2aB25Adc1072a0C21df42320478A3",
    "IdentityFactory": "0xEA0f9DE12192E09bA196a2819081c196BAc99104"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addClaimTopic(uint256)": {
        "details": "Only the owner can call this function",
        "params": {
          "_claimTopic": "The claim topic to add"
        }
      },
      "getClaimTopics()": {
        "returns": {
          "_0": "claimTopics The claim topics"
        }
      },
      "removeClaimTopic(uint256)": {
        "details": "Only the owner can call this function",
        "params": {
          "_claimTopic": "The claim topic to remove"
        }
      }
    },
    "title": "ClaimTopicsRegistryFacet",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addClaimTopic(uint256)": {
        "notice": "Add a claim topic"
      },
      "getClaimTopics()": {
        "notice": "Get the claim topics"
      },
      "removeClaimTopic(uint256)": {
        "notice": "Remove a claim topic"
      }
    },
    "notice": "This contract is used to manage the claim topics registry",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}