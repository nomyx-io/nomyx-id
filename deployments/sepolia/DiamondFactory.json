{
  "address": "0x9Ad791c68762937005698a267972a7BEff48FFA6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "controllerAddress",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "diamond",
          "type": "address"
        }
      ],
      "name": "DiamondAdd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "svgManager",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct DiamondSettings",
          "name": "settings",
          "type": "tuple"
        }
      ],
      "name": "DiamondCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "diamond",
          "type": "address"
        }
      ],
      "name": "DiamondRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "diamondAddress",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "svgManager",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct DiamondSettings",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "diamondInit",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "facets",
          "type": "tuple[]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "diamondAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "svgManager",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct DiamondSettings",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "diamondInit",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_calldata",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "facets",
          "type": "string"
        }
      ],
      "name": "createFromSet",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "diamondAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "getDiamondAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "facetSet",
          "type": "string"
        }
      ],
      "name": "getFacets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "setName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "facetAddress",
                  "type": "address"
                },
                {
                  "internalType": "enum IDiamondCut.FacetCutAction",
                  "name": "action",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes4[]",
                  "name": "functionSelectors",
                  "type": "bytes4[]"
                }
              ],
              "internalType": "struct IDiamondCut.FacetCut[]",
              "name": "facetAddresses",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DiamondFactoryInit",
          "name": "initData",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isController",
      "outputs": [
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relinquishControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "facetSet",
          "type": "string"
        }
      ],
      "name": "removeFacets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "facetSet",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut",
          "name": "facetAddress",
          "type": "tuple"
        }
      ],
      "name": "setFacet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "facetSet",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "facetAddress",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondCut.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "functionSelectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondCut.FacetCut[]",
          "name": "facetAddress",
          "type": "tuple[]"
        }
      ],
      "name": "setFacets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbols",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd58db95b37b7563e4488f14daaf0f4d1413b6be72091a22df52fa8015a9c6f7a",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0x9Ad791c68762937005698a267972a7BEff48FFA6",
    "transactionIndex": 0,
    "gasUsed": "4607354",
    "logsBloom": "0x
    "blockHash": "0x8d868f79d2ffc98ca8ca5b19b4f5a9565fce7c5550e4e67b17ad146c25643c21",
    "transactionHash": "0xd58db95b37b7563e4488f14daaf0f4d1413b6be72091a22df52fa8015a9c6f7a",
    "logs": [],
    "blockNumber": 3879133,
    "cumulativeGasUsed": "4607354",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dbcfcf842e810514aedd8e426522bfbb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controllerAddress\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diamond\",\"type\":\"address\"}],\"name\":\"DiamondAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"svgManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct DiamondSettings\",\"name\":\"settings\",\"type\":\"tuple\"}],\"name\":\"DiamondCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"diamond\",\"type\":\"address\"}],\"name\":\"DiamondRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"diamondAddress\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"svgManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct DiamondSettings\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"diamondInit\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"facets\",\"type\":\"tuple[]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"diamondAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"svgManager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct DiamondSettings\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"diamondInit\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_calldata\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"facets\",\"type\":\"string\"}],\"name\":\"createFromSet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"diamondAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getDiamondAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"facetSet\",\"type\":\"string\"}],\"name\":\"getFacets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"setName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"facetAddresses\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DiamondFactoryInit\",\"name\":\"initData\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relinquishControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"facetSet\",\"type\":\"string\"}],\"name\":\"removeFacets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"facetSet\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut\",\"name\":\"facetAddress\",\"type\":\"tuple\"}],\"name\":\"setFacet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"facetSet\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"facetAddress\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondCut.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"functionSelectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondCut.FacetCut[]\",\"name\":\"facetAddress\",\"type\":\"tuple[]\"}],\"name\":\"setFacets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbols\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(string,address)\":{\"params\":{\"diamondAddress\":\"the address of the diamond\",\"symbol\":\"the symbol of the diamond\"}},\"addController(address)\":{\"details\":\"Add an address allowed to control this contract\"},\"create((address,address,address,string,string),address,bytes,(address,uint8,bytes4[])[])\":{\"params\":{\"_calldata\":\"the calldata to pass to the diamond init contract\",\"diamondInit\":\"the diamond init contract\",\"params\":\"diamond init parameters\"}},\"createFromSet((address,address,address,string,string),address,bytes,string)\":{\"params\":{\"_calldata\":\"the calldata to pass to the diamond init contract\",\"diamondInit\":\"the diamond init contract\",\"params\":\"diamond init parameters\"}},\"exists(string)\":{\"params\":{\"symbol\":\"the symbol of the diamond to check\"}},\"getDiamondAddress(string)\":{\"params\":{\"symbol\":\"the symbol of the diamond\"},\"returns\":{\"_0\":\"the address of the diamond\"}},\"initialize((string,(address,uint8,bytes4[])[]))\":{\"params\":{\"initData\":\"the address of the diamond init contract\"}},\"isController(address)\":{\"details\":\"Check if this address is a controller\"},\"relinquishControl()\":{\"details\":\"Remove the sender address from the list of controllers\"},\"remove(string)\":{\"params\":{\"symbol\":\"the symbol of the diamond to remove\"}},\"removeFacets(string)\":{\"params\":{\"facetSet\":\"the facet set to remove\"}},\"setFacet(string,uint256,(address,uint8,bytes4[]))\":{\"params\":{\"facetAddress\":\"the facet to set\",\"idx\":\"the index of the facet to set\"}},\"setFacets(string,(address,uint8,bytes4[])[])\":{\"params\":{\"facetAddress\":\"the facet to set\",\"facetSet\":\"the index of the facet to set\"}},\"symbols()\":{\"returns\":{\"_0\":\"the symbols\"}}},\"title\":\"Diamond Factory\",\"version\":1},\"userdoc\":{\"events\":{\"ControllerAdded(address,address)\":{\"notice\":\"emitted when a controller is added.\"},\"ControllerRemoved(address,address)\":{\"notice\":\"emitted when a controller is removed.\"}},\"kind\":\"user\",\"methods\":{\"add(string,address)\":{\"notice\":\"add an existing diamong to the factory. it will then be returned by the getDiamondAddress function\"},\"create((address,address,address,string,string),address,bytes,(address,uint8,bytes4[])[])\":{\"notice\":\"create a new diamond token with the given symbol\"},\"createFromSet((address,address,address,string,string),address,bytes,string)\":{\"notice\":\"create a new diamond token with the given symbol\"},\"exists(string)\":{\"notice\":\"check if the token exists\"},\"getDiamondAddress(string)\":{\"notice\":\"get the address of the diamond\"},\"getFacets(string)\":{\"notice\":\"get the facets for the diamond\"},\"initialize((string,(address,uint8,bytes4[])[]))\":{\"notice\":\"initiiate the factory\"},\"remove(string)\":{\"notice\":\"remove a diamond from this factory\"},\"removeFacets(string)\":{\"notice\":\"remote a facet set from the factory\"},\"setFacet(string,uint256,(address,uint8,bytes4[]))\":{\"notice\":\"set a template facet on this factory\"},\"setFacets(string,(address,uint8,bytes4[])[])\":{\"notice\":\"set a number of template facets on this factory\"},\"symbols()\":{\"notice\":\"get all the symbols from the factory\"}},\"notice\":\"This contract is used to create new Diamond contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/DiamondFactory.sol\":\"DiamondFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721Metadata.sol\\\";\\n\",\"keccak256\":\"0x1e88abdf82fcbbf98f97be17ea56c924376350637896bc37366ec9f89b7c2628\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\",\"keccak256\":\"0x7bd5dc796c245d4c52836610455d172cdfcc1f8dcf0d9b1c4cbde212fde02965\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6e00f269073ffc4350e56b7e8153c9092d5f70bfba423299990514183101ef89\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nimport \\\"./interfaces/IERC721Enumerable.sol\\\";\\n\\nimport \\\"./libraries/DiamondLib.sol\\\";\\n\\nimport { LibDiamond } from \\\"./libraries/LibDiamond.sol\\\";\\nimport { DiamondLib } from \\\"./libraries/DiamondLib.sol\\\";\\nimport { IDiamondCut } from \\\"./interfaces/IDiamondCut.sol\\\";\\nimport { IDiamondLoupe } from \\\"./interfaces/IDiamondLoupe.sol\\\";\\nimport { DiamondSettings } from \\\"./interfaces/IDiamond.sol\\\";\\nimport { IERC173 } from \\\"./interfaces/IERC173.sol\\\";\\n\\ncontract Diamond is IERC165, IDiamondCut, IDiamondLoupe, Initializable, IERC173 {\\n\\n\\n    function initialize(\\n        address _owner, \\n        DiamondSettings memory params,\\n        IDiamondCut.FacetCut[] memory _facets,\\n        address diamondInit,\\n        bytes calldata _calldata\\n    ) public initializer {\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IERC165).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IERC173).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IERC721).interfaceId] = true;\\n        LibDiamond.diamondStorage().supportedInterfaces[type(IERC721Metadata).interfaceId] = true;\\n\\n        // initialize the diamond\\n        LibDiamond.diamondCut(_facets, diamondInit, _calldata);\\n\\n        // set the symbol and name of the diamond\\n        DiamondLib.diamondStorage().diamondContract.settings.owner = _owner;\\n        DiamondLib.diamondStorage().diamondContract.metadata['symbol'] = params.symbol;\\n        DiamondLib.diamondStorage().diamondContract.metadata['name'] = params.name;\\n\\n        IERC173(address(this)).transferOwnership(params.owner);\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.diamondCut(_diamondCut, _init, _calldata);\\n    }\\n\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external override view returns (Facet[] memory facets_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        uint256 numFacets = ds.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = ds.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress_;\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddresses_ = ds.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external view override returns (bool) {\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        return type(IERC165).interfaceId == _interfaceId \\n            || type(IERC721).interfaceId == _interfaceId \\n            || type(IERC721Metadata).interfaceId == _interfaceId \\n            || type(IERC721Enumerable).interfaceId == _interfaceId \\n            || ds.supportedInterfaces[_interfaceId];\\n    }\\n\\n    /// @notice transfer ownership to new contract\\n    function transferOwnership(address _newOwner) external override {\\n        LibDiamond.enforceIsContractOwner();\\n        LibDiamond.setContractOwner(_newOwner);\\n    }\\n\\n    /// @notice get a address to the owner of the contract\\n    function owner() external override view returns (address owner_) {\\n        owner_ = LibDiamond.contractOwner();\\n    }    \\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        LibDiamond.DiamondStorage storage ds;\\n        bytes32 position = LibDiamond.DIAMOND_STORAGE_POSITION;\\n        // get diamond storage\\n        assembly {\\n            ds.slot := position\\n        }\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        // Execute external function from facet using delegatecall and return any value.\\n        assembly {\\n            // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n            // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n            // return any return value or error back to the caller\\n            switch result\\n                case 0 {\\n                    revert(0, returndatasize())\\n                }\\n                default {\\n                    return(0, returndatasize())\\n                }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x4dacd47513eed0661ace50567273029e1246fef02d7ecacf3df26449543738ee\",\"license\":\"MIT\"},\"src/DiamondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./Diamond.sol\\\";\\n\\nimport \\\"./libraries/DiamondLib.sol\\\";\\nimport \\\"./libraries/DiamondFactoryLib.sol\\\";\\n\\nimport \\\"./interfaces/IDiamondFactory.sol\\\";\\nimport \\\"./interfaces/IMetadata.sol\\\";\\nimport \\\"./interfaces/IControllable.sol\\\";\\n\\nimport \\\"./utilities/Controllable.sol\\\";\\n\\n/// @title Diamond Factory\\n/// @notice This contract is used to create new Diamond contracts.\\ncontract DiamondFactory is Initializable, Controllable {\\n\\n    using DiamondFactoryLib for DiamondFactoryStorage;\\n\\n    event DiamondCreated(\\n        address indexed factory,\\n        string indexed symbol,\\n        DiamondSettings settings\\n    );\\n\\n    event DiamondAdd(\\n        address indexed factory,\\n        string indexed symbol,\\n        address indexed diamond\\n    );\\n\\n    event DiamondRemoved(\\n        address indexed factory,\\n        string indexed symbol,\\n        address indexed diamond\\n    );\\n\\n    constructor() {\\n        _addController(msg.sender);\\n    }\\n\\n    /// @notice initiiate the factory\\n    /// @param initData the address of the diamond init contract\\n    function initialize(DiamondFactoryInit memory initData) public initializer {\\n        DiamondFactoryLib.diamondFactoryStorage()._addFacetSet(\\n            initData.setName,\\n            initData.facetAddresses\\n        );\\n        DiamondFactoryLib\\n            .diamondFactoryStorage()\\n            .contractData\\n            .defaultFacetSet = initData.setName;\\n    }\\n\\n    /// @notice get the facets for the diamond\\n    function getFacets(string memory facetSet)\\n        external\\n        view\\n        returns (IDiamondCut.FacetCut[] memory)\\n    {\\n        return\\n            DiamondFactoryLib.diamondFactoryStorage().contractData.facetsToAdd[\\n                facetSet\\n            ];\\n    }\\n\\n    /// @notice set a template facet on this factory\\n    /// @param idx the index of the facet to set\\n    /// @param facetAddress the facet to set\\n    function setFacet(\\n        string memory facetSet,\\n        uint256 idx,\\n        IDiamondCut.FacetCut memory facetAddress\\n    ) external onlyController {\\n        DiamondFactoryLib.diamondFactoryStorage()._setFacet(\\n            facetSet,\\n            idx,\\n            facetAddress\\n        );\\n    }\\n\\n    /// @notice set a number of template facets on this factory\\n    /// @param facetSet the index of the facet to set\\n    /// @param facetAddress the facet to set\\n    function setFacets(\\n        string memory facetSet,\\n        IDiamondCut.FacetCut[] memory facetAddress\\n    ) external onlyController {\\n        DiamondFactoryLib.diamondFactoryStorage()._addFacetSet(\\n            facetSet,\\n            facetAddress\\n        );\\n    }\\n\\n    /// @notice remote a facet set from the factory\\n    /// @param facetSet the facet set to remove\\n    function removeFacets(string memory facetSet) external onlyController {\\n        delete DiamondFactoryLib\\n            .diamondFactoryStorage()\\n            .contractData\\n            .facetsToAdd[facetSet];\\n    }\\n\\n    /// @notice get the address of the diamond\\n    /// @param symbol the symbol of the diamond\\n    /// @return the address of the diamond\\n    function getDiamondAddress(string memory symbol)\\n        public\\n        view\\n        returns (address)\\n    {\\n        return\\n            DiamondFactoryLib.diamondFactoryStorage()._getDiamondAddress(\\n                address(this),\\n                symbol,\\n                type(Diamond).creationCode\\n            );\\n    }\\n\\n    /// @notice create a new diamond token with the given symbol\\n    /// @param params diamond init parameters\\n    /// @param diamondInit the diamond init contract\\n    /// @param _calldata the calldata to pass to the diamond init contract\\n    function create(\\n        DiamondSettings memory params,\\n        address diamondInit,\\n        bytes calldata _calldata,\\n        IDiamondCut.FacetCut[] memory facets\\n    ) public onlyController returns (address payable diamondAddress) {\\n        // get the factory storage context, error if token already exists\\n        require(\\n            DiamondFactoryLib\\n                .diamondFactoryStorage()\\n                .contractData\\n                .diamondAddresses[params.symbol] == address(0),\\n            \\\"exists\\\"\\n        );\\n        diamondAddress = DiamondFactoryLib.diamondFactoryStorage().create(\\n            address(this),\\n            params,\\n            diamondInit,\\n            _calldata,\\n            type(Diamond).creationCode,\\n            facets\\n        );\\n        emit DiamondCreated(address(this), params.symbol, params);\\n    }\\n\\n    /// @notice create a new diamond token with the given symbol\\n    /// @param params diamond init parameters\\n    /// @param diamondInit the diamond init contract\\n    /// @param _calldata the calldata to pass to the diamond init contract\\n    function createFromSet(\\n        DiamondSettings memory params,\\n        address diamondInit,\\n        bytes calldata _calldata,\\n        string memory facets\\n    ) public onlyController returns (address payable diamondAddress) {\\n        // get the factory storage context, error if token already exists\\n        require(\\n            DiamondFactoryLib\\n                .diamondFactoryStorage()\\n                .contractData\\n                .diamondAddresses[params.symbol] == address(0),\\n            \\\"exists\\\"\\n        );\\n        diamondAddress = DiamondFactoryLib.diamondFactoryStorage().createFromSet(\\n            address(this),\\n            params,\\n            diamondInit,\\n            _calldata,\\n            type(Diamond).creationCode,\\n            facets\\n        );\\n        emit DiamondCreated(address(this), params.symbol, params);\\n    }\\n\\n    /// @notice add an existing diamong to the factory. it will then be returned by the getDiamondAddress function\\n    /// @param symbol the symbol of the diamond\\n    /// @param diamondAddress the address of the diamond\\n    function add(string memory symbol, address payable diamondAddress)\\n        public\\n        onlyController\\n    {\\n        // get the factory storage context, error if token already exists\\n        require(\\n            DiamondFactoryLib\\n                .diamondFactoryStorage()\\n                .contractData\\n                .diamondAddresses[symbol] == address(0),\\n            \\\"exists\\\"\\n        );\\n        DiamondFactoryLib.diamondFactoryStorage().add(symbol, diamondAddress);\\n        emit DiamondAdd(address(this), symbol, diamondAddress);\\n    }\\n\\n    /// @notice remove a diamond from this factory\\n    /// @param symbol the symbol of the diamond to remove\\n    function remove(string memory symbol) public onlyController {\\n        DiamondFactoryLib.diamondFactoryStorage().remove(symbol);\\n        emit DiamondRemoved(\\n            address(this),\\n            symbol,\\n            DiamondFactoryLib\\n                .diamondFactoryStorage()\\n                .contractData\\n                .diamondAddresses[symbol]\\n        );\\n    }\\n\\n    /// @notice check if the token exists\\n    /// @param symbol the symbol of the diamond to check\\n    function exists(string memory symbol) public view returns (bool) {\\n        return\\n            DiamondFactoryLib\\n                .diamondFactoryStorage()\\n                .contractData\\n                .diamondAddresses[symbol] != address(0);\\n    }\\n\\n    /// @notice get all the symbols from the factory\\n    /// @return the symbols\\n    function symbols() public view returns (string[] memory) {\\n        return\\n            DiamondFactoryLib\\n                .diamondFactoryStorage()\\n                .contractData\\n                .diamondSymbols;\\n    }\\n}\\n\",\"keccak256\":\"0x04e03e3d5cc691e066dd5dda898efd3e60e1bed1297fb63b9162290484af1f7d\",\"license\":\"MIT\"},\"src/interfaces/IControllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice a controllable contract interface. allows for controllers to perform privileged actions. controllera can other controllers and remove themselves.\\r\\ninterface IControllable {\\r\\n\\r\\n    /// @notice emitted when a controller is added.\\r\\n    event ControllerAdded(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice emitted when a controller is removed.\\r\\n    event ControllerRemoved(\\r\\n        address indexed contractAddress,\\r\\n        address indexed controllerAddress\\r\\n    );\\r\\n\\r\\n    /// @notice adds a controller.\\r\\n    /// @param controller the controller to add.\\r\\n    function addController(address controller) external;\\r\\n\\r\\n    /// @notice removes a controller.\\r\\n    /// @param controller the address to check\\r\\n    /// @return true if the address is a controller\\r\\n    function isController(address controller) external view returns (bool);\\r\\n\\r\\n    /// @notice remove ourselves from the list of controllers.\\r\\n    function relinquishControl() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x15f5c4f8732a9caffb811a8ebf9aeba41a108e58634607c0700a46a891edf2ec\",\"license\":\"MIT\"},\"src/interfaces/IDiamond.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n\\nstruct DiamondSettings {\\n  address owner;\\n  address factory;\\n  address svgManager;\\n  string symbol;\\n  string name;\\n}\\n\\nstruct DiamondContract {\\n  DiamondSettings settings;\\n  mapping(string=>string) metadata;\\n}\\n\\nstruct DiamondStorage {\\n  DiamondContract diamondContract;\\n}\\n\",\"keccak256\":\"0x90b27fde3d5f0326fb86afa7086c6c342dce37ca31d0b612010d5123977e4837\",\"license\":\"MIT\"},\"src/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x07ab94171f8bf7530b1925a870887671702c22cdebe78952c9dda46eaad01c54\",\"license\":\"MIT\"},\"src/interfaces/IDiamondFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport { IDiamondCut } from \\\"./IDiamondCut.sol\\\";\\n\\nstruct DiamondFactoryInit {\\n    string setName;\\n    IDiamondCut.FacetCut[] facetAddresses;\\n}\\n\\nstruct DiamondFactoryContract {\\n    string[] diamondSymbols;\\n    mapping(string => address) diamondAddresses;\\n    mapping(string => IDiamondCut.FacetCut[]) facetsToAdd;\\n    string defaultFacetSet;\\n    address diamondInit_;\\n    bytes calldata_;\\n}\\n\\n\\nstruct DiamondFactoryStorage {\\n  DiamondFactoryContract contractData;\\n}\\n\",\"keccak256\":\"0x9b5efc1ec02e475a33409c034645b15c1b6cb554977a2b1bd90ed8ba0f244f99\",\"license\":\"MIT\"},\"src/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\n// A loupe is a small magnifying glass used to look at diamonds.\\r\\n// These functions look at diamonds\\r\\ninterface IDiamondLoupe {\\r\\n    /// These functions are expected to be called frequently\\r\\n    /// by tools.\\r\\n\\r\\n    struct Facet {\\r\\n        address facetAddress;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\r\\n    /// @return facets_ Facet\\r\\n    function facets() external view returns (Facet[] memory facets_);\\r\\n\\r\\n    /// @notice Gets all the function selectors supported by a specific facet.\\r\\n    /// @param _facet The facet address.\\r\\n    /// @return facetFunctionSelectors_\\r\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\r\\n\\r\\n    /// @notice Get all the facet addresses used by a diamond.\\r\\n    /// @return facetAddresses_\\r\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\r\\n\\r\\n    /// @notice Gets the facet that supports the given selector.\\r\\n    /// @dev If facet is not found return address(0).\\r\\n    /// @param _functionSelector The function selector.\\r\\n    /// @return facetAddress_ The facet address.\\r\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\r\\n}\\r\\n\",\"keccak256\":\"0x817840c97d3fb575971952db3d5096b1f843bffe3176d675cacb18e656f9d2a3\",\"license\":\"MIT\"},\"src/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x84fe28f479bf96f1819514dd8493ae15955eda0dbabcbb5f24c3c935075a31d4\",\"license\":\"MIT\"},\"src/interfaces/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/* solhint-disable indent */\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct TokenOwnership {\\n    address addr; // The address of the owner.\\n    uint64 startTimestamp; // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n    bool burned; // Whether the token has been burned.\\n}\\n\\n// Compiler will pack this into a single 256bit word.\\nstruct AddressData {\\n    \\n    uint64 balance; // Realistically, 2**64-1 is more than enough.\\n    uint64 numberMinted; // Keeps track of mint count with minimal overhead for tokenomics.\\n    uint64 numberBurned; // Keeps track of burn count with minimal overhead for tokenomics.\\n    // For miscellaneous variable(s) pertaining to the address\\n    // (e.g. number of whitelist mint slots used).\\n    // If there are multiple variables, please pack them into a uint64.\\n    uint64 aux;\\n}\\n\\nstruct ERC721AContract {\\n    // The tokenId of the next token to be minted.\\n    uint256 _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 _burnCounter;\\n\\n    // Token name\\n    string _name;\\n\\n    // Token symbol\\n    string _symbol;\\n\\n    // the base uri\\n    string __uri;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned. See ownershipOf implementation for details.\\n    mapping(uint256 => TokenOwnership) _ownerships;\\n\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) _addressData;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) _operatorApprovals;\\n}\\n\",\"keccak256\":\"0x634d9a8fdde7f739bbda7288e3c862cacaa97b0a75183027398bce021bc6d2ee\",\"license\":\"MIT\"},\"src/interfaces/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nstruct ERC721EnumerableContract {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) _allTokensIndex;\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7f76086c568a2873d3b092a896af66068f061474955c1442fe1eb3cbe3d649a2\",\"license\":\"MIT\"},\"src/interfaces/IMetadata.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n\\n/* solhint-disable indent */\\n\\n// enum metadatasource\\nenum MetadataSource {\\n    EXTERNAL, INTERNAL\\n}\\n\\nstruct Trait {\\n    string displayType;\\n    string key;\\n    string value;\\n}\\n\\nstruct MetadataContract {\\n    string _name;\\n    string _symbol;\\n    string _description;\\n    string _imageName;\\n    string[] _imageColors;\\n    string _externalUri;\\n    MetadataSource _metadataSource;\\n    string _baseUri;\\n}\\n\",\"keccak256\":\"0xd07316378fb6037efafa643984cf999cd9fa810b6afa580015c397aa291aa810\",\"license\":\"MIT\"},\"src/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice the definition for a token.\\r\\nstruct TokenDefinition {\\r\\n    address token;\\r\\n    string name;\\r\\n    string symbol;\\r\\n    string description;\\r\\n    uint256 totalSupply;\\r\\n    string imageName;\\r\\n    string[] imagePalette;\\r\\n    string externalUrl;\\r\\n}\\r\\n\\r\\nenum TokenType {\\r\\n    ERC20,\\r\\n    ERC721,\\r\\n    ERC1155\\r\\n}\",\"keccak256\":\"0x994fc2b4019b0b7faf4fe5cd7e39934be73edb915c7205e3285c58cd4db3516b\",\"license\":\"MIT\"},\"src/libraries/DiamondFactoryLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\nimport { TokenDefinition } from \\\"../interfaces/IToken.sol\\\";\\n\\nimport \\\"../interfaces/IDiamondFactory.sol\\\";\\nimport \\\"../interfaces/IDiamond.sol\\\";\\n\\ninterface IDiamondElement {\\n  function initialize(\\n    address, \\n    DiamondSettings memory,\\n    IDiamondCut.FacetCut[] calldata,\\n    address,\\n    bytes calldata) external payable;\\n}\\n\\nlibrary DiamondFactoryLib {\\n\\n  bytes32 internal constant DIAMOND_STORAGE_POSITION =\\n    keccak256(\\\"diamond.nextblock.bitgem.app.DiamondFactoryStorage.storage\\\");\\n\\n  /// @notice get the storage for the diamond factory\\n  /// @return ds DiamondFactoryStorage the storage for the diamond factory\\n  function diamondFactoryStorage() internal pure returns (DiamondFactoryStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n\\n  /// @notice add a set of facets to the factory and associate with a string name\\n  /// @param self the storage for the diamond factory\\n  /// @param setName the name of the set of facets\\n  /// @param facets the facets to add\\n  function _addFacetSet(DiamondFactoryStorage storage self, string memory setName, IDiamondCut.FacetCut[] memory facets) internal {\\n    // add the facets to the diamond\\n    for (uint256 i = 0; i < facets.length; i++) {\\n      self.contractData.facetsToAdd[setName].push(facets[i]);\\n    }\\n  }\\n\\n  /// @notice get all the facets for a particular set name\\n  /// @param self the storage for the diamond factory\\n  /// @param setName the name of the set of facets\\n  /// @return IDiamondCut.FacetCut[] the facets for the set name\\n  function _getFacets(DiamondFactoryStorage storage self, string memory setName) internal view returns (IDiamondCut.FacetCut[] memory) {\\n    return self.contractData.facetsToAdd[setName];\\n  }\\n\\n  /// @notice set a facet for facet set name at a particular index\\n  /// @param self the storage for the diamond factory\\n  /// @param setName the name of the set of facets\\n  /// @param idx the index of the facet to set\\n  /// @param facet the facet to set\\n  function _setFacet(DiamondFactoryStorage storage self, string memory setName, uint256 idx, IDiamondCut.FacetCut memory facet) internal {\\n    self.contractData.facetsToAdd[setName][idx] = facet;        \\n  }\\n\\n  /// @notice get an address for the given diamond\\n  /// @param factoryAddress the diamond factory\\n  /// @param symbol the symbol of the  diamond\\n  /// @param creationCode the creation code for the diamond\\n  function _getDiamondAddress(DiamondFactoryStorage storage, address factoryAddress, string memory symbol, bytes memory creationCode)\\n    internal\\n    view\\n    returns (address) {\\n    return Create2.computeAddress(\\n      keccak256(abi.encodePacked(factoryAddress, symbol)),\\n      keccak256(creationCode)\\n    );\\n  }\\n\\n    /// @notice create a new diamond token with the given symbol\\n    /// @param self the storage for the diamond factory\\n    /// @param diamondAddress the diamond address\\n    /// @param diamondInit the diamond init data\\n    /// @param _calldata  the calldata for the diamond\\n    /// @param _creationCode the creation code for the diamond\\n    function create(\\n        DiamondFactoryStorage storage self,\\n        address diamondAddress,\\n        DiamondSettings memory params,\\n        address diamondInit,\\n        bytes calldata _calldata,\\n        bytes memory _creationCode,\\n        IDiamondCut.FacetCut[] memory facets\\n    ) internal returns (address payable _diamondAddress) {\\n        // use create2 to create the token\\n        _diamondAddress = payable(\\n            Create2.deploy(\\n                0,\\n                keccak256(abi.encodePacked(diamondAddress, params.symbol)),\\n                _creationCode\\n            )\\n        );\\n        require(_diamondAddress != address(0), \\\"create_failed\\\");\\n        \\n        // update storage with the new data\\n        self.contractData.diamondAddresses[params.symbol] = _diamondAddress;\\n        self.contractData.diamondSymbols.push(params.symbol);\\n\\n        // initialize the diamond contract\\n        IDiamondElement(_diamondAddress).initialize(\\n            msg.sender,\\n            params,\\n            facets,\\n            diamondInit,\\n            _calldata\\n        );\\n    }\\n\\n    /// @notice create a new diamond token with the given symbol\\n    /// @param self the storage for the diamond factory\\n    /// @param diamondAddress the diamond address\\n    /// @param diamondInit the diamond init data\\n    /// @param _calldata  the calldata for the diamond\\n    /// @param _creationCode the creation code for the diamond\\n    function createFromSet(\\n        DiamondFactoryStorage storage self,\\n        address diamondAddress,\\n        DiamondSettings memory params,\\n        address diamondInit,\\n        bytes calldata _calldata,\\n        bytes memory _creationCode,\\n        string memory facetSet\\n    ) internal returns (address payable _diamondAddress) {\\n        // use create2 to create the token\\n        _diamondAddress = payable(\\n            Create2.deploy(\\n                0,\\n                keccak256(abi.encodePacked(diamondAddress, params.symbol)),\\n                _creationCode\\n            )\\n        );\\n        require(_diamondAddress != address(0), \\\"create_failed\\\");\\n        \\n        // update storage with the new data\\n        self.contractData.diamondAddresses[params.symbol] = _diamondAddress;\\n        self.contractData.diamondSymbols.push(params.symbol);\\n\\n        // initialize the diamond contract\\n        IDiamondElement(_diamondAddress).initialize(\\n            msg.sender,\\n            params,\\n            self.contractData.facetsToAdd[facetSet],\\n            diamondInit,\\n            _calldata\\n        );\\n    }\\n\\n    /// @notice add an existing diamond to this factory\\n    /// @param self the storage for the diamond factory\\n    /// @param symbol the symbol of the diamond\\n    /// @param diamondAddress the address of the diamond\\n    function add(\\n        DiamondFactoryStorage storage self,\\n        string memory symbol,\\n        address payable diamondAddress\\n    ) internal {\\n        // update storage with the new data\\n        self.contractData.diamondAddresses[symbol] = diamondAddress;\\n        self.contractData.diamondSymbols.push(symbol);\\n    }\\n\\n    /// @notice remove a diamond from this factory\\n    /// @param self the storage for the diamond factory\\n    /// @param symbol the symbol of the diamond\\n    function remove(\\n      DiamondFactoryStorage storage self,\\n      string memory symbol\\n    ) internal {\\n        self.contractData.diamondAddresses[symbol] = address(0);\\n        for(uint256 i = 0; i < self.contractData.diamondSymbols.length; i++) {\\n            if ( keccak256(bytes(self.contractData.diamondSymbols[i] ) ) == keccak256(bytes(symbol)) ) {\\n                self.contractData.diamondSymbols[i] = self.contractData.diamondSymbols[self.contractData.diamondSymbols.length - 1];\\n                self.contractData.diamondSymbols.pop();\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x227aedf9bfdd6b521644772f356e5ad9b8ff8c8f769b981c871af99b1b417eae\",\"license\":\"MIT\"},\"src/libraries/DiamondLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { DiamondStorage } from \\\"../interfaces/IDiamond.sol\\\";\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\nimport { TokenDefinition } from \\\"../interfaces/IToken.sol\\\";\\n\\nimport \\\"./LibDiamond.sol\\\";\\nimport \\\"./ERC721ALib.sol\\\";\\n\\nimport \\\"../upgradeInitializers/DiamondInit.sol\\\";\\n\\nlibrary DiamondLib {\\n\\n  bytes32 internal constant DIAMOND_STORAGE_POSITION =\\n    keccak256(\\\"diamond.nextblock.bitgem.app.DiamondStorage.storage\\\");\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd2f734381f5810b5948f7c571b0a8e97eeb911928a89b9c77a0706f2543519e4\",\"license\":\"MIT\"},\"src/libraries/ERC721ALib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Creator: Chiru Labs\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\n\\nimport \\\"../interfaces/IERC721A.sol\\\";\\nimport \\\"../interfaces/IERC721Enumerable.sol\\\";\\n\\n\\n/* solhint-disable indent */\\n/* solhint-disable mark-callable-contracts */\\n\\nerror ApprovalCallerNotOwnerNorApproved();\\nerror ApprovalQueryForNonexistentToken();\\nerror ApproveToCaller();\\nerror ApprovalToCurrentOwner();\\nerror BalanceQueryForZeroAddress();\\nerror MintedQueryForZeroAddress();\\nerror BurnedQueryForZeroAddress();\\nerror AuxQueryForZeroAddress();\\nerror MintToZeroAddress();\\nerror MintZeroQuantity();\\nerror OwnerIndexOutOfBounds();\\nerror OwnerQueryForNonexistentToken();\\nerror TokenIndexOutOfBounds();\\nerror TransferCallerNotOwnerNorApproved();\\nerror TransferFromIncorrectOwner();\\nerror TransferToNonERC721ReceiverImplementer();\\nerror TransferToZeroAddress();\\nerror URIQueryForNonexistentToken();\\n\\nstruct ERC721AStorage {\\n    ERC721EnumerableContract enumerations;\\n    ERC721AContract erc721Contract;\\n}\\n\\nlibrary ERC721ALib {\\n\\n    using Strings for uint256;\\n    using Address for address;\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nextblock.bitgem.app.ERC721AStorage.storage\\\");\\n\\n    function erc721aStorage() internal pure returns (ERC721AStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * Returns the total number of minted tokens\\n     */\\n    function totalSupply(ERC721AContract storage self) internal view returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than _currentIndex times\\n        unchecked {\\n            return self._currentIndex - self._burnCounter;\\n        }\\n    }\\n    \\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(ERC721AContract storage self, address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return uint256(self._addressData[owner].balance);\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(ERC721AContract storage self, address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert MintedQueryForZeroAddress();\\n        return uint256(self._addressData[owner].numberMinted);\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(ERC721AContract storage self, address owner) internal view returns (uint256) {\\n        if (owner == address(0)) revert BurnedQueryForZeroAddress();\\n        return uint256(self._addressData[owner].numberBurned);\\n    }\\n\\n    /**\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(ERC721AContract storage self, address owner) internal view returns (uint64) {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        return self._addressData[owner].aux;\\n    }\\n\\n    /**\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(ERC721AContract storage self, address owner, uint64 aux) internal {\\n        if (owner == address(0)) revert AuxQueryForZeroAddress();\\n        self._addressData[owner].aux = aux;\\n    }\\n\\n    function ownershipOf(ERC721AContract storage self, uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        uint256 curr = tokenId;\\n        unchecked {\\n            if (curr < self._currentIndex) {\\n                TokenOwnership memory ownership = self._ownerships[curr];\\n                if (!ownership.burned) {\\n                    if (ownership.addr != address(0)) {\\n                        return ownership;\\n                    }\\n                    // Invariant:\\n                    // There will always be an ownership that has an address and is not burned\\n                    // before an ownership that does not have an address and is not burned.\\n                    // Hence, curr will not underflow.\\n                    while (true) {\\n                        curr--;\\n                        ownership = self._ownerships[curr];\\n                        if (ownership.addr != address(0)) {\\n                            return ownership;\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(ERC721AContract storage self, uint256 tokenId) internal view returns (bool) {\\n        return tokenId < self._currentIndex && !self._ownerships[tokenId].burned;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(ERC721AContract storage self, uint256 tokenId) internal view returns (address) {\\n        if (!_exists(self, tokenId)) revert ApprovalQueryForNonexistentToken();\\n        return self._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(ERC721AContract storage self, address sender, address operator, bool approved) internal {\\n        self._operatorApprovals[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(ERC721AContract storage self, address owner, address operator) internal view returns (bool) {\\n        return self._operatorApprovals[owner][operator];\\n    }\\n\\n    function currentIndex(ERC721AContract storage self) internal view returns (uint256) {\\n        return self._currentIndex;\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(\\n        ERC721AContract storage self,\\n        address msgSender,\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data,\\n        bool safe\\n    ) internal {\\n        // Overflows are incredibly unrealistic.\\n        // balance or numberMinted overflow if current value of either + quantity > 1.8e19 (2**64) - 1\\n        // updatedIndex overflows if _currentIndex + quantity > 1.2e77 (2**256) - 1\\n        uint256 startTokenId = self._currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(self, address(0), to, startTokenId, quantity);\\n\\n        unchecked {\\n            self._addressData[to].balance += uint64(quantity);\\n            self._addressData[to].numberMinted += uint64(quantity);\\n\\n            self._ownerships[startTokenId].addr = to;\\n            self._ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\n\\n            uint256 updatedIndex = startTokenId;\\n\\n            for (uint256 i; i < quantity; i++) {\\n                emit Transfer(address(0), to, updatedIndex);\\n                if (safe && !_checkOnERC721Received(msgSender, address(0), to, updatedIndex, _data)) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                }\\n                updatedIndex++;\\n            }\\n\\n            self._currentIndex = updatedIndex;\\n        }\\n\\n        _afterTokenTransfers(self, address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        ERC721AContract storage self,\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal {\\n        TokenOwnership memory prevOwnership = ownershipOf(self, tokenId);\\n\\n        bool isApprovedOrOwner = (msgSender == prevOwnership.addr ||\\n            isApprovedForAll(self, prevOwnership.addr, msgSender) ||\\n            getApproved(self, tokenId) == msgSender);\\n\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(self, from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(self, address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            self._addressData[from].balance -= 1;\\n            self._addressData[to].balance += 1;\\n\\n            self._ownerships[tokenId].addr = to;\\n            self._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self._currentIndex) {\\n                    self._ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    self._ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(self, from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(ERC721AContract storage self, uint256 tokenId) internal {\\n        TokenOwnership memory prevOwnership = ownershipOf(self, tokenId);\\n\\n        _beforeTokenTransfers(self, prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(self, address(0), tokenId, prevOwnership.addr);\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            self._addressData[prevOwnership.addr].balance -= 1;\\n            self._addressData[prevOwnership.addr].numberBurned += 1;\\n\\n            // Keep track of who burned the token, and the timestamp of burning.\\n            self._ownerships[tokenId].addr = prevOwnership.addr;\\n            self._ownerships[tokenId].startTimestamp = uint64(block.timestamp);\\n            self._ownerships[tokenId].burned = true;\\n\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\n            uint256 nextTokenId = tokenId + 1;\\n            if (self._ownerships[nextTokenId].addr == address(0)) {\\n                // This will suffice for checking _exists(nextTokenId),\\n                // as a burned slot cannot contain the zero address.\\n                if (nextTokenId < self._currentIndex) {\\n                    self._ownerships[nextTokenId].addr = prevOwnership.addr;\\n                    self._ownerships[nextTokenId].startTimestamp = prevOwnership.startTimestamp;\\n                }\\n            }\\n        }\\n\\n        emit Transfer(prevOwnership.addr, address(0), tokenId);\\n        _afterTokenTransfers(self, prevOwnership.addr, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            self._burnCounter++;\\n        }\\n    }\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(\\n        ERC721AContract storage self,\\n        address to,\\n        uint256 tokenId,\\n        address owner\\n    ) internal {\\n        self._tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address msgSender,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msgSender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        ERC721AContract storage self,\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        ERC721AContract storage self,\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal {}\\n}\",\"keccak256\":\"0x6be1ef523cad5ab7dd0108aad76989fbf02eaf2b7752afe24b849a6a74b8e839\",\"license\":\"MIT\"},\"src/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        //require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x7d27d5d7b127f3e393382dcd010fa37b5182d32c8fe91ad950188963a8c3cea6\",\"license\":\"MIT\"},\"src/upgradeInitializers/DiamondInit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Metadata.sol\\\";\\n\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { IDiamondLoupe } from \\\"../interfaces/IDiamondLoupe.sol\\\";\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport { IERC173 } from \\\"../interfaces/IERC173.sol\\\";\\n\\n// It is expected that this contract is customized if you want to deploy your diamond\\n// with data from a deployment script. Use the init function to initialize state variables\\n// of your diamond. Add parameters to the init funciton if you need to.\\n\\ncontract DiamondInit {    \\n\\n    // You can add parameters to this function in order to pass in \\n    // data to set your own state variables\\n    function init() external {        \\n\\n    }\\n\\n}\\n\",\"keccak256\":\"0x61c5408d03a8b99ec18b53efcde99f77b6488e76b625aa6c77fbf8539beed20b\",\"license\":\"MIT\"},\"src/utilities/Controllable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/IControllable.sol\\\";\\r\\n\\r\\nabstract contract Controllable is IControllable {\\r\\n    mapping(address => bool) internal _controllers;\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account not in authorized list\\r\\n     */\\r\\n    modifier onlyController() virtual {\\r\\n        require(\\r\\n            _controllers[msg.sender] == true || address(this) == msg.sender,\\r\\n            \\\"caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add an address allowed to control this contract\\r\\n     */\\r\\n    function addController(address _controller)\\r\\n        external\\r\\n        override\\r\\n        onlyController\\r\\n    {\\r\\n        _addController(_controller);\\r\\n    }\\r\\n    function _addController(address _controller) internal {\\r\\n        _controllers[_controller] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if this address is a controller\\r\\n     */\\r\\n    function isController(address _address)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _isController(_address);\\r\\n    }\\r\\n    function _isController(address _address)\\r\\n        internal view\\r\\n        returns (bool allowed)\\r\\n    {\\r\\n        allowed = _controllers[_address];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove the sender address from the list of controllers\\r\\n     */\\r\\n    function relinquishControl() external override onlyController {\\r\\n        _relinquishControl();\\r\\n    }\\r\\n    function _relinquishControl() internal onlyController{\\r\\n        delete _controllers[msg.sender];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8ecd3dbef92020332fa9e63f82871d6832e55ed630818f223784c73d6fe23fd2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {
    "AddressSet": "0xe816f9c968c92bef011eabc25bb1e062f23f0ce3",
    "AttributeLib": "0x54b27B50D22583c3F8D44062105fa3746092F98D",
    "Base64": "0x18f7751ECdE5e9A20F7ba3b3E6419e5486dce02C",
    "Bytes32Set": "0xF8cF9DDd669304191Db084053CB0CB2B996721A8",
    "ClaimStorageLib": "0xb355293012312F75756CE66d5D6208D50E9570D9",
    "ClaimTopicLib": "0xfA5F92fB7D658b83Bd8eb891CFa1de03B2dE6ca0",
    "DiamondFactoryLib": "0x5e3a72a725e885D3297Df110fed8513c1A89590F",
    "DiamondLib": "0xfF3811e752E2fB8ca0192Ac977ec7EE0154C27D7",
    "ERC721AEnumerationLib": "0x3862fD7Aee0687c461D40A3c6AbaD9bD9F15e6c4",
    "ERC721ALib": "0x185d29cB9B14a6EA5d114534EF1A99C205d13204",
    "IdentityLib": "0x8187074C0542Adc6f8679958106A546F2Ac498cc",
    "LibDiamond": "0x0ef6EE0407615E57bC04bF16C21a9aeA1530f650",
    "MetadataLib": "0xFFa8D07fA502AbD668CFdba501999F3074f1a78c",
    "StringsLib": "0xfe30ea7bcFa85debB8FC3c8AA925ebEb22011b6f",
    "Strings": "0x9fF441f16e0163DCa2109c376d15348b3001232D",
    "SVGTemplatesLib": "0xB66E75ed2C1202b29F37e862e00CdA37B4edA8A3",
    "TrustedIssuerLib": "0x2DE50b277A2b56220F676E9C84524f9c3fdc12F3",
    "UInt256Set": "0xCA610CCce4b2aB25Adc1072a0C21df42320478A3",
    "IdentityFactory": "0xEA0f9DE12192E09bA196a2819081c196BAc99104"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(string,address)": {
        "params": {
          "diamondAddress": "the address of the diamond",
          "symbol": "the symbol of the diamond"
        }
      },
      "addController(address)": {
        "details": "Add an address allowed to control this contract"
      },
      "create((address,address,address,string,string),address,bytes,(address,uint8,bytes4[])[])": {
        "params": {
          "_calldata": "the calldata to pass to the diamond init contract",
          "diamondInit": "the diamond init contract",
          "params": "diamond init parameters"
        }
      },
      "createFromSet((address,address,address,string,string),address,bytes,string)": {
        "params": {
          "_calldata": "the calldata to pass to the diamond init contract",
          "diamondInit": "the diamond init contract",
          "params": "diamond init parameters"
        }
      },
      "exists(string)": {
        "params": {
          "symbol": "the symbol of the diamond to check"
        }
      },
      "getDiamondAddress(string)": {
        "params": {
          "symbol": "the symbol of the diamond"
        },
        "returns": {
          "_0": "the address of the diamond"
        }
      },
      "initialize((string,(address,uint8,bytes4[])[]))": {
        "params": {
          "initData": "the address of the diamond init contract"
        }
      },
      "isController(address)": {
        "details": "Check if this address is a controller"
      },
      "relinquishControl()": {
        "details": "Remove the sender address from the list of controllers"
      },
      "remove(string)": {
        "params": {
          "symbol": "the symbol of the diamond to remove"
        }
      },
      "removeFacets(string)": {
        "params": {
          "facetSet": "the facet set to remove"
        }
      },
      "setFacet(string,uint256,(address,uint8,bytes4[]))": {
        "params": {
          "facetAddress": "the facet to set",
          "idx": "the index of the facet to set"
        }
      },
      "setFacets(string,(address,uint8,bytes4[])[])": {
        "params": {
          "facetAddress": "the facet to set",
          "facetSet": "the index of the facet to set"
        }
      },
      "symbols()": {
        "returns": {
          "_0": "the symbols"
        }
      }
    },
    "title": "Diamond Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ControllerAdded(address,address)": {
        "notice": "emitted when a controller is added."
      },
      "ControllerRemoved(address,address)": {
        "notice": "emitted when a controller is removed."
      }
    },
    "kind": "user",
    "methods": {
      "add(string,address)": {
        "notice": "add an existing diamong to the factory. it will then be returned by the getDiamondAddress function"
      },
      "create((address,address,address,string,string),address,bytes,(address,uint8,bytes4[])[])": {
        "notice": "create a new diamond token with the given symbol"
      },
      "createFromSet((address,address,address,string,string),address,bytes,string)": {
        "notice": "create a new diamond token with the given symbol"
      },
      "exists(string)": {
        "notice": "check if the token exists"
      },
      "getDiamondAddress(string)": {
        "notice": "get the address of the diamond"
      },
      "getFacets(string)": {
        "notice": "get the facets for the diamond"
      },
      "initialize((string,(address,uint8,bytes4[])[]))": {
        "notice": "initiiate the factory"
      },
      "remove(string)": {
        "notice": "remove a diamond from this factory"
      },
      "removeFacets(string)": {
        "notice": "remote a facet set from the factory"
      },
      "setFacet(string,uint256,(address,uint8,bytes4[]))": {
        "notice": "set a template facet on this factory"
      },
      "setFacets(string,(address,uint8,bytes4[])[])": {
        "notice": "set a number of template facets on this factory"
      },
      "symbols()": {
        "notice": "get all the symbols from the factory"
      }
    },
    "notice": "This contract is used to create new Diamond contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 211,
        "contract": "src/DiamondFactory.sol:DiamondFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 214,
        "contract": "src/DiamondFactory.sol:DiamondFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 23774,
        "contract": "src/DiamondFactory.sol:DiamondFactory",
        "label": "_controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}