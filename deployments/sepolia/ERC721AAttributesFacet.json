{
  "address": "0x76350d10286882D264bC7a15b015Cb5Df90dFe3C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "getAttribute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string"
            },
            {
              "internalType": "enum AttributeType",
              "name": "attributeType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "value",
              "type": "string"
            }
          ],
          "internalType": "struct Attribute",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAttributeKeys",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string"
            },
            {
              "internalType": "enum AttributeType",
              "name": "attributeType",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "value",
              "type": "string"
            }
          ],
          "internalType": "struct Attribute",
          "name": "attrib",
          "type": "tuple"
        }
      ],
      "name": "setAttribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8f327c944bf07ed47db8b805514da38c573ee7e749e63cf44d4a345a5d5e09e",
  "receipt": {
    "to": null,
    "from": "0x3AAF0e6023A2745FB62052c1954260559fFF4947",
    "contractAddress": "0x76350d10286882D264bC7a15b015Cb5Df90dFe3C",
    "transactionIndex": 14,
    "gasUsed": "730375",
    "logsBloom": "0x
    "blockHash": "0x6311b6847f3ed9d267d7536a922309f0fdc36848346f61a8b5db7a07894bf3fe",
    "transactionHash": "0xf8f327c944bf07ed47db8b805514da38c573ee7e749e63cf44d4a345a5d5e09e",
    "logs": [],
    "blockNumber": 3879124,
    "cumulativeGasUsed": "16268798",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dbcfcf842e810514aedd8e426522bfbb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"enum AttributeType\",\"name\":\"attributeType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct Attribute\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAttributeKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"enum AttributeType\",\"name\":\"attributeType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct Attribute\",\"name\":\"attrib\",\"type\":\"tuple\"}],\"name\":\"setAttribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721AAttributes\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setAttribute(uint256,(string,uint8,string))\":{\"notice\":\"set an attribute value\"}},\"notice\":\"the total balance of a token type\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/ERC721/ERC721AAttributesFacet.sol\":\"ERC721AAttributesFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/interfaces/IAttribute.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\nenum AttributeType {\\r\\n    Unknown,\\r\\n    String ,\\r\\n    Bytes32,\\r\\n    Uint256,\\r\\n    Uint8,\\r\\n    Uint256Array,\\r\\n    Uint8Array\\r\\n}\\r\\n\\r\\nstruct Attribute {\\r\\n    string key;\\r\\n    AttributeType attributeType;\\r\\n    string value;\\r\\n}\\r\\n\\r\\n// attribute storage\\r\\nstruct AttributeContract {\\r\\n    mapping(uint256 => bool)  burnedIds;\\r\\n    mapping(uint256 => mapping(string => Attribute))  attributes;\\r\\n    mapping(uint256 => string[]) attributeKeys;\\r\\n    mapping(uint256 =>  mapping(string => uint256)) attributeKeysIndexes;\\r\\n}\\r\\n\\r\\n\\r\\n/// @notice a pool of tokens that users can deposit into and withdraw from\\r\\ninterface IAttribute {\\r\\n    /// @notice get an attribute for a tokenid keyed by string\\r\\n    function getAttribute(\\r\\n        uint256 id,\\r\\n        string memory key\\r\\n    ) external view returns (Attribute calldata _attrib);\\r\\n}\\r\\n\",\"keccak256\":\"0x120f4f33b8c5026e047bbff0e64c0316d5f4e2a0822ca49f40d01fba9e9a4aa4\",\"license\":\"MIT\"},\"src/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.6;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\\r\\n\",\"keccak256\":\"0x07ab94171f8bf7530b1925a870887671702c22cdebe78952c9dda46eaad01c54\",\"license\":\"MIT\"},\"src/libraries/AttributeLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nimport \\\"../interfaces/IAttribute.sol\\\";\\n\\nstruct AttributeStorage {\\n    AttributeContract attributes;\\n}\\n\\nlibrary AttributeLib {\\n    event AttributeSet(address indexed tokenAddress, uint256 tokenId, Attribute attribute);\\n    event AttributeRemoved(address indexed tokenAddress, uint256 tokenId, string attributeKey);\\n\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.nextblock.bitgem.app.AttributeStorage.storage\\\");\\n\\n    function attributeStorage() internal pure returns (AttributeStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    /// @notice set an attribute for a tokenid keyed by string\\n    function _getAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        string memory key\\n    ) internal view returns (Attribute memory) {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        return self.attributes[tokenId][key];\\n    }\\n\\n    /// @notice get a list of keys of attributes assigned to this tokenid\\n    function _getAttributeValues(\\n        uint256 id\\n    ) internal view returns (string[] memory) {\\n        AttributeContract storage ct = AttributeLib.attributeStorage().attributes;\\n        string[] memory keys = ct.attributeKeys[id];\\n        string[] memory values = new string[](keys.length);\\n        for (uint256 i = 0; i < keys.length; i++) {\\n            values[i] = ct.attributes[id][keys[i]].value;\\n        }\\n        return values;\\n    }\\n    \\n    /// @notice set an attribute to a tokenid keyed by string\\n    function _setAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        Attribute memory attribute\\n    ) internal {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        if (self.attributeKeysIndexes[tokenId][attribute.key] == 0 \\n            && bytes(self.attributes[tokenId][attribute.key].value).length == 0) {\\n            self.attributeKeys[tokenId].push(attribute.key);\\n            self.attributeKeysIndexes[tokenId][attribute.key] = self.attributeKeys[tokenId].length - 1;\\n        }\\n        self.attributes[tokenId][attribute.key] = attribute;\\n    }\\n    \\n    /// @notice set multiple  attributes for the token\\n    function _setAttributes(\\n        AttributeContract storage self,\\n        uint256 tokenId, \\n        Attribute[] memory _attributes)\\n        internal\\n    {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        for (uint256 i = 0; i < _attributes.length; i++) {\\n            _setAttribute(self, tokenId, _attributes[i]);\\n        }\\n    }\\n\\n    /// @notice get a list of keys of attributes assigned to this tokenid\\n    function _getAttributeKeys(\\n        AttributeContract storage self,\\n        uint256 tokenId\\n    ) internal view returns (string[] memory) {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        return self.attributeKeys[tokenId];\\n    }\\n\\n    /// @notice remove the attribute for a tokenid keyed by string\\n    function _removeAttribute(\\n        AttributeContract storage self,\\n        uint256 tokenId,\\n        string memory key\\n    ) internal {\\n        require(self.burnedIds[tokenId] == false, \\\"Token has been burned\\\");\\n        delete self.attributes[tokenId][key];\\n        uint256 ndx = self.attributeKeysIndexes[tokenId][key];\\n        for (uint256 i = ndx; i < self.attributeKeys[tokenId].length - 1; i++) {\\n            self.attributeKeys[tokenId][i] = self.attributeKeys[tokenId][i + 1];\\n            self.attributeKeysIndexes[tokenId][self.attributeKeys[tokenId][i]] = i;\\n        }\\n        delete self.attributeKeys[tokenId][self.attributeKeys[tokenId].length - 1];\\n        emit AttributeRemoved(address(this), tokenId, key);\\n    }\\n\\n    // @notice set multiple attributes for the token\\n    function _burn(\\n        AttributeContract storage self,\\n        uint256 tokenId)\\n        internal\\n    {\\n        self.burnedIds[tokenId] = true;\\n    }\\n}\",\"keccak256\":\"0xde8f8f5fb18f189d4f0709fccffe1f8ec5602cc334b576e908cb04d076a01b6c\",\"license\":\"MIT\"},\"src/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        //require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);            \\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }    \\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {        \\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0x7d27d5d7b127f3e393382dcd010fa37b5182d32c8fe91ad950188963a8c3cea6\",\"license\":\"MIT\"},\"src/tokens/ERC721/ERC721AAttributesFacet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../../interfaces/IAttribute.sol\\\";\\nimport \\\"../../libraries/AttributeLib.sol\\\";\\n\\nimport \\\"../../utilities/Modifiers.sol\\\";\\n\\n/// @title ERC721AAttributes\\n/// @notice the total balance of a token type\\ncontract ERC721AAttributesFacet is Modifiers {\\n    using AttributeLib for AttributeContract;\\n    \\n    /// @notice set an attribute for a tokenid keyed by string\\n    function _getAttribute(\\n        uint256 id,\\n        string memory key\\n    ) internal view returns (Attribute memory) {\\n        AttributeContract storage ct = AttributeLib.attributeStorage().attributes;\\n        return ct._getAttribute(id, key);\\n    }\\n    \\n    /// @notice set an attribute to a tokenid keyed by string\\n    function _setAttribute(\\n        uint256 id,\\n        Attribute memory attribute\\n    ) internal virtual {\\n        AttributeContract storage ct = AttributeLib.attributeStorage().attributes;\\n        ct._setAttribute(id, attribute);\\n    }\\n\\n    /// @notice get a list of keys of attributes assigned to this tokenid\\n    function _getAttributeKeys(\\n        uint256 id\\n    ) internal view returns (string[] memory) {\\n        AttributeContract storage ct = AttributeLib.attributeStorage().attributes;\\n        return ct.attributeKeys[id];\\n    }\\n\\n    /// @notice remove the attribute for a tokenid keyed by string\\n    function _removeAttribute(\\n        uint256 id,\\n        string memory key\\n    ) internal virtual {\\n        AttributeContract storage ct = AttributeLib.attributeStorage().attributes;\\n        ct._removeAttribute(id, key);\\n    }\\n\\n    function getAttributeKeys(\\n        uint256 id\\n    ) external view returns (string[] memory) {\\n        return _getAttributeKeys(id);\\n    }\\n\\n    function getAttribute(\\n        uint256 id,\\n        string memory key\\n    ) external view returns (Attribute memory) {\\n        return _getAttribute(id, key);\\n    }\\n\\n    /// @notice set an attribute value\\n    function setAttribute(uint256 id, Attribute memory attrib) external onlyOwner {\\n        _setAttribute(id, attrib);\\n    }\\n}  \\n\",\"keccak256\":\"0xb7136c3261bdf93c2ce90a721cf6e00b203eee1ccfeca8322da3945317083594\",\"license\":\"MIT\"},\"src/utilities/Modifiers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"../libraries/LibDiamond.sol\\\";\\n\\ncontract Modifiers {\\n\\n    modifier onlyOwner() {\\n        require(LibDiamond.contractOwner() == msg.sender || address(this) == msg.sender,\\n            \\\"not authorized to call function\\\");\\n        _;\\n    }\\n\\n    // function owner() public view returns (address) {\\n    //     return LibDiamond.contractOwner();\\n    // }\\n\\n}\",\"keccak256\":\"0x1ff9732a4c71208863e0e89890c768f96e670e132b5ca444e979b5a41a13fc41\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c40806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806325d0d9f614610046578063c536080a1461005b578063eaf1c6d314610084575b600080fd5b610059610054366004610827565b6100a4565b005b61006e6100693660046108db565b610163565b60405161007b9190610944565b60405180910390f35b6100976100923660046109c4565b610174565b60405161007b9190610a21565b336100e37fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16148061010457503033145b6101555760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e0060448201526064015b60405180910390fd5b61015f82826101a1565b5050565b606061016e826101d2565b92915050565b6040805160608082018352808252600060208301529181019190915261019a83836102f3565b9392505050565b7f264f51f07aa3d51ea784d74d6ff6227c6463cf789f1512b893918a8860f146e46101cd818484610343565b505050565b60008181527f264f51f07aa3d51ea784d74d6ff6227c6463cf789f1512b893918a8860f146e66020908152604080832080548251818502810185019093528083526060947f264f51f07aa3d51ea784d74d6ff6227c6463cf789f1512b893918a8860f146e49484015b828210156102e757838290600052602060002001805461025a90610a8d565b80601f016020809104026020016040519081016040528092919081815260200182805461028690610a8d565b80156102d35780601f106102a8576101008083540402835291602001916102d3565b820191906000526020600020905b8154815290600101906020018083116102b657829003601f168201915b50505050508152602001906001019061023b565b50505050915050919050565b604080516060808201835280825260006020830152918101919091527f264f51f07aa3d51ea784d74d6ff6227c6463cf789f1512b893918a8860f146e461033b818585610548565b949350505050565b60008281526020849052604090205460ff16156103a25760405162461bcd60e51b815260206004820152601560248201527f546f6b656e20686173206265656e206275726e65640000000000000000000000604482015260640161014c565b6000828152600384016020526040908190208251915190916103c391610ac7565b908152602001604051809103902054600014801561041d57506000828152600184016020526040908190208251915190916103fd91610ac7565b9081526020016040518091039020600201805461041990610a8d565b1590505b156104a3576000828152600284016020908152604082208351815460018101835591845291909220909101906104539082610b29565b50600082815260028401602052604090205461047190600190610be9565b60008381526003850160205260409081902083519151909161049291610ac7565b908152604051908190036020019020555b6000828152600184016020526040908190208251915183926104c491610ac7565b908152604051908190036020019020815181906104e19082610b29565b5060208201516001808301805490917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009091169083600681111561052757610527610a0b565b0217905550604082015160028201906105409082610b29565b505050505050565b6040805160608082018352808252600060208301529181019190915260008381526020859052604090205460ff16156105c35760405162461bcd60e51b815260206004820152601560248201527f546f6b656e20686173206265656e206275726e65640000000000000000000000604482015260640161014c565b60008381526001850160205260409081902090516105e2908490610ac7565b908152602001604051809103902060405180606001604052908160008201805461060b90610a8d565b80601f016020809104026020016040519081016040528092919081815260200182805461063790610a8d565b80156106845780601f1061065957610100808354040283529160200191610684565b820191906000526020600020905b81548152906001019060200180831161066757829003601f168201915b5050509183525050600182015460209091019060ff1660068111156106ab576106ab610a0b565b60068111156106bc576106bc610a0b565b81526020016002820180546106d090610a8d565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc90610a8d565b80156107495780601f1061071e57610100808354040283529160200191610749565b820191906000526020600020905b81548152906001019060200180831161072c57829003601f168201915b50505050508152505090509392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156107945761079461075b565b60405290565b600082601f8301126107ab57600080fd5b813567ffffffffffffffff808211156107c6576107c661075b565b604051601f8301601f19908116603f011681019082821181831017156107ee576107ee61075b565b8160405283815286602085880101111561080757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561083a57600080fd5b82359150602083013567ffffffffffffffff8082111561085957600080fd5b908401906060828703121561086d57600080fd5b610875610771565b82358281111561088457600080fd5b6108908882860161079a565b8252506020830135600781106108a557600080fd5b60208201526040830135828111156108bc57600080fd5b6108c88882860161079a565b6040830152508093505050509250929050565b6000602082840312156108ed57600080fd5b5035919050565b60005b8381101561090f5781810151838201526020016108f7565b50506000910152565b600081518084526109308160208601602086016108f4565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156109b7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526109a5858351610918565b9450928501929085019060010161096b565b5092979650505050505050565b600080604083850312156109d757600080fd5b82359150602083013567ffffffffffffffff8111156109f557600080fd5b610a018582860161079a565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081526000825160606020840152610a3d6080840182610918565b9050602084015160078110610a6257634e487b7160e01b600052602160045260246000fd5b806040850152506040840151601f19848303016060850152610a848282610918565b95945050505050565b600181811c90821680610aa157607f821691505b602082108103610ac157634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610ad98184602087016108f4565b9190910192915050565b601f8211156101cd57600081815260208120601f850160051c81016020861015610b0a5750805b601f850160051c820191505b8181101561054057828155600101610b16565b815167ffffffffffffffff811115610b4357610b4361075b565b610b5781610b518454610a8d565b84610ae3565b602080601f831160018114610b8c5760008415610b745750858301515b600019600386901b1c1916600185901b178555610540565b600085815260208120601f198616915b82811015610bbb57888601518255948401946001909101908401610b9c565b5085821015610bd95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561016e57634e487b7160e01b600052601160045260246000fdfea26469706673582212206f6dbdeb59769d7b3e5ee8b5ff5e9f6ead1275e5399cd17f57cd8366d2ef0e1364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806325d0d9f614610046578063c536080a1461005b578063eaf1c6d314610084575b600080fd5b610059610054366004610827565b6100a4565b005b61006e6100693660046108db565b610163565b60405161007b9190610944565b60405180910390f35b6100976100923660046109c4565b610174565b60405161007b9190610a21565b336100e37fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c13205473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16148061010457503033145b6101555760405162461bcd60e51b815260206004820152601f60248201527f6e6f7420617574686f72697a656420746f2063616c6c2066756e6374696f6e0060448201526064015b60405180910390fd5b61015f82826101a1565b5050565b606061016e826101d2565b92915050565b6040805160608082018352808252600060208301529181019190915261019a83836102f3565b9392505050565b7f264f51f07aa3d51ea784d74d6ff6227c6463cf789f1512b893918a8860f146e46101cd818484610343565b505050565b60008181527f264f51f07aa3d51ea784d74d6ff6227c6463cf789f1512b893918a8860f146e66020908152604080832080548251818502810185019093528083526060947f264f51f07aa3d51ea784d74d6ff6227c6463cf789f1512b893918a8860f146e49484015b828210156102e757838290600052602060002001805461025a90610a8d565b80601f016020809104026020016040519081016040528092919081815260200182805461028690610a8d565b80156102d35780601f106102a8576101008083540402835291602001916102d3565b820191906000526020600020905b8154815290600101906020018083116102b657829003601f168201915b50505050508152602001906001019061023b565b50505050915050919050565b604080516060808201835280825260006020830152918101919091527f264f51f07aa3d51ea784d74d6ff6227c6463cf789f1512b893918a8860f146e461033b818585610548565b949350505050565b60008281526020849052604090205460ff16156103a25760405162461bcd60e51b815260206004820152601560248201527f546f6b656e20686173206265656e206275726e65640000000000000000000000604482015260640161014c565b6000828152600384016020526040908190208251915190916103c391610ac7565b908152602001604051809103902054600014801561041d57506000828152600184016020526040908190208251915190916103fd91610ac7565b9081526020016040518091039020600201805461041990610a8d565b1590505b156104a3576000828152600284016020908152604082208351815460018101835591845291909220909101906104539082610b29565b50600082815260028401602052604090205461047190600190610be9565b60008381526003850160205260409081902083519151909161049291610ac7565b908152604051908190036020019020555b6000828152600184016020526040908190208251915183926104c491610ac7565b908152604051908190036020019020815181906104e19082610b29565b5060208201516001808301805490917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009091169083600681111561052757610527610a0b565b0217905550604082015160028201906105409082610b29565b505050505050565b6040805160608082018352808252600060208301529181019190915260008381526020859052604090205460ff16156105c35760405162461bcd60e51b815260206004820152601560248201527f546f6b656e20686173206265656e206275726e65640000000000000000000000604482015260640161014c565b60008381526001850160205260409081902090516105e2908490610ac7565b908152602001604051809103902060405180606001604052908160008201805461060b90610a8d565b80601f016020809104026020016040519081016040528092919081815260200182805461063790610a8d565b80156106845780601f1061065957610100808354040283529160200191610684565b820191906000526020600020905b81548152906001019060200180831161066757829003601f168201915b5050509183525050600182015460209091019060ff1660068111156106ab576106ab610a0b565b60068111156106bc576106bc610a0b565b81526020016002820180546106d090610a8d565b80601f01602080910402602001604051908101604052809291908181526020018280546106fc90610a8d565b80156107495780601f1061071e57610100808354040283529160200191610749565b820191906000526020600020905b81548152906001019060200180831161072c57829003601f168201915b50505050508152505090509392505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156107945761079461075b565b60405290565b600082601f8301126107ab57600080fd5b813567ffffffffffffffff808211156107c6576107c661075b565b604051601f8301601f19908116603f011681019082821181831017156107ee576107ee61075b565b8160405283815286602085880101111561080757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561083a57600080fd5b82359150602083013567ffffffffffffffff8082111561085957600080fd5b908401906060828703121561086d57600080fd5b610875610771565b82358281111561088457600080fd5b6108908882860161079a565b8252506020830135600781106108a557600080fd5b60208201526040830135828111156108bc57600080fd5b6108c88882860161079a565b6040830152508093505050509250929050565b6000602082840312156108ed57600080fd5b5035919050565b60005b8381101561090f5781810151838201526020016108f7565b50506000910152565b600081518084526109308160208601602086016108f4565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156109b7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526109a5858351610918565b9450928501929085019060010161096b565b5092979650505050505050565b600080604083850312156109d757600080fd5b82359150602083013567ffffffffffffffff8111156109f557600080fd5b610a018582860161079a565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b602081526000825160606020840152610a3d6080840182610918565b9050602084015160078110610a6257634e487b7160e01b600052602160045260246000fd5b806040850152506040840151601f19848303016060850152610a848282610918565b95945050505050565b600181811c90821680610aa157607f821691505b602082108103610ac157634e487b7160e01b600052602260045260246000fd5b50919050565b60008251610ad98184602087016108f4565b9190910192915050565b601f8211156101cd57600081815260208120601f850160051c81016020861015610b0a5750805b601f850160051c820191505b8181101561054057828155600101610b16565b815167ffffffffffffffff811115610b4357610b4361075b565b610b5781610b518454610a8d565b84610ae3565b602080601f831160018114610b8c5760008415610b745750858301515b600019600386901b1c1916600185901b178555610540565b600085815260208120601f198616915b82811015610bbb57888601518255948401946001909101908401610b9c565b5085821015610bd95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561016e57634e487b7160e01b600052601160045260246000fdfea26469706673582212206f6dbdeb59769d7b3e5ee8b5ff5e9f6ead1275e5399cd17f57cd8366d2ef0e1364736f6c63430008110033",
  "libraries": {
    "AddressSet": "0xe816f9c968c92bef011eabc25bb1e062f23f0ce3",
    "AttributeLib": "0x54b27B50D22583c3F8D44062105fa3746092F98D",
    "Base64": "0x18f7751ECdE5e9A20F7ba3b3E6419e5486dce02C",
    "Bytes32Set": "0xF8cF9DDd669304191Db084053CB0CB2B996721A8",
    "ClaimStorageLib": "0xb355293012312F75756CE66d5D6208D50E9570D9",
    "ClaimTopicLib": "0xfA5F92fB7D658b83Bd8eb891CFa1de03B2dE6ca0",
    "DiamondFactoryLib": "0x5e3a72a725e885D3297Df110fed8513c1A89590F",
    "DiamondLib": "0xfF3811e752E2fB8ca0192Ac977ec7EE0154C27D7",
    "ERC721AEnumerationLib": "0x3862fD7Aee0687c461D40A3c6AbaD9bD9F15e6c4",
    "ERC721ALib": "0x185d29cB9B14a6EA5d114534EF1A99C205d13204",
    "IdentityLib": "0x8187074C0542Adc6f8679958106A546F2Ac498cc",
    "LibDiamond": "0x0ef6EE0407615E57bC04bF16C21a9aeA1530f650",
    "MetadataLib": "0xFFa8D07fA502AbD668CFdba501999F3074f1a78c",
    "StringsLib": "0xfe30ea7bcFa85debB8FC3c8AA925ebEb22011b6f",
    "Strings": "0x9fF441f16e0163DCa2109c376d15348b3001232D",
    "SVGTemplatesLib": "0xB66E75ed2C1202b29F37e862e00CdA37B4edA8A3",
    "TrustedIssuerLib": "0x2DE50b277A2b56220F676E9C84524f9c3fdc12F3",
    "UInt256Set": "0xCA610CCce4b2aB25Adc1072a0C21df42320478A3",
    "IdentityFactory": "0xEA0f9DE12192E09bA196a2819081c196BAc99104"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "ERC721AAttributes",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setAttribute(uint256,(string,uint8,string))": {
        "notice": "set an attribute value"
      }
    },
    "notice": "the total balance of a token type",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}